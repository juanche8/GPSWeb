'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.42000
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict On
Option Explicit On

Imports System
Imports System.Collections.Generic
Imports System.ComponentModel
Imports System.Data
Imports System.Data.Linq
Imports System.Data.Linq.Mapping
Imports System.Linq
Imports System.Linq.Expressions
Imports System.Reflection


<Global.System.Data.Linq.Mapping.DatabaseAttribute(Name:="Posicionamientos")>  _
Partial Public Class DataClassesGPSDataContext
	Inherits System.Data.Linq.DataContext
	
	Private Shared mappingSource As System.Data.Linq.Mapping.MappingSource = New AttributeMappingSource()
	
  #Region "Extensibility Method Definitions"
  Partial Private Sub OnCreated()
  End Sub
  Partial Private Sub InsertTipos_Marcadores(instance As Tipos_Marcadores)
    End Sub
  Partial Private Sub UpdateTipos_Marcadores(instance As Tipos_Marcadores)
    End Sub
  Partial Private Sub DeleteTipos_Marcadores(instance As Tipos_Marcadores)
    End Sub
  Partial Private Sub InsertAdministradores(instance As Administradores)
    End Sub
  Partial Private Sub UpdateAdministradores(instance As Administradores)
    End Sub
  Partial Private Sub DeleteAdministradores(instance As Administradores)
    End Sub
  Partial Private Sub InsertMarcadores(instance As Marcadores)
    End Sub
  Partial Private Sub UpdateMarcadores(instance As Marcadores)
    End Sub
  Partial Private Sub DeleteMarcadores(instance As Marcadores)
    End Sub
  Partial Private Sub InsertClientes_Particulares(instance As Clientes_Particulares)
    End Sub
  Partial Private Sub UpdateClientes_Particulares(instance As Clientes_Particulares)
    End Sub
  Partial Private Sub DeleteClientes_Particulares(instance As Clientes_Particulares)
    End Sub
  Partial Private Sub InsertTipos_Clientes(instance As Tipos_Clientes)
    End Sub
  Partial Private Sub UpdateTipos_Clientes(instance As Tipos_Clientes)
    End Sub
  Partial Private Sub DeleteTipos_Clientes(instance As Tipos_Clientes)
    End Sub
  Partial Private Sub InsertMarcadores_GenericosXClientes(instance As Marcadores_GenericosXClientes)
    End Sub
  Partial Private Sub UpdateMarcadores_GenericosXClientes(instance As Marcadores_GenericosXClientes)
    End Sub
  Partial Private Sub DeleteMarcadores_GenericosXClientes(instance As Marcadores_GenericosXClientes)
    End Sub
  Partial Private Sub InsertClientes_Empresas(instance As Clientes_Empresas)
    End Sub
  Partial Private Sub UpdateClientes_Empresas(instance As Clientes_Empresas)
    End Sub
  Partial Private Sub DeleteClientes_Empresas(instance As Clientes_Empresas)
    End Sub
  Partial Private Sub InsertTipos_Vias(instance As Tipos_Vias)
    End Sub
  Partial Private Sub UpdateTipos_Vias(instance As Tipos_Vias)
    End Sub
  Partial Private Sub DeleteTipos_Vias(instance As Tipos_Vias)
    End Sub
  Partial Private Sub InsertContactos_Clientes(instance As Contactos_Clientes)
    End Sub
  Partial Private Sub UpdateContactos_Clientes(instance As Contactos_Clientes)
    End Sub
  Partial Private Sub DeleteContactos_Clientes(instance As Contactos_Clientes)
    End Sub
  Partial Private Sub InsertParametros(instance As Parametros)
    End Sub
  Partial Private Sub UpdateParametros(instance As Parametros)
    End Sub
  Partial Private Sub DeleteParametros(instance As Parametros)
    End Sub
  Partial Private Sub InsertZonas_Puntos(instance As Zonas_Puntos)
    End Sub
  Partial Private Sub UpdateZonas_Puntos(instance As Zonas_Puntos)
    End Sub
  Partial Private Sub DeleteZonas_Puntos(instance As Zonas_Puntos)
    End Sub
  Partial Private Sub InsertZonas(instance As Zonas)
    End Sub
  Partial Private Sub UpdateZonas(instance As Zonas)
    End Sub
  Partial Private Sub DeleteZonas(instance As Zonas)
    End Sub
  Partial Private Sub InsertAlertas_Zonas(instance As Alertas_Zonas)
    End Sub
  Partial Private Sub UpdateAlertas_Zonas(instance As Alertas_Zonas)
    End Sub
  Partial Private Sub DeleteAlertas_Zonas(instance As Alertas_Zonas)
    End Sub
  Partial Private Sub InsertAlertas_Zonas_Frecuencias(instance As Alertas_Zonas_Frecuencias)
    End Sub
  Partial Private Sub UpdateAlertas_Zonas_Frecuencias(instance As Alertas_Zonas_Frecuencias)
    End Sub
  Partial Private Sub DeleteAlertas_Zonas_Frecuencias(instance As Alertas_Zonas_Frecuencias)
    End Sub
  Partial Private Sub InsertAlertas_Recorridos_Frecuencias(instance As Alertas_Recorridos_Frecuencias)
    End Sub
  Partial Private Sub UpdateAlertas_Recorridos_Frecuencias(instance As Alertas_Recorridos_Frecuencias)
    End Sub
  Partial Private Sub DeleteAlertas_Recorridos_Frecuencias(instance As Alertas_Recorridos_Frecuencias)
    End Sub
  Partial Private Sub InsertAlertas_Direcciones_Frecuencia(instance As Alertas_Direcciones_Frecuencia)
    End Sub
  Partial Private Sub UpdateAlertas_Direcciones_Frecuencia(instance As Alertas_Direcciones_Frecuencia)
    End Sub
  Partial Private Sub DeleteAlertas_Direcciones_Frecuencia(instance As Alertas_Direcciones_Frecuencia)
    End Sub
  Partial Private Sub InsertRecorridos(instance As Recorridos)
    End Sub
  Partial Private Sub UpdateRecorridos(instance As Recorridos)
    End Sub
  Partial Private Sub DeleteRecorridos(instance As Recorridos)
    End Sub
  Partial Private Sub InsertAlertas_Recordatorios_Por_Fechas(instance As Alertas_Recordatorios_Por_Fechas)
    End Sub
  Partial Private Sub UpdateAlertas_Recordatorios_Por_Fechas(instance As Alertas_Recordatorios_Por_Fechas)
    End Sub
  Partial Private Sub DeleteAlertas_Recordatorios_Por_Fechas(instance As Alertas_Recordatorios_Por_Fechas)
    End Sub
  Partial Private Sub InsertAlarmas_Velocidad(instance As Alarmas_Velocidad)
    End Sub
  Partial Private Sub UpdateAlarmas_Velocidad(instance As Alarmas_Velocidad)
    End Sub
  Partial Private Sub DeleteAlarmas_Velocidad(instance As Alarmas_Velocidad)
    End Sub
  Partial Private Sub InsertAlertas_Velocidad_Configuradas(instance As Alertas_Velocidad_Configuradas)
    End Sub
  Partial Private Sub UpdateAlertas_Velocidad_Configuradas(instance As Alertas_Velocidad_Configuradas)
    End Sub
  Partial Private Sub DeleteAlertas_Velocidad_Configuradas(instance As Alertas_Velocidad_Configuradas)
    End Sub
  Partial Private Sub InsertDirecciones(instance As Direcciones)
    End Sub
  Partial Private Sub UpdateDirecciones(instance As Direcciones)
    End Sub
  Partial Private Sub DeleteDirecciones(instance As Direcciones)
    End Sub
  Partial Private Sub InsertAlertas_Direcciones(instance As Alertas_Direcciones)
    End Sub
  Partial Private Sub UpdateAlertas_Direcciones(instance As Alertas_Direcciones)
    End Sub
  Partial Private Sub DeleteAlertas_Direcciones(instance As Alertas_Direcciones)
    End Sub
  Partial Private Sub InsertTipos_Usos_Moviles(instance As Tipos_Usos_Moviles)
    End Sub
  Partial Private Sub UpdateTipos_Usos_Moviles(instance As Tipos_Usos_Moviles)
    End Sub
  Partial Private Sub DeleteTipos_Usos_Moviles(instance As Tipos_Usos_Moviles)
    End Sub
  Partial Private Sub InsertSensores_Configurados(instance As Sensores_Configurados)
    End Sub
  Partial Private Sub UpdateSensores_Configurados(instance As Sensores_Configurados)
    End Sub
  Partial Private Sub DeleteSensores_Configurados(instance As Sensores_Configurados)
    End Sub
  Partial Private Sub InsertSensores_Moviles(instance As Sensores_Moviles)
    End Sub
  Partial Private Sub UpdateSensores_Moviles(instance As Sensores_Moviles)
    End Sub
  Partial Private Sub DeleteSensores_Moviles(instance As Sensores_Moviles)
    End Sub
  Partial Private Sub InsertSensores(instance As Sensores)
    End Sub
  Partial Private Sub UpdateSensores(instance As Sensores)
    End Sub
  Partial Private Sub DeleteSensores(instance As Sensores)
    End Sub
  Partial Private Sub InsertGrupos(instance As Grupos)
    End Sub
  Partial Private Sub UpdateGrupos(instance As Grupos)
    End Sub
  Partial Private Sub DeleteGrupos(instance As Grupos)
    End Sub
  Partial Private Sub InsertGrupos_Vehiculos(instance As Grupos_Vehiculos)
    End Sub
  Partial Private Sub UpdateGrupos_Vehiculos(instance As Grupos_Vehiculos)
    End Sub
  Partial Private Sub DeleteGrupos_Vehiculos(instance As Grupos_Vehiculos)
    End Sub
  Partial Private Sub InsertTipos_Vehiculos(instance As Tipos_Vehiculos)
    End Sub
  Partial Private Sub UpdateTipos_Vehiculos(instance As Tipos_Vehiculos)
    End Sub
  Partial Private Sub DeleteTipos_Vehiculos(instance As Tipos_Vehiculos)
    End Sub
  Partial Private Sub InsertModulos_Conexiones(instance As Modulos_Conexiones)
    End Sub
  Partial Private Sub UpdateModulos_Conexiones(instance As Modulos_Conexiones)
    End Sub
  Partial Private Sub DeleteModulos_Conexiones(instance As Modulos_Conexiones)
    End Sub
  Partial Private Sub InsertAlertas_Recorridos(instance As Alertas_Recorridos)
    End Sub
  Partial Private Sub UpdateAlertas_Recorridos(instance As Alertas_Recorridos)
    End Sub
  Partial Private Sub DeleteAlertas_Recorridos(instance As Alertas_Recorridos)
    End Sub
  Partial Private Sub InsertAlarmas_Fuera_Horario_Dias(instance As Alarmas_Fuera_Horario_Dias)
    End Sub
  Partial Private Sub UpdateAlarmas_Fuera_Horario_Dias(instance As Alarmas_Fuera_Horario_Dias)
    End Sub
  Partial Private Sub DeleteAlarmas_Fuera_Horario_Dias(instance As Alarmas_Fuera_Horario_Dias)
    End Sub
  Partial Private Sub InsertAlarmas_Fuera_Horario(instance As Alarmas_Fuera_Horario)
    End Sub
  Partial Private Sub UpdateAlarmas_Fuera_Horario(instance As Alarmas_Fuera_Horario)
    End Sub
  Partial Private Sub DeleteAlarmas_Fuera_Horario(instance As Alarmas_Fuera_Horario)
    End Sub
  Partial Private Sub InsertAlarma_Inicio_Actividad(instance As Alarma_Inicio_Actividad)
    End Sub
  Partial Private Sub UpdateAlarma_Inicio_Actividad(instance As Alarma_Inicio_Actividad)
    End Sub
  Partial Private Sub DeleteAlarma_Inicio_Actividad(instance As Alarma_Inicio_Actividad)
    End Sub
  Partial Private Sub InsertAlarmas_Inicio_Actividad_Dias(instance As Alarmas_Inicio_Actividad_Dias)
    End Sub
  Partial Private Sub UpdateAlarmas_Inicio_Actividad_Dias(instance As Alarmas_Inicio_Actividad_Dias)
    End Sub
  Partial Private Sub DeleteAlarmas_Inicio_Actividad_Dias(instance As Alarmas_Inicio_Actividad_Dias)
    End Sub
  Partial Private Sub InsertAlarmas_Inactividad_Dias(instance As Alarmas_Inactividad_Dias)
    End Sub
  Partial Private Sub UpdateAlarmas_Inactividad_Dias(instance As Alarmas_Inactividad_Dias)
    End Sub
  Partial Private Sub DeleteAlarmas_Inactividad_Dias(instance As Alarmas_Inactividad_Dias)
    End Sub
  Partial Private Sub InsertAlarmas_Inactividad(instance As Alarmas_Inactividad)
    End Sub
  Partial Private Sub UpdateAlarmas_Inactividad(instance As Alarmas_Inactividad)
    End Sub
  Partial Private Sub DeleteAlarmas_Inactividad(instance As Alarmas_Inactividad)
    End Sub
  Partial Private Sub InsertUso_Moviles(instance As Uso_Moviles)
    End Sub
  Partial Private Sub UpdateUso_Moviles(instance As Uso_Moviles)
    End Sub
  Partial Private Sub DeleteUso_Moviles(instance As Uso_Moviles)
    End Sub
  Partial Private Sub InsertAlamas_Kms_Excedidos(instance As Alamas_Kms_Excedidos)
    End Sub
  Partial Private Sub UpdateAlamas_Kms_Excedidos(instance As Alamas_Kms_Excedidos)
    End Sub
  Partial Private Sub DeleteAlamas_Kms_Excedidos(instance As Alamas_Kms_Excedidos)
    End Sub
  Partial Private Sub InsertRecorridos_Puntos(instance As Recorridos_Puntos)
    End Sub
  Partial Private Sub UpdateRecorridos_Puntos(instance As Recorridos_Puntos)
    End Sub
  Partial Private Sub DeleteRecorridos_Puntos(instance As Recorridos_Puntos)
    End Sub
  Partial Private Sub InsertAlarmas(instance As Alarmas)
    End Sub
  Partial Private Sub UpdateAlarmas(instance As Alarmas)
    End Sub
  Partial Private Sub DeleteAlarmas(instance As Alarmas)
    End Sub
  Partial Private Sub InsertAlertas_Recorrido_Puntos_Visitar(instance As Alertas_Recorrido_Puntos_Visitar)
    End Sub
  Partial Private Sub UpdateAlertas_Recorrido_Puntos_Visitar(instance As Alertas_Recorrido_Puntos_Visitar)
    End Sub
  Partial Private Sub DeleteAlertas_Recorrido_Puntos_Visitar(instance As Alertas_Recorrido_Puntos_Visitar)
    End Sub
  Partial Private Sub InsertInactividad_Moviles(instance As Inactividad_Moviles)
    End Sub
  Partial Private Sub UpdateInactividad_Moviles(instance As Inactividad_Moviles)
    End Sub
  Partial Private Sub DeleteInactividad_Moviles(instance As Inactividad_Moviles)
    End Sub
  Partial Private Sub InsertCortes_Corriente(instance As Cortes_Corriente)
    End Sub
  Partial Private Sub UpdateCortes_Corriente(instance As Cortes_Corriente)
    End Sub
  Partial Private Sub DeleteCortes_Corriente(instance As Cortes_Corriente)
    End Sub
  Partial Private Sub InsertEvento(instance As Evento)
    End Sub
  Partial Private Sub UpdateEvento(instance As Evento)
    End Sub
  Partial Private Sub DeleteEvento(instance As Evento)
    End Sub
  Partial Private Sub InsertModulo(instance As Modulo)
    End Sub
  Partial Private Sub UpdateModulo(instance As Modulo)
    End Sub
  Partial Private Sub DeleteModulo(instance As Modulo)
    End Sub
  Partial Private Sub InsertMarcadores_Generico(instance As Marcadores_Generico)
    End Sub
  Partial Private Sub UpdateMarcadores_Generico(instance As Marcadores_Generico)
    End Sub
  Partial Private Sub DeleteMarcadores_Generico(instance As Marcadores_Generico)
    End Sub
  Partial Private Sub InsertAlertas_Recordatorios_Por_Km(instance As Alertas_Recordatorios_Por_Km)
    End Sub
  Partial Private Sub UpdateAlertas_Recordatorios_Por_Km(instance As Alertas_Recordatorios_Por_Km)
    End Sub
  Partial Private Sub DeleteAlertas_Recordatorios_Por_Km(instance As Alertas_Recordatorios_Por_Km)
    End Sub
  Partial Private Sub InsertRespuestas_Comando(instance As Respuestas_Comando)
    End Sub
  Partial Private Sub UpdateRespuestas_Comando(instance As Respuestas_Comando)
    End Sub
  Partial Private Sub DeleteRespuestas_Comando(instance As Respuestas_Comando)
    End Sub
  Partial Private Sub InsertComandos_Enviado(instance As Comandos_Enviado)
    End Sub
  Partial Private Sub UpdateComandos_Enviado(instance As Comandos_Enviado)
    End Sub
  Partial Private Sub DeleteComandos_Enviado(instance As Comandos_Enviado)
    End Sub
  Partial Private Sub InsertComando(instance As Comando)
    End Sub
  Partial Private Sub UpdateComando(instance As Comando)
    End Sub
  Partial Private Sub DeleteComando(instance As Comando)
    End Sub
  Partial Private Sub InsertCliente(instance As Cliente)
    End Sub
  Partial Private Sub UpdateCliente(instance As Cliente)
    End Sub
  Partial Private Sub DeleteCliente(instance As Cliente)
    End Sub
  Partial Private Sub InsertPlane(instance As Plane)
    End Sub
  Partial Private Sub UpdatePlane(instance As Plane)
    End Sub
  Partial Private Sub DeletePlane(instance As Plane)
    End Sub
  Partial Private Sub InsertPlanes_Parametro(instance As Planes_Parametro)
    End Sub
  Partial Private Sub UpdatePlanes_Parametro(instance As Planes_Parametro)
    End Sub
  Partial Private Sub DeletePlanes_Parametro(instance As Planes_Parametro)
    End Sub
  Partial Private Sub InsertVehiculo(instance As Vehiculo)
    End Sub
  Partial Private Sub UpdateVehiculo(instance As Vehiculo)
    End Sub
  Partial Private Sub DeleteVehiculo(instance As Vehiculo)
    End Sub
  #End Region
	
	Public Sub New()
		MyBase.New(Global.GPS.Data.My.MySettings.Default.GPSWebConnectionString, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public ReadOnly Property Tipos_Marcadores() As System.Data.Linq.Table(Of Tipos_Marcadores)
		Get
			Return Me.GetTable(Of Tipos_Marcadores)
		End Get
	End Property
	
	Public ReadOnly Property Administradores() As System.Data.Linq.Table(Of Administradores)
		Get
			Return Me.GetTable(Of Administradores)
		End Get
	End Property
	
	Public ReadOnly Property Marcadores() As System.Data.Linq.Table(Of Marcadores)
		Get
			Return Me.GetTable(Of Marcadores)
		End Get
	End Property
	
	Public ReadOnly Property Clientes_Particulares() As System.Data.Linq.Table(Of Clientes_Particulares)
		Get
			Return Me.GetTable(Of Clientes_Particulares)
		End Get
	End Property
	
	Public ReadOnly Property Tipos_Clientes() As System.Data.Linq.Table(Of Tipos_Clientes)
		Get
			Return Me.GetTable(Of Tipos_Clientes)
		End Get
	End Property
	
	Public ReadOnly Property Marcadores_GenericosXClientes() As System.Data.Linq.Table(Of Marcadores_GenericosXClientes)
		Get
			Return Me.GetTable(Of Marcadores_GenericosXClientes)
		End Get
	End Property
	
	Public ReadOnly Property Clientes_Empresas() As System.Data.Linq.Table(Of Clientes_Empresas)
		Get
			Return Me.GetTable(Of Clientes_Empresas)
		End Get
	End Property
	
	Public ReadOnly Property Tipos_Vias() As System.Data.Linq.Table(Of Tipos_Vias)
		Get
			Return Me.GetTable(Of Tipos_Vias)
		End Get
	End Property
	
	Public ReadOnly Property Contactos_Clientes() As System.Data.Linq.Table(Of Contactos_Clientes)
		Get
			Return Me.GetTable(Of Contactos_Clientes)
		End Get
	End Property
	
	Public ReadOnly Property Parametros() As System.Data.Linq.Table(Of Parametros)
		Get
			Return Me.GetTable(Of Parametros)
		End Get
	End Property
	
	Public ReadOnly Property Zonas_Puntos() As System.Data.Linq.Table(Of Zonas_Puntos)
		Get
			Return Me.GetTable(Of Zonas_Puntos)
		End Get
	End Property
	
	Public ReadOnly Property Zonas() As System.Data.Linq.Table(Of Zonas)
		Get
			Return Me.GetTable(Of Zonas)
		End Get
	End Property
	
	Public ReadOnly Property Alertas_Zonas() As System.Data.Linq.Table(Of Alertas_Zonas)
		Get
			Return Me.GetTable(Of Alertas_Zonas)
		End Get
	End Property
	
	Public ReadOnly Property Alertas_Zonas_Frecuencias() As System.Data.Linq.Table(Of Alertas_Zonas_Frecuencias)
		Get
			Return Me.GetTable(Of Alertas_Zonas_Frecuencias)
		End Get
	End Property
	
	Public ReadOnly Property Alertas_Recorridos_Frecuencias() As System.Data.Linq.Table(Of Alertas_Recorridos_Frecuencias)
		Get
			Return Me.GetTable(Of Alertas_Recorridos_Frecuencias)
		End Get
	End Property
	
	Public ReadOnly Property Alertas_Direcciones_Frecuencia() As System.Data.Linq.Table(Of Alertas_Direcciones_Frecuencia)
		Get
			Return Me.GetTable(Of Alertas_Direcciones_Frecuencia)
		End Get
	End Property
	
	Public ReadOnly Property Recorridos() As System.Data.Linq.Table(Of Recorridos)
		Get
			Return Me.GetTable(Of Recorridos)
		End Get
	End Property
	
	Public ReadOnly Property Alertas_Recordatorios_Por_Fechas() As System.Data.Linq.Table(Of Alertas_Recordatorios_Por_Fechas)
		Get
			Return Me.GetTable(Of Alertas_Recordatorios_Por_Fechas)
		End Get
	End Property
	
	Public ReadOnly Property Alarmas_Velocidad() As System.Data.Linq.Table(Of Alarmas_Velocidad)
		Get
			Return Me.GetTable(Of Alarmas_Velocidad)
		End Get
	End Property
	
	Public ReadOnly Property Alertas_Velocidad_Configuradas() As System.Data.Linq.Table(Of Alertas_Velocidad_Configuradas)
		Get
			Return Me.GetTable(Of Alertas_Velocidad_Configuradas)
		End Get
	End Property
	
	Public ReadOnly Property Direcciones() As System.Data.Linq.Table(Of Direcciones)
		Get
			Return Me.GetTable(Of Direcciones)
		End Get
	End Property
	
	Public ReadOnly Property Alertas_Direcciones() As System.Data.Linq.Table(Of Alertas_Direcciones)
		Get
			Return Me.GetTable(Of Alertas_Direcciones)
		End Get
	End Property
	
	Public ReadOnly Property Tipos_Usos_Moviles() As System.Data.Linq.Table(Of Tipos_Usos_Moviles)
		Get
			Return Me.GetTable(Of Tipos_Usos_Moviles)
		End Get
	End Property
	
	Public ReadOnly Property Sensores_Configurados() As System.Data.Linq.Table(Of Sensores_Configurados)
		Get
			Return Me.GetTable(Of Sensores_Configurados)
		End Get
	End Property
	
	Public ReadOnly Property Sensores_Moviles() As System.Data.Linq.Table(Of Sensores_Moviles)
		Get
			Return Me.GetTable(Of Sensores_Moviles)
		End Get
	End Property
	
	Public ReadOnly Property Sensores() As System.Data.Linq.Table(Of Sensores)
		Get
			Return Me.GetTable(Of Sensores)
		End Get
	End Property
	
	Public ReadOnly Property Grupos() As System.Data.Linq.Table(Of Grupos)
		Get
			Return Me.GetTable(Of Grupos)
		End Get
	End Property
	
	Public ReadOnly Property Grupos_Vehiculos() As System.Data.Linq.Table(Of Grupos_Vehiculos)
		Get
			Return Me.GetTable(Of Grupos_Vehiculos)
		End Get
	End Property
	
	Public ReadOnly Property Tipos_Vehiculos() As System.Data.Linq.Table(Of Tipos_Vehiculos)
		Get
			Return Me.GetTable(Of Tipos_Vehiculos)
		End Get
	End Property
	
	Public ReadOnly Property Modulos_Conexiones() As System.Data.Linq.Table(Of Modulos_Conexiones)
		Get
			Return Me.GetTable(Of Modulos_Conexiones)
		End Get
	End Property
	
	Public ReadOnly Property Alertas_Recorridos() As System.Data.Linq.Table(Of Alertas_Recorridos)
		Get
			Return Me.GetTable(Of Alertas_Recorridos)
		End Get
	End Property
	
	Public ReadOnly Property Alarmas_Fuera_Horario_Dias() As System.Data.Linq.Table(Of Alarmas_Fuera_Horario_Dias)
		Get
			Return Me.GetTable(Of Alarmas_Fuera_Horario_Dias)
		End Get
	End Property
	
	Public ReadOnly Property Alarmas_Fuera_Horario() As System.Data.Linq.Table(Of Alarmas_Fuera_Horario)
		Get
			Return Me.GetTable(Of Alarmas_Fuera_Horario)
		End Get
	End Property
	
	Public ReadOnly Property Alarma_Inicio_Actividad() As System.Data.Linq.Table(Of Alarma_Inicio_Actividad)
		Get
			Return Me.GetTable(Of Alarma_Inicio_Actividad)
		End Get
	End Property
	
	Public ReadOnly Property Alarmas_Inicio_Actividad_Dias() As System.Data.Linq.Table(Of Alarmas_Inicio_Actividad_Dias)
		Get
			Return Me.GetTable(Of Alarmas_Inicio_Actividad_Dias)
		End Get
	End Property
	
	Public ReadOnly Property Alarmas_Inactividad_Dias() As System.Data.Linq.Table(Of Alarmas_Inactividad_Dias)
		Get
			Return Me.GetTable(Of Alarmas_Inactividad_Dias)
		End Get
	End Property
	
	Public ReadOnly Property Alarmas_Inactividad() As System.Data.Linq.Table(Of Alarmas_Inactividad)
		Get
			Return Me.GetTable(Of Alarmas_Inactividad)
		End Get
	End Property
	
	Public ReadOnly Property Uso_Moviles() As System.Data.Linq.Table(Of Uso_Moviles)
		Get
			Return Me.GetTable(Of Uso_Moviles)
		End Get
	End Property
	
	Public ReadOnly Property Alamas_Kms_Excedidos() As System.Data.Linq.Table(Of Alamas_Kms_Excedidos)
		Get
			Return Me.GetTable(Of Alamas_Kms_Excedidos)
		End Get
	End Property
	
	Public ReadOnly Property Recorridos_Puntos() As System.Data.Linq.Table(Of Recorridos_Puntos)
		Get
			Return Me.GetTable(Of Recorridos_Puntos)
		End Get
	End Property
	
	Public ReadOnly Property Alarmas() As System.Data.Linq.Table(Of Alarmas)
		Get
			Return Me.GetTable(Of Alarmas)
		End Get
	End Property
	
	Public ReadOnly Property Alertas_Recorrido_Puntos_Visitar() As System.Data.Linq.Table(Of Alertas_Recorrido_Puntos_Visitar)
		Get
			Return Me.GetTable(Of Alertas_Recorrido_Puntos_Visitar)
		End Get
	End Property
	
	Public ReadOnly Property Inactividad_Moviles() As System.Data.Linq.Table(Of Inactividad_Moviles)
		Get
			Return Me.GetTable(Of Inactividad_Moviles)
		End Get
	End Property
	
	Public ReadOnly Property Cortes_Corrientes() As System.Data.Linq.Table(Of Cortes_Corriente)
		Get
			Return Me.GetTable(Of Cortes_Corriente)
		End Get
	End Property
	
	Public ReadOnly Property Eventos() As System.Data.Linq.Table(Of Evento)
		Get
			Return Me.GetTable(Of Evento)
		End Get
	End Property
	
	Public ReadOnly Property Modulos() As System.Data.Linq.Table(Of Modulo)
		Get
			Return Me.GetTable(Of Modulo)
		End Get
	End Property
	
	Public ReadOnly Property Marcadores_Genericos() As System.Data.Linq.Table(Of Marcadores_Generico)
		Get
			Return Me.GetTable(Of Marcadores_Generico)
		End Get
	End Property
	
	Public ReadOnly Property Alertas_Recordatorios_Por_Kms() As System.Data.Linq.Table(Of Alertas_Recordatorios_Por_Km)
		Get
			Return Me.GetTable(Of Alertas_Recordatorios_Por_Km)
		End Get
	End Property
	
	Public ReadOnly Property Respuestas_Comandos() As System.Data.Linq.Table(Of Respuestas_Comando)
		Get
			Return Me.GetTable(Of Respuestas_Comando)
		End Get
	End Property
	
	Public ReadOnly Property Comandos_Enviados() As System.Data.Linq.Table(Of Comandos_Enviado)
		Get
			Return Me.GetTable(Of Comandos_Enviado)
		End Get
	End Property
	
	Public ReadOnly Property Comandos() As System.Data.Linq.Table(Of Comando)
		Get
			Return Me.GetTable(Of Comando)
		End Get
	End Property
	
	Public ReadOnly Property vMonitoreos() As System.Data.Linq.Table(Of vMonitoreo)
		Get
			Return Me.GetTable(Of vMonitoreo)
		End Get
	End Property
	
	Public ReadOnly Property Clientes() As System.Data.Linq.Table(Of Cliente)
		Get
			Return Me.GetTable(Of Cliente)
		End Get
	End Property
	
	Public ReadOnly Property Planes() As System.Data.Linq.Table(Of Plane)
		Get
			Return Me.GetTable(Of Plane)
		End Get
	End Property
	
	Public ReadOnly Property Planes_Parametros() As System.Data.Linq.Table(Of Planes_Parametro)
		Get
			Return Me.GetTable(Of Planes_Parametro)
		End Get
	End Property
	
	Public ReadOnly Property Vehiculos() As System.Data.Linq.Table(Of Vehiculo)
		Get
			Return Me.GetTable(Of Vehiculo)
		End Get
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Tipos_Marcadores")>  _
Partial Public Class Tipos_Marcadores
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _tipo_marc_id As Integer
	
	Private _tipo_marc_nombre As String
	
	Private _tipo_marc_imagen As String
	
	Private _Marcadores As EntitySet(Of Marcadores)
	
	Private _Marcadores_Genericos As EntitySet(Of Marcadores_Generico)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub Ontipo_marc_idChanging(value As Integer)
    End Sub
    Partial Private Sub Ontipo_marc_idChanged()
    End Sub
    Partial Private Sub Ontipo_marc_nombreChanging(value As String)
    End Sub
    Partial Private Sub Ontipo_marc_nombreChanged()
    End Sub
    Partial Private Sub Ontipo_marc_imagenChanging(value As String)
    End Sub
    Partial Private Sub Ontipo_marc_imagenChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Marcadores = New EntitySet(Of Marcadores)(AddressOf Me.attach_Marcadores, AddressOf Me.detach_Marcadores)
		Me._Marcadores_Genericos = New EntitySet(Of Marcadores_Generico)(AddressOf Me.attach_Marcadores_Genericos, AddressOf Me.detach_Marcadores_Genericos)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_tipo_marc_id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property tipo_marc_id() As Integer
		Get
			Return Me._tipo_marc_id
		End Get
		Set
			If ((Me._tipo_marc_id = value)  _
						= false) Then
				Me.Ontipo_marc_idChanging(value)
				Me.SendPropertyChanging
				Me._tipo_marc_id = value
				Me.SendPropertyChanged("tipo_marc_id")
				Me.Ontipo_marc_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_tipo_marc_nombre", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property tipo_marc_nombre() As String
		Get
			Return Me._tipo_marc_nombre
		End Get
		Set
			If (String.Equals(Me._tipo_marc_nombre, value) = false) Then
				Me.Ontipo_marc_nombreChanging(value)
				Me.SendPropertyChanging
				Me._tipo_marc_nombre = value
				Me.SendPropertyChanged("tipo_marc_nombre")
				Me.Ontipo_marc_nombreChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_tipo_marc_imagen", DbType:="VarChar(50)")>  _
	Public Property tipo_marc_imagen() As String
		Get
			Return Me._tipo_marc_imagen
		End Get
		Set
			If (String.Equals(Me._tipo_marc_imagen, value) = false) Then
				Me.Ontipo_marc_imagenChanging(value)
				Me.SendPropertyChanging
				Me._tipo_marc_imagen = value
				Me.SendPropertyChanged("tipo_marc_imagen")
				Me.Ontipo_marc_imagenChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Tipos_Marcadores_Marcadores", Storage:="_Marcadores", ThisKey:="tipo_marc_id", OtherKey:="tipo_marc_id")>  _
	Public Property Marcadores() As EntitySet(Of Marcadores)
		Get
			Return Me._Marcadores
		End Get
		Set
			Me._Marcadores.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Tipos_Marcadores_Marcadores_Generico", Storage:="_Marcadores_Genericos", ThisKey:="tipo_marc_id", OtherKey:="tipo_marc_id")>  _
	Public Property Marcadores_Genericos() As EntitySet(Of Marcadores_Generico)
		Get
			Return Me._Marcadores_Genericos
		End Get
		Set
			Me._Marcadores_Genericos.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Marcadores(ByVal entity As Marcadores)
		Me.SendPropertyChanging
		entity.Tipos_Marcadores = Me
	End Sub
	
	Private Sub detach_Marcadores(ByVal entity As Marcadores)
		Me.SendPropertyChanging
		entity.Tipos_Marcadores = Nothing
	End Sub
	
	Private Sub attach_Marcadores_Genericos(ByVal entity As Marcadores_Generico)
		Me.SendPropertyChanging
		entity.Tipos_Marcadores = Me
	End Sub
	
	Private Sub detach_Marcadores_Genericos(ByVal entity As Marcadores_Generico)
		Me.SendPropertyChanging
		entity.Tipos_Marcadores = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Administradores")>  _
Partial Public Class Administradores
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _adm_id As Integer
	
	Private _adm_nombre As String
	
	Private _adm_mail As String
	
	Private _adm_pass As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub Onadm_idChanging(value As Integer)
    End Sub
    Partial Private Sub Onadm_idChanged()
    End Sub
    Partial Private Sub Onadm_nombreChanging(value As String)
    End Sub
    Partial Private Sub Onadm_nombreChanged()
    End Sub
    Partial Private Sub Onadm_mailChanging(value As String)
    End Sub
    Partial Private Sub Onadm_mailChanged()
    End Sub
    Partial Private Sub Onadm_passChanging(value As String)
    End Sub
    Partial Private Sub Onadm_passChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_adm_id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property adm_id() As Integer
		Get
			Return Me._adm_id
		End Get
		Set
			If ((Me._adm_id = value)  _
						= false) Then
				Me.Onadm_idChanging(value)
				Me.SendPropertyChanging
				Me._adm_id = value
				Me.SendPropertyChanged("adm_id")
				Me.Onadm_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_adm_nombre", DbType:="VarChar(100) NOT NULL", CanBeNull:=false)>  _
	Public Property adm_nombre() As String
		Get
			Return Me._adm_nombre
		End Get
		Set
			If (String.Equals(Me._adm_nombre, value) = false) Then
				Me.Onadm_nombreChanging(value)
				Me.SendPropertyChanging
				Me._adm_nombre = value
				Me.SendPropertyChanged("adm_nombre")
				Me.Onadm_nombreChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_adm_mail", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property adm_mail() As String
		Get
			Return Me._adm_mail
		End Get
		Set
			If (String.Equals(Me._adm_mail, value) = false) Then
				Me.Onadm_mailChanging(value)
				Me.SendPropertyChanging
				Me._adm_mail = value
				Me.SendPropertyChanged("adm_mail")
				Me.Onadm_mailChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_adm_pass", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property adm_pass() As String
		Get
			Return Me._adm_pass
		End Get
		Set
			If (String.Equals(Me._adm_pass, value) = false) Then
				Me.Onadm_passChanging(value)
				Me.SendPropertyChanging
				Me._adm_pass = value
				Me.SendPropertyChanged("adm_pass")
				Me.Onadm_passChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Marcadores")>  _
Partial Public Class Marcadores
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _marc_id As Integer
	
	Private _cli_id As Integer
	
	Private _marc_latitud As String
	
	Private _marc_longitud As String
	
	Private _tipo_marc_id As Integer
	
	Private _marc_nombre As String
	
	Private _marc_direccion As String
	
	Private _Tipos_Marcadores As EntityRef(Of Tipos_Marcadores)
	
	Private _Cliente As EntityRef(Of Cliente)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub Onmarc_idChanging(value As Integer)
    End Sub
    Partial Private Sub Onmarc_idChanged()
    End Sub
    Partial Private Sub Oncli_idChanging(value As Integer)
    End Sub
    Partial Private Sub Oncli_idChanged()
    End Sub
    Partial Private Sub Onmarc_latitudChanging(value As String)
    End Sub
    Partial Private Sub Onmarc_latitudChanged()
    End Sub
    Partial Private Sub Onmarc_longitudChanging(value As String)
    End Sub
    Partial Private Sub Onmarc_longitudChanged()
    End Sub
    Partial Private Sub Ontipo_marc_idChanging(value As Integer)
    End Sub
    Partial Private Sub Ontipo_marc_idChanged()
    End Sub
    Partial Private Sub Onmarc_nombreChanging(value As String)
    End Sub
    Partial Private Sub Onmarc_nombreChanged()
    End Sub
    Partial Private Sub Onmarc_direccionChanging(value As String)
    End Sub
    Partial Private Sub Onmarc_direccionChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Tipos_Marcadores = CType(Nothing, EntityRef(Of Tipos_Marcadores))
		Me._Cliente = CType(Nothing, EntityRef(Of Cliente))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_marc_id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property marc_id() As Integer
		Get
			Return Me._marc_id
		End Get
		Set
			If ((Me._marc_id = value)  _
						= false) Then
				Me.Onmarc_idChanging(value)
				Me.SendPropertyChanging
				Me._marc_id = value
				Me.SendPropertyChanged("marc_id")
				Me.Onmarc_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_cli_id", DbType:="Int NOT NULL")>  _
	Public Property cli_id() As Integer
		Get
			Return Me._cli_id
		End Get
		Set
			If ((Me._cli_id = value)  _
						= false) Then
				If Me._Cliente.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.Oncli_idChanging(value)
				Me.SendPropertyChanging
				Me._cli_id = value
				Me.SendPropertyChanged("cli_id")
				Me.Oncli_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_marc_latitud", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property marc_latitud() As String
		Get
			Return Me._marc_latitud
		End Get
		Set
			If (String.Equals(Me._marc_latitud, value) = false) Then
				Me.Onmarc_latitudChanging(value)
				Me.SendPropertyChanging
				Me._marc_latitud = value
				Me.SendPropertyChanged("marc_latitud")
				Me.Onmarc_latitudChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_marc_longitud", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property marc_longitud() As String
		Get
			Return Me._marc_longitud
		End Get
		Set
			If (String.Equals(Me._marc_longitud, value) = false) Then
				Me.Onmarc_longitudChanging(value)
				Me.SendPropertyChanging
				Me._marc_longitud = value
				Me.SendPropertyChanged("marc_longitud")
				Me.Onmarc_longitudChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_tipo_marc_id", DbType:="Int NOT NULL")>  _
	Public Property tipo_marc_id() As Integer
		Get
			Return Me._tipo_marc_id
		End Get
		Set
			If ((Me._tipo_marc_id = value)  _
						= false) Then
				If Me._Tipos_Marcadores.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.Ontipo_marc_idChanging(value)
				Me.SendPropertyChanging
				Me._tipo_marc_id = value
				Me.SendPropertyChanged("tipo_marc_id")
				Me.Ontipo_marc_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_marc_nombre", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property marc_nombre() As String
		Get
			Return Me._marc_nombre
		End Get
		Set
			If (String.Equals(Me._marc_nombre, value) = false) Then
				Me.Onmarc_nombreChanging(value)
				Me.SendPropertyChanging
				Me._marc_nombre = value
				Me.SendPropertyChanged("marc_nombre")
				Me.Onmarc_nombreChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_marc_direccion", DbType:="VarChar(150)")>  _
	Public Property marc_direccion() As String
		Get
			Return Me._marc_direccion
		End Get
		Set
			If (String.Equals(Me._marc_direccion, value) = false) Then
				Me.Onmarc_direccionChanging(value)
				Me.SendPropertyChanging
				Me._marc_direccion = value
				Me.SendPropertyChanged("marc_direccion")
				Me.Onmarc_direccionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Tipos_Marcadores_Marcadores", Storage:="_Tipos_Marcadores", ThisKey:="tipo_marc_id", OtherKey:="tipo_marc_id", IsForeignKey:=true)>  _
	Public Property Tipos_Marcadores() As Tipos_Marcadores
		Get
			Return Me._Tipos_Marcadores.Entity
		End Get
		Set
			Dim previousValue As Tipos_Marcadores = Me._Tipos_Marcadores.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Tipos_Marcadores.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Tipos_Marcadores.Entity = Nothing
					previousValue.Marcadores.Remove(Me)
				End If
				Me._Tipos_Marcadores.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Marcadores.Add(Me)
					Me._tipo_marc_id = value.tipo_marc_id
				Else
					Me._tipo_marc_id = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Tipos_Marcadores")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Cliente_Marcadores", Storage:="_Cliente", ThisKey:="cli_id", OtherKey:="cli_id", IsForeignKey:=true)>  _
	Public Property Cliente() As Cliente
		Get
			Return Me._Cliente.Entity
		End Get
		Set
			Dim previousValue As Cliente = Me._Cliente.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Cliente.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Cliente.Entity = Nothing
					previousValue.Marcadores.Remove(Me)
				End If
				Me._Cliente.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Marcadores.Add(Me)
					Me._cli_id = value.cli_id
				Else
					Me._cli_id = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Cliente")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Clientes_Particulares")>  _
Partial Public Class Clientes_Particulares
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _part_id As Integer
	
	Private _cli_id As Integer
	
	Private _part_nombre As String
	
	Private _part_apellido As String
	
	Private _part_domicilio As String
	
	Private _part_telefono_1 As String
	
	Private _part_telefono_2 As String
	
	Private _part_telefono_3 As String
	
	Private _Cliente As EntityRef(Of Cliente)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub Onpart_idChanging(value As Integer)
    End Sub
    Partial Private Sub Onpart_idChanged()
    End Sub
    Partial Private Sub Oncli_idChanging(value As Integer)
    End Sub
    Partial Private Sub Oncli_idChanged()
    End Sub
    Partial Private Sub Onpart_nombreChanging(value As String)
    End Sub
    Partial Private Sub Onpart_nombreChanged()
    End Sub
    Partial Private Sub Onpart_apellidoChanging(value As String)
    End Sub
    Partial Private Sub Onpart_apellidoChanged()
    End Sub
    Partial Private Sub Onpart_domicilioChanging(value As String)
    End Sub
    Partial Private Sub Onpart_domicilioChanged()
    End Sub
    Partial Private Sub Onpart_telefono_1Changing(value As String)
    End Sub
    Partial Private Sub Onpart_telefono_1Changed()
    End Sub
    Partial Private Sub Onpart_telefono_2Changing(value As String)
    End Sub
    Partial Private Sub Onpart_telefono_2Changed()
    End Sub
    Partial Private Sub Onpart_telefono_3Changing(value As String)
    End Sub
    Partial Private Sub Onpart_telefono_3Changed()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Cliente = CType(Nothing, EntityRef(Of Cliente))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_part_id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property part_id() As Integer
		Get
			Return Me._part_id
		End Get
		Set
			If ((Me._part_id = value)  _
						= false) Then
				Me.Onpart_idChanging(value)
				Me.SendPropertyChanging
				Me._part_id = value
				Me.SendPropertyChanged("part_id")
				Me.Onpart_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_cli_id", DbType:="Int NOT NULL")>  _
	Public Property cli_id() As Integer
		Get
			Return Me._cli_id
		End Get
		Set
			If ((Me._cli_id = value)  _
						= false) Then
				If Me._Cliente.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.Oncli_idChanging(value)
				Me.SendPropertyChanging
				Me._cli_id = value
				Me.SendPropertyChanged("cli_id")
				Me.Oncli_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_part_nombre", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property part_nombre() As String
		Get
			Return Me._part_nombre
		End Get
		Set
			If (String.Equals(Me._part_nombre, value) = false) Then
				Me.Onpart_nombreChanging(value)
				Me.SendPropertyChanging
				Me._part_nombre = value
				Me.SendPropertyChanged("part_nombre")
				Me.Onpart_nombreChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_part_apellido", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property part_apellido() As String
		Get
			Return Me._part_apellido
		End Get
		Set
			If (String.Equals(Me._part_apellido, value) = false) Then
				Me.Onpart_apellidoChanging(value)
				Me.SendPropertyChanging
				Me._part_apellido = value
				Me.SendPropertyChanged("part_apellido")
				Me.Onpart_apellidoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_part_domicilio", DbType:="VarChar(150) NOT NULL", CanBeNull:=false)>  _
	Public Property part_domicilio() As String
		Get
			Return Me._part_domicilio
		End Get
		Set
			If (String.Equals(Me._part_domicilio, value) = false) Then
				Me.Onpart_domicilioChanging(value)
				Me.SendPropertyChanging
				Me._part_domicilio = value
				Me.SendPropertyChanged("part_domicilio")
				Me.Onpart_domicilioChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_part_telefono_1", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property part_telefono_1() As String
		Get
			Return Me._part_telefono_1
		End Get
		Set
			If (String.Equals(Me._part_telefono_1, value) = false) Then
				Me.Onpart_telefono_1Changing(value)
				Me.SendPropertyChanging
				Me._part_telefono_1 = value
				Me.SendPropertyChanged("part_telefono_1")
				Me.Onpart_telefono_1Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_part_telefono_2", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property part_telefono_2() As String
		Get
			Return Me._part_telefono_2
		End Get
		Set
			If (String.Equals(Me._part_telefono_2, value) = false) Then
				Me.Onpart_telefono_2Changing(value)
				Me.SendPropertyChanging
				Me._part_telefono_2 = value
				Me.SendPropertyChanged("part_telefono_2")
				Me.Onpart_telefono_2Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_part_telefono_3", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property part_telefono_3() As String
		Get
			Return Me._part_telefono_3
		End Get
		Set
			If (String.Equals(Me._part_telefono_3, value) = false) Then
				Me.Onpart_telefono_3Changing(value)
				Me.SendPropertyChanging
				Me._part_telefono_3 = value
				Me.SendPropertyChanged("part_telefono_3")
				Me.Onpart_telefono_3Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Cliente_Clientes_Particulares", Storage:="_Cliente", ThisKey:="cli_id", OtherKey:="cli_id", IsForeignKey:=true)>  _
	Public Property Cliente() As Cliente
		Get
			Return Me._Cliente.Entity
		End Get
		Set
			Dim previousValue As Cliente = Me._Cliente.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Cliente.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Cliente.Entity = Nothing
					previousValue.Clientes_Particulares.Remove(Me)
				End If
				Me._Cliente.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Clientes_Particulares.Add(Me)
					Me._cli_id = value.cli_id
				Else
					Me._cli_id = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Cliente")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Tipos_Clientes")>  _
Partial Public Class Tipos_Clientes
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _tipo_cli_id As Integer
	
	Private _tipo_cli_nombre As String
	
	Private _Clientes As EntitySet(Of Cliente)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub Ontipo_cli_idChanging(value As Integer)
    End Sub
    Partial Private Sub Ontipo_cli_idChanged()
    End Sub
    Partial Private Sub Ontipo_cli_nombreChanging(value As String)
    End Sub
    Partial Private Sub Ontipo_cli_nombreChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Clientes = New EntitySet(Of Cliente)(AddressOf Me.attach_Clientes, AddressOf Me.detach_Clientes)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_tipo_cli_id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property tipo_cli_id() As Integer
		Get
			Return Me._tipo_cli_id
		End Get
		Set
			If ((Me._tipo_cli_id = value)  _
						= false) Then
				Me.Ontipo_cli_idChanging(value)
				Me.SendPropertyChanging
				Me._tipo_cli_id = value
				Me.SendPropertyChanged("tipo_cli_id")
				Me.Ontipo_cli_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_tipo_cli_nombre", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property tipo_cli_nombre() As String
		Get
			Return Me._tipo_cli_nombre
		End Get
		Set
			If (String.Equals(Me._tipo_cli_nombre, value) = false) Then
				Me.Ontipo_cli_nombreChanging(value)
				Me.SendPropertyChanging
				Me._tipo_cli_nombre = value
				Me.SendPropertyChanged("tipo_cli_nombre")
				Me.Ontipo_cli_nombreChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Tipos_Clientes_Cliente", Storage:="_Clientes", ThisKey:="tipo_cli_id", OtherKey:="tipo_cli_id")>  _
	Public Property Clientes() As EntitySet(Of Cliente)
		Get
			Return Me._Clientes
		End Get
		Set
			Me._Clientes.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Clientes(ByVal entity As Cliente)
		Me.SendPropertyChanging
		entity.Tipos_Clientes = Me
	End Sub
	
	Private Sub detach_Clientes(ByVal entity As Cliente)
		Me.SendPropertyChanging
		entity.Tipos_Clientes = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Marcadores_GenericosXClientes")>  _
Partial Public Class Marcadores_GenericosXClientes
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _marc_id As Integer
	
	Private _cli_id As Integer
	
	Private _Marcadores_Generico As EntityRef(Of Marcadores_Generico)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub Onmarc_idChanging(value As Integer)
    End Sub
    Partial Private Sub Onmarc_idChanged()
    End Sub
    Partial Private Sub Oncli_idChanging(value As Integer)
    End Sub
    Partial Private Sub Oncli_idChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Marcadores_Generico = CType(Nothing, EntityRef(Of Marcadores_Generico))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_marc_id", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property marc_id() As Integer
		Get
			Return Me._marc_id
		End Get
		Set
			If ((Me._marc_id = value)  _
						= false) Then
				If Me._Marcadores_Generico.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.Onmarc_idChanging(value)
				Me.SendPropertyChanging
				Me._marc_id = value
				Me.SendPropertyChanged("marc_id")
				Me.Onmarc_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_cli_id", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property cli_id() As Integer
		Get
			Return Me._cli_id
		End Get
		Set
			If ((Me._cli_id = value)  _
						= false) Then
				Me.Oncli_idChanging(value)
				Me.SendPropertyChanging
				Me._cli_id = value
				Me.SendPropertyChanged("cli_id")
				Me.Oncli_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Marcadores_Generico_Marcadores_GenericosXClientes", Storage:="_Marcadores_Generico", ThisKey:="marc_id", OtherKey:="marc_id", IsForeignKey:=true)>  _
	Public Property Marcadores_Generico() As Marcadores_Generico
		Get
			Return Me._Marcadores_Generico.Entity
		End Get
		Set
			Dim previousValue As Marcadores_Generico = Me._Marcadores_Generico.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Marcadores_Generico.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Marcadores_Generico.Entity = Nothing
					previousValue.Marcadores_GenericosXClientes.Remove(Me)
				End If
				Me._Marcadores_Generico.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Marcadores_GenericosXClientes.Add(Me)
					Me._marc_id = value.marc_id
				Else
					Me._marc_id = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Marcadores_Generico")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Clientes_Empresas")>  _
Partial Public Class Clientes_Empresas
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _empr_id As Integer
	
	Private _empr_razon_social As String
	
	Private _empr_CUIT As String
	
	Private _empr_Domicilio As String
	
	Private _empr_CP As String
	
	Private _empr_telefono_1 As String
	
	Private _empr_telefono_2 As String
	
	Private _cli_id As Integer
	
	Private _Cliente As EntityRef(Of Cliente)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub Onempr_idChanging(value As Integer)
    End Sub
    Partial Private Sub Onempr_idChanged()
    End Sub
    Partial Private Sub Onempr_razon_socialChanging(value As String)
    End Sub
    Partial Private Sub Onempr_razon_socialChanged()
    End Sub
    Partial Private Sub Onempr_CUITChanging(value As String)
    End Sub
    Partial Private Sub Onempr_CUITChanged()
    End Sub
    Partial Private Sub Onempr_DomicilioChanging(value As String)
    End Sub
    Partial Private Sub Onempr_DomicilioChanged()
    End Sub
    Partial Private Sub Onempr_CPChanging(value As String)
    End Sub
    Partial Private Sub Onempr_CPChanged()
    End Sub
    Partial Private Sub Onempr_telefono_1Changing(value As String)
    End Sub
    Partial Private Sub Onempr_telefono_1Changed()
    End Sub
    Partial Private Sub Onempr_telefono_2Changing(value As String)
    End Sub
    Partial Private Sub Onempr_telefono_2Changed()
    End Sub
    Partial Private Sub Oncli_idChanging(value As Integer)
    End Sub
    Partial Private Sub Oncli_idChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Cliente = CType(Nothing, EntityRef(Of Cliente))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_empr_id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property empr_id() As Integer
		Get
			Return Me._empr_id
		End Get
		Set
			If ((Me._empr_id = value)  _
						= false) Then
				Me.Onempr_idChanging(value)
				Me.SendPropertyChanging
				Me._empr_id = value
				Me.SendPropertyChanged("empr_id")
				Me.Onempr_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_empr_razon_social", DbType:="VarChar(100) NOT NULL", CanBeNull:=false)>  _
	Public Property empr_razon_social() As String
		Get
			Return Me._empr_razon_social
		End Get
		Set
			If (String.Equals(Me._empr_razon_social, value) = false) Then
				Me.Onempr_razon_socialChanging(value)
				Me.SendPropertyChanging
				Me._empr_razon_social = value
				Me.SendPropertyChanged("empr_razon_social")
				Me.Onempr_razon_socialChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_empr_CUIT", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property empr_CUIT() As String
		Get
			Return Me._empr_CUIT
		End Get
		Set
			If (String.Equals(Me._empr_CUIT, value) = false) Then
				Me.Onempr_CUITChanging(value)
				Me.SendPropertyChanging
				Me._empr_CUIT = value
				Me.SendPropertyChanged("empr_CUIT")
				Me.Onempr_CUITChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_empr_Domicilio", DbType:="VarChar(150) NOT NULL", CanBeNull:=false)>  _
	Public Property empr_Domicilio() As String
		Get
			Return Me._empr_Domicilio
		End Get
		Set
			If (String.Equals(Me._empr_Domicilio, value) = false) Then
				Me.Onempr_DomicilioChanging(value)
				Me.SendPropertyChanging
				Me._empr_Domicilio = value
				Me.SendPropertyChanged("empr_Domicilio")
				Me.Onempr_DomicilioChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_empr_CP", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property empr_CP() As String
		Get
			Return Me._empr_CP
		End Get
		Set
			If (String.Equals(Me._empr_CP, value) = false) Then
				Me.Onempr_CPChanging(value)
				Me.SendPropertyChanging
				Me._empr_CP = value
				Me.SendPropertyChanged("empr_CP")
				Me.Onempr_CPChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_empr_telefono_1", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property empr_telefono_1() As String
		Get
			Return Me._empr_telefono_1
		End Get
		Set
			If (String.Equals(Me._empr_telefono_1, value) = false) Then
				Me.Onempr_telefono_1Changing(value)
				Me.SendPropertyChanging
				Me._empr_telefono_1 = value
				Me.SendPropertyChanged("empr_telefono_1")
				Me.Onempr_telefono_1Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_empr_telefono_2", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property empr_telefono_2() As String
		Get
			Return Me._empr_telefono_2
		End Get
		Set
			If (String.Equals(Me._empr_telefono_2, value) = false) Then
				Me.Onempr_telefono_2Changing(value)
				Me.SendPropertyChanging
				Me._empr_telefono_2 = value
				Me.SendPropertyChanged("empr_telefono_2")
				Me.Onempr_telefono_2Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_cli_id", DbType:="Int NOT NULL")>  _
	Public Property cli_id() As Integer
		Get
			Return Me._cli_id
		End Get
		Set
			If ((Me._cli_id = value)  _
						= false) Then
				If Me._Cliente.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.Oncli_idChanging(value)
				Me.SendPropertyChanging
				Me._cli_id = value
				Me.SendPropertyChanged("cli_id")
				Me.Oncli_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Cliente_Clientes_Empresas", Storage:="_Cliente", ThisKey:="cli_id", OtherKey:="cli_id", IsForeignKey:=true)>  _
	Public Property Cliente() As Cliente
		Get
			Return Me._Cliente.Entity
		End Get
		Set
			Dim previousValue As Cliente = Me._Cliente.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Cliente.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Cliente.Entity = Nothing
					previousValue.Clientes_Empresas.Remove(Me)
				End If
				Me._Cliente.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Clientes_Empresas.Add(Me)
					Me._cli_id = value.cli_id
				Else
					Me._cli_id = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Cliente")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Tipos_Vias")>  _
Partial Public Class Tipos_Vias
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _tipo_via_id As Integer
	
	Private _tipo_via_nombre As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub Ontipo_via_idChanging(value As Integer)
    End Sub
    Partial Private Sub Ontipo_via_idChanged()
    End Sub
    Partial Private Sub Ontipo_via_nombreChanging(value As String)
    End Sub
    Partial Private Sub Ontipo_via_nombreChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_tipo_via_id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property tipo_via_id() As Integer
		Get
			Return Me._tipo_via_id
		End Get
		Set
			If ((Me._tipo_via_id = value)  _
						= false) Then
				Me.Ontipo_via_idChanging(value)
				Me.SendPropertyChanging
				Me._tipo_via_id = value
				Me.SendPropertyChanged("tipo_via_id")
				Me.Ontipo_via_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_tipo_via_nombre", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property tipo_via_nombre() As String
		Get
			Return Me._tipo_via_nombre
		End Get
		Set
			If (String.Equals(Me._tipo_via_nombre, value) = false) Then
				Me.Ontipo_via_nombreChanging(value)
				Me.SendPropertyChanging
				Me._tipo_via_nombre = value
				Me.SendPropertyChanged("tipo_via_nombre")
				Me.Ontipo_via_nombreChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Contactos_Clientes")>  _
Partial Public Class Contactos_Clientes
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _cont_id As Integer
	
	Private _cli_id As Integer
	
	Private _cont_nombre As String
	
	Private _cont_apellido As String
	
	Private _cont_telefono_1 As String
	
	Private _cont_telefono_2 As String
	
	Private _Cliente As EntityRef(Of Cliente)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub Oncont_idChanging(value As Integer)
    End Sub
    Partial Private Sub Oncont_idChanged()
    End Sub
    Partial Private Sub Oncli_idChanging(value As Integer)
    End Sub
    Partial Private Sub Oncli_idChanged()
    End Sub
    Partial Private Sub Oncont_nombreChanging(value As String)
    End Sub
    Partial Private Sub Oncont_nombreChanged()
    End Sub
    Partial Private Sub Oncont_apellidoChanging(value As String)
    End Sub
    Partial Private Sub Oncont_apellidoChanged()
    End Sub
    Partial Private Sub Oncont_telefono_1Changing(value As String)
    End Sub
    Partial Private Sub Oncont_telefono_1Changed()
    End Sub
    Partial Private Sub Oncont_telefono_2Changing(value As String)
    End Sub
    Partial Private Sub Oncont_telefono_2Changed()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Cliente = CType(Nothing, EntityRef(Of Cliente))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_cont_id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property cont_id() As Integer
		Get
			Return Me._cont_id
		End Get
		Set
			If ((Me._cont_id = value)  _
						= false) Then
				Me.Oncont_idChanging(value)
				Me.SendPropertyChanging
				Me._cont_id = value
				Me.SendPropertyChanged("cont_id")
				Me.Oncont_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_cli_id", DbType:="Int NOT NULL")>  _
	Public Property cli_id() As Integer
		Get
			Return Me._cli_id
		End Get
		Set
			If ((Me._cli_id = value)  _
						= false) Then
				If Me._Cliente.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.Oncli_idChanging(value)
				Me.SendPropertyChanging
				Me._cli_id = value
				Me.SendPropertyChanged("cli_id")
				Me.Oncli_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_cont_nombre", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property cont_nombre() As String
		Get
			Return Me._cont_nombre
		End Get
		Set
			If (String.Equals(Me._cont_nombre, value) = false) Then
				Me.Oncont_nombreChanging(value)
				Me.SendPropertyChanging
				Me._cont_nombre = value
				Me.SendPropertyChanged("cont_nombre")
				Me.Oncont_nombreChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_cont_apellido", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property cont_apellido() As String
		Get
			Return Me._cont_apellido
		End Get
		Set
			If (String.Equals(Me._cont_apellido, value) = false) Then
				Me.Oncont_apellidoChanging(value)
				Me.SendPropertyChanging
				Me._cont_apellido = value
				Me.SendPropertyChanged("cont_apellido")
				Me.Oncont_apellidoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_cont_telefono_1", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property cont_telefono_1() As String
		Get
			Return Me._cont_telefono_1
		End Get
		Set
			If (String.Equals(Me._cont_telefono_1, value) = false) Then
				Me.Oncont_telefono_1Changing(value)
				Me.SendPropertyChanging
				Me._cont_telefono_1 = value
				Me.SendPropertyChanged("cont_telefono_1")
				Me.Oncont_telefono_1Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_cont_telefono_2", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property cont_telefono_2() As String
		Get
			Return Me._cont_telefono_2
		End Get
		Set
			If (String.Equals(Me._cont_telefono_2, value) = false) Then
				Me.Oncont_telefono_2Changing(value)
				Me.SendPropertyChanging
				Me._cont_telefono_2 = value
				Me.SendPropertyChanged("cont_telefono_2")
				Me.Oncont_telefono_2Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Cliente_Contactos_Clientes", Storage:="_Cliente", ThisKey:="cli_id", OtherKey:="cli_id", IsForeignKey:=true)>  _
	Public Property Cliente() As Cliente
		Get
			Return Me._Cliente.Entity
		End Get
		Set
			Dim previousValue As Cliente = Me._Cliente.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Cliente.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Cliente.Entity = Nothing
					previousValue.Contactos_Clientes.Remove(Me)
				End If
				Me._Cliente.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Contactos_Clientes.Add(Me)
					Me._cli_id = value.cli_id
				Else
					Me._cli_id = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Cliente")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Parametros")>  _
Partial Public Class Parametros
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _par_id As Integer
	
	Private _par_nombre As String
	
	Private _par_valor As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub Onpar_idChanging(value As Integer)
    End Sub
    Partial Private Sub Onpar_idChanged()
    End Sub
    Partial Private Sub Onpar_nombreChanging(value As String)
    End Sub
    Partial Private Sub Onpar_nombreChanged()
    End Sub
    Partial Private Sub Onpar_valorChanging(value As String)
    End Sub
    Partial Private Sub Onpar_valorChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_par_id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property par_id() As Integer
		Get
			Return Me._par_id
		End Get
		Set
			If ((Me._par_id = value)  _
						= false) Then
				Me.Onpar_idChanging(value)
				Me.SendPropertyChanging
				Me._par_id = value
				Me.SendPropertyChanged("par_id")
				Me.Onpar_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_par_nombre", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property par_nombre() As String
		Get
			Return Me._par_nombre
		End Get
		Set
			If (String.Equals(Me._par_nombre, value) = false) Then
				Me.Onpar_nombreChanging(value)
				Me.SendPropertyChanging
				Me._par_nombre = value
				Me.SendPropertyChanged("par_nombre")
				Me.Onpar_nombreChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_par_valor", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property par_valor() As String
		Get
			Return Me._par_valor
		End Get
		Set
			If (String.Equals(Me._par_valor, value) = false) Then
				Me.Onpar_valorChanging(value)
				Me.SendPropertyChanging
				Me._par_valor = value
				Me.SendPropertyChanged("par_valor")
				Me.Onpar_valorChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Zonas_Puntos")>  _
Partial Public Class Zonas_Puntos
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _zon_punto_id As Integer
	
	Private _zon_id As Integer
	
	Private _zon_latitud As String
	
	Private _zon_longitud As String
	
	Private _Zonas As EntityRef(Of Zonas)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub Onzon_punto_idChanging(value As Integer)
    End Sub
    Partial Private Sub Onzon_punto_idChanged()
    End Sub
    Partial Private Sub Onzon_idChanging(value As Integer)
    End Sub
    Partial Private Sub Onzon_idChanged()
    End Sub
    Partial Private Sub Onzon_latitudChanging(value As String)
    End Sub
    Partial Private Sub Onzon_latitudChanged()
    End Sub
    Partial Private Sub Onzon_longitudChanging(value As String)
    End Sub
    Partial Private Sub Onzon_longitudChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Zonas = CType(Nothing, EntityRef(Of Zonas))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_zon_punto_id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property zon_punto_id() As Integer
		Get
			Return Me._zon_punto_id
		End Get
		Set
			If ((Me._zon_punto_id = value)  _
						= false) Then
				Me.Onzon_punto_idChanging(value)
				Me.SendPropertyChanging
				Me._zon_punto_id = value
				Me.SendPropertyChanged("zon_punto_id")
				Me.Onzon_punto_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_zon_id", DbType:="Int NOT NULL")>  _
	Public Property zon_id() As Integer
		Get
			Return Me._zon_id
		End Get
		Set
			If ((Me._zon_id = value)  _
						= false) Then
				If Me._Zonas.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.Onzon_idChanging(value)
				Me.SendPropertyChanging
				Me._zon_id = value
				Me.SendPropertyChanged("zon_id")
				Me.Onzon_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_zon_latitud", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property zon_latitud() As String
		Get
			Return Me._zon_latitud
		End Get
		Set
			If (String.Equals(Me._zon_latitud, value) = false) Then
				Me.Onzon_latitudChanging(value)
				Me.SendPropertyChanging
				Me._zon_latitud = value
				Me.SendPropertyChanged("zon_latitud")
				Me.Onzon_latitudChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_zon_longitud", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property zon_longitud() As String
		Get
			Return Me._zon_longitud
		End Get
		Set
			If (String.Equals(Me._zon_longitud, value) = false) Then
				Me.Onzon_longitudChanging(value)
				Me.SendPropertyChanging
				Me._zon_longitud = value
				Me.SendPropertyChanged("zon_longitud")
				Me.Onzon_longitudChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Zonas_Zonas_Puntos", Storage:="_Zonas", ThisKey:="zon_id", OtherKey:="zon_id", IsForeignKey:=true)>  _
	Public Property Zonas() As Zonas
		Get
			Return Me._Zonas.Entity
		End Get
		Set
			Dim previousValue As Zonas = Me._Zonas.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Zonas.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Zonas.Entity = Nothing
					previousValue.Zonas_Puntos.Remove(Me)
				End If
				Me._Zonas.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Zonas_Puntos.Add(Me)
					Me._zon_id = value.zon_id
				Else
					Me._zon_id = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Zonas")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Zonas")>  _
Partial Public Class Zonas
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _zon_id As Integer
	
	Private _zon_nombre As String
	
	Private _cli_id As Integer
	
	Private _Zonas_Puntos As EntitySet(Of Zonas_Puntos)
	
	Private _Alertas_Zonas As EntitySet(Of Alertas_Zonas)
	
	Private _Cliente As EntityRef(Of Cliente)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub Onzon_idChanging(value As Integer)
    End Sub
    Partial Private Sub Onzon_idChanged()
    End Sub
    Partial Private Sub Onzon_nombreChanging(value As String)
    End Sub
    Partial Private Sub Onzon_nombreChanged()
    End Sub
    Partial Private Sub Oncli_idChanging(value As Integer)
    End Sub
    Partial Private Sub Oncli_idChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Zonas_Puntos = New EntitySet(Of Zonas_Puntos)(AddressOf Me.attach_Zonas_Puntos, AddressOf Me.detach_Zonas_Puntos)
		Me._Alertas_Zonas = New EntitySet(Of Alertas_Zonas)(AddressOf Me.attach_Alertas_Zonas, AddressOf Me.detach_Alertas_Zonas)
		Me._Cliente = CType(Nothing, EntityRef(Of Cliente))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_zon_id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property zon_id() As Integer
		Get
			Return Me._zon_id
		End Get
		Set
			If ((Me._zon_id = value)  _
						= false) Then
				Me.Onzon_idChanging(value)
				Me.SendPropertyChanging
				Me._zon_id = value
				Me.SendPropertyChanged("zon_id")
				Me.Onzon_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_zon_nombre", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property zon_nombre() As String
		Get
			Return Me._zon_nombre
		End Get
		Set
			If (String.Equals(Me._zon_nombre, value) = false) Then
				Me.Onzon_nombreChanging(value)
				Me.SendPropertyChanging
				Me._zon_nombre = value
				Me.SendPropertyChanged("zon_nombre")
				Me.Onzon_nombreChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_cli_id", DbType:="Int NOT NULL")>  _
	Public Property cli_id() As Integer
		Get
			Return Me._cli_id
		End Get
		Set
			If ((Me._cli_id = value)  _
						= false) Then
				If Me._Cliente.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.Oncli_idChanging(value)
				Me.SendPropertyChanging
				Me._cli_id = value
				Me.SendPropertyChanged("cli_id")
				Me.Oncli_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Zonas_Zonas_Puntos", Storage:="_Zonas_Puntos", ThisKey:="zon_id", OtherKey:="zon_id")>  _
	Public Property Zonas_Puntos() As EntitySet(Of Zonas_Puntos)
		Get
			Return Me._Zonas_Puntos
		End Get
		Set
			Me._Zonas_Puntos.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Zonas_Alertas_Zonas", Storage:="_Alertas_Zonas", ThisKey:="zon_id", OtherKey:="zon_id")>  _
	Public Property Alertas_Zonas() As EntitySet(Of Alertas_Zonas)
		Get
			Return Me._Alertas_Zonas
		End Get
		Set
			Me._Alertas_Zonas.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Cliente_Zonas", Storage:="_Cliente", ThisKey:="cli_id", OtherKey:="cli_id", IsForeignKey:=true)>  _
	Public Property Cliente() As Cliente
		Get
			Return Me._Cliente.Entity
		End Get
		Set
			Dim previousValue As Cliente = Me._Cliente.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Cliente.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Cliente.Entity = Nothing
					previousValue.Zonas.Remove(Me)
				End If
				Me._Cliente.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Zonas.Add(Me)
					Me._cli_id = value.cli_id
				Else
					Me._cli_id = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Cliente")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Zonas_Puntos(ByVal entity As Zonas_Puntos)
		Me.SendPropertyChanging
		entity.Zonas = Me
	End Sub
	
	Private Sub detach_Zonas_Puntos(ByVal entity As Zonas_Puntos)
		Me.SendPropertyChanging
		entity.Zonas = Nothing
	End Sub
	
	Private Sub attach_Alertas_Zonas(ByVal entity As Alertas_Zonas)
		Me.SendPropertyChanging
		entity.Zonas = Me
	End Sub
	
	Private Sub detach_Alertas_Zonas(ByVal entity As Alertas_Zonas)
		Me.SendPropertyChanging
		entity.Zonas = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Alertas_Zonas")>  _
Partial Public Class Alertas_Zonas
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _azon_id As Integer
	
	Private _azon_enviar_sms As Boolean
	
	Private _azon_enviar_mail As Boolean
	
	Private _azon_tipo As Integer
	
	Private _azon_fecha_desde As System.Nullable(Of Date)
	
	Private _azon_fecha_hasta As System.Nullable(Of Date)
	
	Private _azon_umbral_desvio As String
	
	Private _zon_id As Integer
	
	Private _veh_id As Integer
	
	Private _azon_activa As System.Nullable(Of Boolean)
	
	Private _Alertas_Zonas_Frecuencias As EntitySet(Of Alertas_Zonas_Frecuencias)
	
	Private _Zonas As EntityRef(Of Zonas)
	
	Private _Vehiculo As EntityRef(Of Vehiculo)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub Onazon_idChanging(value As Integer)
    End Sub
    Partial Private Sub Onazon_idChanged()
    End Sub
    Partial Private Sub Onazon_enviar_smsChanging(value As Boolean)
    End Sub
    Partial Private Sub Onazon_enviar_smsChanged()
    End Sub
    Partial Private Sub Onazon_enviar_mailChanging(value As Boolean)
    End Sub
    Partial Private Sub Onazon_enviar_mailChanged()
    End Sub
    Partial Private Sub Onazon_tipoChanging(value As Integer)
    End Sub
    Partial Private Sub Onazon_tipoChanged()
    End Sub
    Partial Private Sub Onazon_fecha_desdeChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub Onazon_fecha_desdeChanged()
    End Sub
    Partial Private Sub Onazon_fecha_hastaChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub Onazon_fecha_hastaChanged()
    End Sub
    Partial Private Sub Onazon_umbral_desvioChanging(value As String)
    End Sub
    Partial Private Sub Onazon_umbral_desvioChanged()
    End Sub
    Partial Private Sub Onzon_idChanging(value As Integer)
    End Sub
    Partial Private Sub Onzon_idChanged()
    End Sub
    Partial Private Sub Onveh_idChanging(value As Integer)
    End Sub
    Partial Private Sub Onveh_idChanged()
    End Sub
    Partial Private Sub Onazon_activaChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub Onazon_activaChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Alertas_Zonas_Frecuencias = New EntitySet(Of Alertas_Zonas_Frecuencias)(AddressOf Me.attach_Alertas_Zonas_Frecuencias, AddressOf Me.detach_Alertas_Zonas_Frecuencias)
		Me._Zonas = CType(Nothing, EntityRef(Of Zonas))
		Me._Vehiculo = CType(Nothing, EntityRef(Of Vehiculo))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_azon_id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property azon_id() As Integer
		Get
			Return Me._azon_id
		End Get
		Set
			If ((Me._azon_id = value)  _
						= false) Then
				Me.Onazon_idChanging(value)
				Me.SendPropertyChanging
				Me._azon_id = value
				Me.SendPropertyChanged("azon_id")
				Me.Onazon_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_azon_enviar_sms", DbType:="Bit NOT NULL")>  _
	Public Property azon_enviar_sms() As Boolean
		Get
			Return Me._azon_enviar_sms
		End Get
		Set
			If ((Me._azon_enviar_sms = value)  _
						= false) Then
				Me.Onazon_enviar_smsChanging(value)
				Me.SendPropertyChanging
				Me._azon_enviar_sms = value
				Me.SendPropertyChanged("azon_enviar_sms")
				Me.Onazon_enviar_smsChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_azon_enviar_mail", DbType:="Bit NOT NULL")>  _
	Public Property azon_enviar_mail() As Boolean
		Get
			Return Me._azon_enviar_mail
		End Get
		Set
			If ((Me._azon_enviar_mail = value)  _
						= false) Then
				Me.Onazon_enviar_mailChanging(value)
				Me.SendPropertyChanging
				Me._azon_enviar_mail = value
				Me.SendPropertyChanged("azon_enviar_mail")
				Me.Onazon_enviar_mailChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_azon_tipo", DbType:="Int NOT NULL")>  _
	Public Property azon_tipo() As Integer
		Get
			Return Me._azon_tipo
		End Get
		Set
			If ((Me._azon_tipo = value)  _
						= false) Then
				Me.Onazon_tipoChanging(value)
				Me.SendPropertyChanging
				Me._azon_tipo = value
				Me.SendPropertyChanged("azon_tipo")
				Me.Onazon_tipoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_azon_fecha_desde", DbType:="DateTime")>  _
	Public Property azon_fecha_desde() As System.Nullable(Of Date)
		Get
			Return Me._azon_fecha_desde
		End Get
		Set
			If (Me._azon_fecha_desde.Equals(value) = false) Then
				Me.Onazon_fecha_desdeChanging(value)
				Me.SendPropertyChanging
				Me._azon_fecha_desde = value
				Me.SendPropertyChanged("azon_fecha_desde")
				Me.Onazon_fecha_desdeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_azon_fecha_hasta", DbType:="DateTime")>  _
	Public Property azon_fecha_hasta() As System.Nullable(Of Date)
		Get
			Return Me._azon_fecha_hasta
		End Get
		Set
			If (Me._azon_fecha_hasta.Equals(value) = false) Then
				Me.Onazon_fecha_hastaChanging(value)
				Me.SendPropertyChanging
				Me._azon_fecha_hasta = value
				Me.SendPropertyChanged("azon_fecha_hasta")
				Me.Onazon_fecha_hastaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_azon_umbral_desvio", DbType:="VarChar(50)")>  _
	Public Property azon_umbral_desvio() As String
		Get
			Return Me._azon_umbral_desvio
		End Get
		Set
			If (String.Equals(Me._azon_umbral_desvio, value) = false) Then
				Me.Onazon_umbral_desvioChanging(value)
				Me.SendPropertyChanging
				Me._azon_umbral_desvio = value
				Me.SendPropertyChanged("azon_umbral_desvio")
				Me.Onazon_umbral_desvioChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_zon_id", DbType:="Int NOT NULL")>  _
	Public Property zon_id() As Integer
		Get
			Return Me._zon_id
		End Get
		Set
			If ((Me._zon_id = value)  _
						= false) Then
				If Me._Zonas.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.Onzon_idChanging(value)
				Me.SendPropertyChanging
				Me._zon_id = value
				Me.SendPropertyChanged("zon_id")
				Me.Onzon_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_veh_id", DbType:="Int NOT NULL")>  _
	Public Property veh_id() As Integer
		Get
			Return Me._veh_id
		End Get
		Set
			If ((Me._veh_id = value)  _
						= false) Then
				If Me._Vehiculo.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.Onveh_idChanging(value)
				Me.SendPropertyChanging
				Me._veh_id = value
				Me.SendPropertyChanged("veh_id")
				Me.Onveh_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_azon_activa", DbType:="Bit")>  _
	Public Property azon_activa() As System.Nullable(Of Boolean)
		Get
			Return Me._azon_activa
		End Get
		Set
			If (Me._azon_activa.Equals(value) = false) Then
				Me.Onazon_activaChanging(value)
				Me.SendPropertyChanging
				Me._azon_activa = value
				Me.SendPropertyChanged("azon_activa")
				Me.Onazon_activaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Alertas_Zonas_Alertas_Zonas_Frecuencias", Storage:="_Alertas_Zonas_Frecuencias", ThisKey:="azon_id", OtherKey:="zon_id")>  _
	Public Property Alertas_Zonas_Frecuencias() As EntitySet(Of Alertas_Zonas_Frecuencias)
		Get
			Return Me._Alertas_Zonas_Frecuencias
		End Get
		Set
			Me._Alertas_Zonas_Frecuencias.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Zonas_Alertas_Zonas", Storage:="_Zonas", ThisKey:="zon_id", OtherKey:="zon_id", IsForeignKey:=true)>  _
	Public Property Zonas() As Zonas
		Get
			Return Me._Zonas.Entity
		End Get
		Set
			Dim previousValue As Zonas = Me._Zonas.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Zonas.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Zonas.Entity = Nothing
					previousValue.Alertas_Zonas.Remove(Me)
				End If
				Me._Zonas.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Alertas_Zonas.Add(Me)
					Me._zon_id = value.zon_id
				Else
					Me._zon_id = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Zonas")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Vehiculo_Alertas_Zonas", Storage:="_Vehiculo", ThisKey:="veh_id", OtherKey:="veh_id", IsForeignKey:=true)>  _
	Public Property Vehiculo() As Vehiculo
		Get
			Return Me._Vehiculo.Entity
		End Get
		Set
			Dim previousValue As Vehiculo = Me._Vehiculo.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Vehiculo.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Vehiculo.Entity = Nothing
					previousValue.Alertas_Zonas.Remove(Me)
				End If
				Me._Vehiculo.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Alertas_Zonas.Add(Me)
					Me._veh_id = value.veh_id
				Else
					Me._veh_id = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Vehiculo")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Alertas_Zonas_Frecuencias(ByVal entity As Alertas_Zonas_Frecuencias)
		Me.SendPropertyChanging
		entity.Alertas_Zonas = Me
	End Sub
	
	Private Sub detach_Alertas_Zonas_Frecuencias(ByVal entity As Alertas_Zonas_Frecuencias)
		Me.SendPropertyChanging
		entity.Alertas_Zonas = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Alertas_Zonas_Frecuencias")>  _
Partial Public Class Alertas_Zonas_Frecuencias
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _zon_frec_id As Integer
	
	Private _zon_id As Integer
	
	Private _zon_dia_semana As Integer
	
	Private _zon_hora_desde As System.Nullable(Of System.TimeSpan)
	
	Private _zon_hora_hasta As System.Nullable(Of System.TimeSpan)
	
	Private _Alertas_Zonas As EntityRef(Of Alertas_Zonas)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub Onzon_frec_idChanging(value As Integer)
    End Sub
    Partial Private Sub Onzon_frec_idChanged()
    End Sub
    Partial Private Sub Onzon_idChanging(value As Integer)
    End Sub
    Partial Private Sub Onzon_idChanged()
    End Sub
    Partial Private Sub Onzon_dia_semanaChanging(value As Integer)
    End Sub
    Partial Private Sub Onzon_dia_semanaChanged()
    End Sub
    Partial Private Sub Onzon_hora_desdeChanging(value As System.Nullable(Of System.TimeSpan))
    End Sub
    Partial Private Sub Onzon_hora_desdeChanged()
    End Sub
    Partial Private Sub Onzon_hora_hastaChanging(value As System.Nullable(Of System.TimeSpan))
    End Sub
    Partial Private Sub Onzon_hora_hastaChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Alertas_Zonas = CType(Nothing, EntityRef(Of Alertas_Zonas))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_zon_frec_id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property zon_frec_id() As Integer
		Get
			Return Me._zon_frec_id
		End Get
		Set
			If ((Me._zon_frec_id = value)  _
						= false) Then
				Me.Onzon_frec_idChanging(value)
				Me.SendPropertyChanging
				Me._zon_frec_id = value
				Me.SendPropertyChanged("zon_frec_id")
				Me.Onzon_frec_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_zon_id", DbType:="Int NOT NULL")>  _
	Public Property zon_id() As Integer
		Get
			Return Me._zon_id
		End Get
		Set
			If ((Me._zon_id = value)  _
						= false) Then
				If Me._Alertas_Zonas.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.Onzon_idChanging(value)
				Me.SendPropertyChanging
				Me._zon_id = value
				Me.SendPropertyChanged("zon_id")
				Me.Onzon_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_zon_dia_semana", DbType:="Int NOT NULL")>  _
	Public Property zon_dia_semana() As Integer
		Get
			Return Me._zon_dia_semana
		End Get
		Set
			If ((Me._zon_dia_semana = value)  _
						= false) Then
				Me.Onzon_dia_semanaChanging(value)
				Me.SendPropertyChanging
				Me._zon_dia_semana = value
				Me.SendPropertyChanged("zon_dia_semana")
				Me.Onzon_dia_semanaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_zon_hora_desde", DbType:="Time")>  _
	Public Property zon_hora_desde() As System.Nullable(Of System.TimeSpan)
		Get
			Return Me._zon_hora_desde
		End Get
		Set
			If (Me._zon_hora_desde.Equals(value) = false) Then
				Me.Onzon_hora_desdeChanging(value)
				Me.SendPropertyChanging
				Me._zon_hora_desde = value
				Me.SendPropertyChanged("zon_hora_desde")
				Me.Onzon_hora_desdeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_zon_hora_hasta", DbType:="Time")>  _
	Public Property zon_hora_hasta() As System.Nullable(Of System.TimeSpan)
		Get
			Return Me._zon_hora_hasta
		End Get
		Set
			If (Me._zon_hora_hasta.Equals(value) = false) Then
				Me.Onzon_hora_hastaChanging(value)
				Me.SendPropertyChanging
				Me._zon_hora_hasta = value
				Me.SendPropertyChanged("zon_hora_hasta")
				Me.Onzon_hora_hastaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Alertas_Zonas_Alertas_Zonas_Frecuencias", Storage:="_Alertas_Zonas", ThisKey:="zon_id", OtherKey:="azon_id", IsForeignKey:=true)>  _
	Public Property Alertas_Zonas() As Alertas_Zonas
		Get
			Return Me._Alertas_Zonas.Entity
		End Get
		Set
			Dim previousValue As Alertas_Zonas = Me._Alertas_Zonas.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Alertas_Zonas.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Alertas_Zonas.Entity = Nothing
					previousValue.Alertas_Zonas_Frecuencias.Remove(Me)
				End If
				Me._Alertas_Zonas.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Alertas_Zonas_Frecuencias.Add(Me)
					Me._zon_id = value.azon_id
				Else
					Me._zon_id = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Alertas_Zonas")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Alertas_Recorridos_Frecuencias")>  _
Partial Public Class Alertas_Recorridos_Frecuencias
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _rec_frec_id As Integer
	
	Private _rec_id As Integer
	
	Private _rec_dia_semana As Integer
	
	Private _rec_hora_desde As System.Nullable(Of System.TimeSpan)
	
	Private _rec_hora_hasta As System.Nullable(Of System.TimeSpan)
	
	Private _Alertas_Recorridos As EntityRef(Of Alertas_Recorridos)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub Onrec_frec_idChanging(value As Integer)
    End Sub
    Partial Private Sub Onrec_frec_idChanged()
    End Sub
    Partial Private Sub Onrec_idChanging(value As Integer)
    End Sub
    Partial Private Sub Onrec_idChanged()
    End Sub
    Partial Private Sub Onrec_dia_semanaChanging(value As Integer)
    End Sub
    Partial Private Sub Onrec_dia_semanaChanged()
    End Sub
    Partial Private Sub Onrec_hora_desdeChanging(value As System.Nullable(Of System.TimeSpan))
    End Sub
    Partial Private Sub Onrec_hora_desdeChanged()
    End Sub
    Partial Private Sub Onrec_hora_hastaChanging(value As System.Nullable(Of System.TimeSpan))
    End Sub
    Partial Private Sub Onrec_hora_hastaChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Alertas_Recorridos = CType(Nothing, EntityRef(Of Alertas_Recorridos))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_rec_frec_id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property rec_frec_id() As Integer
		Get
			Return Me._rec_frec_id
		End Get
		Set
			If ((Me._rec_frec_id = value)  _
						= false) Then
				Me.Onrec_frec_idChanging(value)
				Me.SendPropertyChanging
				Me._rec_frec_id = value
				Me.SendPropertyChanged("rec_frec_id")
				Me.Onrec_frec_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_rec_id", DbType:="Int NOT NULL")>  _
	Public Property rec_id() As Integer
		Get
			Return Me._rec_id
		End Get
		Set
			If ((Me._rec_id = value)  _
						= false) Then
				If Me._Alertas_Recorridos.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.Onrec_idChanging(value)
				Me.SendPropertyChanging
				Me._rec_id = value
				Me.SendPropertyChanged("rec_id")
				Me.Onrec_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_rec_dia_semana", DbType:="Int NOT NULL")>  _
	Public Property rec_dia_semana() As Integer
		Get
			Return Me._rec_dia_semana
		End Get
		Set
			If ((Me._rec_dia_semana = value)  _
						= false) Then
				Me.Onrec_dia_semanaChanging(value)
				Me.SendPropertyChanging
				Me._rec_dia_semana = value
				Me.SendPropertyChanged("rec_dia_semana")
				Me.Onrec_dia_semanaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_rec_hora_desde", DbType:="Time")>  _
	Public Property rec_hora_desde() As System.Nullable(Of System.TimeSpan)
		Get
			Return Me._rec_hora_desde
		End Get
		Set
			If (Me._rec_hora_desde.Equals(value) = false) Then
				Me.Onrec_hora_desdeChanging(value)
				Me.SendPropertyChanging
				Me._rec_hora_desde = value
				Me.SendPropertyChanged("rec_hora_desde")
				Me.Onrec_hora_desdeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_rec_hora_hasta", DbType:="Time")>  _
	Public Property rec_hora_hasta() As System.Nullable(Of System.TimeSpan)
		Get
			Return Me._rec_hora_hasta
		End Get
		Set
			If (Me._rec_hora_hasta.Equals(value) = false) Then
				Me.Onrec_hora_hastaChanging(value)
				Me.SendPropertyChanging
				Me._rec_hora_hasta = value
				Me.SendPropertyChanged("rec_hora_hasta")
				Me.Onrec_hora_hastaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Alertas_Recorridos_Alertas_Recorridos_Frecuencias", Storage:="_Alertas_Recorridos", ThisKey:="rec_id", OtherKey:="arec_id", IsForeignKey:=true)>  _
	Public Property Alertas_Recorridos() As Alertas_Recorridos
		Get
			Return Me._Alertas_Recorridos.Entity
		End Get
		Set
			Dim previousValue As Alertas_Recorridos = Me._Alertas_Recorridos.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Alertas_Recorridos.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Alertas_Recorridos.Entity = Nothing
					previousValue.Alertas_Recorridos_Frecuencias.Remove(Me)
				End If
				Me._Alertas_Recorridos.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Alertas_Recorridos_Frecuencias.Add(Me)
					Me._rec_id = value.arec_id
				Else
					Me._rec_id = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Alertas_Recorridos")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Alertas_Direcciones_Frecuencia")>  _
Partial Public Class Alertas_Direcciones_Frecuencia
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _dir_frec_id As Integer
	
	Private _dir_id As Integer
	
	Private _dir_dia_semana As Integer
	
	Private _dir_frec_hora_desde As System.Nullable(Of System.TimeSpan)
	
	Private _dir_frec_hora_hasta As System.Nullable(Of System.TimeSpan)
	
	Private _Alertas_Direcciones As EntityRef(Of Alertas_Direcciones)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub Ondir_frec_idChanging(value As Integer)
    End Sub
    Partial Private Sub Ondir_frec_idChanged()
    End Sub
    Partial Private Sub Ondir_idChanging(value As Integer)
    End Sub
    Partial Private Sub Ondir_idChanged()
    End Sub
    Partial Private Sub Ondir_dia_semanaChanging(value As Integer)
    End Sub
    Partial Private Sub Ondir_dia_semanaChanged()
    End Sub
    Partial Private Sub Ondir_frec_hora_desdeChanging(value As System.Nullable(Of System.TimeSpan))
    End Sub
    Partial Private Sub Ondir_frec_hora_desdeChanged()
    End Sub
    Partial Private Sub Ondir_frec_hora_hastaChanging(value As System.Nullable(Of System.TimeSpan))
    End Sub
    Partial Private Sub Ondir_frec_hora_hastaChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Alertas_Direcciones = CType(Nothing, EntityRef(Of Alertas_Direcciones))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_dir_frec_id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property dir_frec_id() As Integer
		Get
			Return Me._dir_frec_id
		End Get
		Set
			If ((Me._dir_frec_id = value)  _
						= false) Then
				Me.Ondir_frec_idChanging(value)
				Me.SendPropertyChanging
				Me._dir_frec_id = value
				Me.SendPropertyChanged("dir_frec_id")
				Me.Ondir_frec_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_dir_id", DbType:="Int NOT NULL")>  _
	Public Property dir_id() As Integer
		Get
			Return Me._dir_id
		End Get
		Set
			If ((Me._dir_id = value)  _
						= false) Then
				If Me._Alertas_Direcciones.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.Ondir_idChanging(value)
				Me.SendPropertyChanging
				Me._dir_id = value
				Me.SendPropertyChanged("dir_id")
				Me.Ondir_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_dir_dia_semana", DbType:="Int NOT NULL")>  _
	Public Property dir_dia_semana() As Integer
		Get
			Return Me._dir_dia_semana
		End Get
		Set
			If ((Me._dir_dia_semana = value)  _
						= false) Then
				Me.Ondir_dia_semanaChanging(value)
				Me.SendPropertyChanging
				Me._dir_dia_semana = value
				Me.SendPropertyChanged("dir_dia_semana")
				Me.Ondir_dia_semanaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_dir_frec_hora_desde", DbType:="Time")>  _
	Public Property dir_frec_hora_desde() As System.Nullable(Of System.TimeSpan)
		Get
			Return Me._dir_frec_hora_desde
		End Get
		Set
			If (Me._dir_frec_hora_desde.Equals(value) = false) Then
				Me.Ondir_frec_hora_desdeChanging(value)
				Me.SendPropertyChanging
				Me._dir_frec_hora_desde = value
				Me.SendPropertyChanged("dir_frec_hora_desde")
				Me.Ondir_frec_hora_desdeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_dir_frec_hora_hasta", DbType:="Time")>  _
	Public Property dir_frec_hora_hasta() As System.Nullable(Of System.TimeSpan)
		Get
			Return Me._dir_frec_hora_hasta
		End Get
		Set
			If (Me._dir_frec_hora_hasta.Equals(value) = false) Then
				Me.Ondir_frec_hora_hastaChanging(value)
				Me.SendPropertyChanging
				Me._dir_frec_hora_hasta = value
				Me.SendPropertyChanged("dir_frec_hora_hasta")
				Me.Ondir_frec_hora_hastaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Alertas_Direcciones_Alertas_Direcciones_Frecuencia", Storage:="_Alertas_Direcciones", ThisKey:="dir_id", OtherKey:="adir_id", IsForeignKey:=true)>  _
	Public Property Alertas_Direcciones() As Alertas_Direcciones
		Get
			Return Me._Alertas_Direcciones.Entity
		End Get
		Set
			Dim previousValue As Alertas_Direcciones = Me._Alertas_Direcciones.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Alertas_Direcciones.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Alertas_Direcciones.Entity = Nothing
					previousValue.Alertas_Direcciones_Frecuencia.Remove(Me)
				End If
				Me._Alertas_Direcciones.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Alertas_Direcciones_Frecuencia.Add(Me)
					Me._dir_id = value.adir_id
				Else
					Me._dir_id = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Alertas_Direcciones")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Recorridos")>  _
Partial Public Class Recorridos
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _rec_id As Integer
	
	Private _rec_nombre As String
	
	Private _cli_id As Integer
	
	Private _rec_origen As String
	
	Private _rec_destino As String
	
	Private _Alertas_Recorridos As EntitySet(Of Alertas_Recorridos)
	
	Private _Recorridos_Puntos As EntitySet(Of Recorridos_Puntos)
	
	Private _Cliente As EntityRef(Of Cliente)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub Onrec_idChanging(value As Integer)
    End Sub
    Partial Private Sub Onrec_idChanged()
    End Sub
    Partial Private Sub Onrec_nombreChanging(value As String)
    End Sub
    Partial Private Sub Onrec_nombreChanged()
    End Sub
    Partial Private Sub Oncli_idChanging(value As Integer)
    End Sub
    Partial Private Sub Oncli_idChanged()
    End Sub
    Partial Private Sub Onrec_origenChanging(value As String)
    End Sub
    Partial Private Sub Onrec_origenChanged()
    End Sub
    Partial Private Sub Onrec_destinoChanging(value As String)
    End Sub
    Partial Private Sub Onrec_destinoChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Alertas_Recorridos = New EntitySet(Of Alertas_Recorridos)(AddressOf Me.attach_Alertas_Recorridos, AddressOf Me.detach_Alertas_Recorridos)
		Me._Recorridos_Puntos = New EntitySet(Of Recorridos_Puntos)(AddressOf Me.attach_Recorridos_Puntos, AddressOf Me.detach_Recorridos_Puntos)
		Me._Cliente = CType(Nothing, EntityRef(Of Cliente))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_rec_id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property rec_id() As Integer
		Get
			Return Me._rec_id
		End Get
		Set
			If ((Me._rec_id = value)  _
						= false) Then
				Me.Onrec_idChanging(value)
				Me.SendPropertyChanging
				Me._rec_id = value
				Me.SendPropertyChanged("rec_id")
				Me.Onrec_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_rec_nombre", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property rec_nombre() As String
		Get
			Return Me._rec_nombre
		End Get
		Set
			If (String.Equals(Me._rec_nombre, value) = false) Then
				Me.Onrec_nombreChanging(value)
				Me.SendPropertyChanging
				Me._rec_nombre = value
				Me.SendPropertyChanged("rec_nombre")
				Me.Onrec_nombreChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_cli_id", DbType:="Int NOT NULL")>  _
	Public Property cli_id() As Integer
		Get
			Return Me._cli_id
		End Get
		Set
			If ((Me._cli_id = value)  _
						= false) Then
				If Me._Cliente.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.Oncli_idChanging(value)
				Me.SendPropertyChanging
				Me._cli_id = value
				Me.SendPropertyChanged("cli_id")
				Me.Oncli_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_rec_origen", DbType:="VarChar(100) NOT NULL", CanBeNull:=false)>  _
	Public Property rec_origen() As String
		Get
			Return Me._rec_origen
		End Get
		Set
			If (String.Equals(Me._rec_origen, value) = false) Then
				Me.Onrec_origenChanging(value)
				Me.SendPropertyChanging
				Me._rec_origen = value
				Me.SendPropertyChanged("rec_origen")
				Me.Onrec_origenChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_rec_destino", DbType:="VarChar(100) NOT NULL", CanBeNull:=false)>  _
	Public Property rec_destino() As String
		Get
			Return Me._rec_destino
		End Get
		Set
			If (String.Equals(Me._rec_destino, value) = false) Then
				Me.Onrec_destinoChanging(value)
				Me.SendPropertyChanging
				Me._rec_destino = value
				Me.SendPropertyChanged("rec_destino")
				Me.Onrec_destinoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Recorridos_Alertas_Recorridos", Storage:="_Alertas_Recorridos", ThisKey:="rec_id", OtherKey:="rec_id")>  _
	Public Property Alertas_Recorridos() As EntitySet(Of Alertas_Recorridos)
		Get
			Return Me._Alertas_Recorridos
		End Get
		Set
			Me._Alertas_Recorridos.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Recorridos_Recorridos_Puntos", Storage:="_Recorridos_Puntos", ThisKey:="rec_id", OtherKey:="rec_id")>  _
	Public Property Recorridos_Puntos() As EntitySet(Of Recorridos_Puntos)
		Get
			Return Me._Recorridos_Puntos
		End Get
		Set
			Me._Recorridos_Puntos.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Cliente_Recorridos", Storage:="_Cliente", ThisKey:="cli_id", OtherKey:="cli_id", IsForeignKey:=true)>  _
	Public Property Cliente() As Cliente
		Get
			Return Me._Cliente.Entity
		End Get
		Set
			Dim previousValue As Cliente = Me._Cliente.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Cliente.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Cliente.Entity = Nothing
					previousValue.Recorridos.Remove(Me)
				End If
				Me._Cliente.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Recorridos.Add(Me)
					Me._cli_id = value.cli_id
				Else
					Me._cli_id = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Cliente")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Alertas_Recorridos(ByVal entity As Alertas_Recorridos)
		Me.SendPropertyChanging
		entity.Recorridos = Me
	End Sub
	
	Private Sub detach_Alertas_Recorridos(ByVal entity As Alertas_Recorridos)
		Me.SendPropertyChanging
		entity.Recorridos = Nothing
	End Sub
	
	Private Sub attach_Recorridos_Puntos(ByVal entity As Recorridos_Puntos)
		Me.SendPropertyChanging
		entity.Recorridos = Me
	End Sub
	
	Private Sub detach_Recorridos_Puntos(ByVal entity As Recorridos_Puntos)
		Me.SendPropertyChanging
		entity.Recorridos = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Alertas_Recordatorios_Por_Fechas")>  _
Partial Public Class Alertas_Recordatorios_Por_Fechas
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _recf_id As Integer
	
	Private _recf_descripcion As String
	
	Private _recf_periocidad As String
	
	Private _recf_proxima_ocurrencia As Date
	
	Private _recf_notificar_sms As Boolean
	
	Private _recf_notificar_mail As Boolean
	
	Private _veh_id As Integer
	
	Private _Vehiculo As EntityRef(Of Vehiculo)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub Onrecf_idChanging(value As Integer)
    End Sub
    Partial Private Sub Onrecf_idChanged()
    End Sub
    Partial Private Sub Onrecf_descripcionChanging(value As String)
    End Sub
    Partial Private Sub Onrecf_descripcionChanged()
    End Sub
    Partial Private Sub Onrecf_periocidadChanging(value As String)
    End Sub
    Partial Private Sub Onrecf_periocidadChanged()
    End Sub
    Partial Private Sub Onrecf_proxima_ocurrenciaChanging(value As Date)
    End Sub
    Partial Private Sub Onrecf_proxima_ocurrenciaChanged()
    End Sub
    Partial Private Sub Onrecf_notificar_smsChanging(value As Boolean)
    End Sub
    Partial Private Sub Onrecf_notificar_smsChanged()
    End Sub
    Partial Private Sub Onrecf_notificar_mailChanging(value As Boolean)
    End Sub
    Partial Private Sub Onrecf_notificar_mailChanged()
    End Sub
    Partial Private Sub Onveh_idChanging(value As Integer)
    End Sub
    Partial Private Sub Onveh_idChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Vehiculo = CType(Nothing, EntityRef(Of Vehiculo))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_recf_id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property recf_id() As Integer
		Get
			Return Me._recf_id
		End Get
		Set
			If ((Me._recf_id = value)  _
						= false) Then
				Me.Onrecf_idChanging(value)
				Me.SendPropertyChanging
				Me._recf_id = value
				Me.SendPropertyChanged("recf_id")
				Me.Onrecf_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_recf_descripcion", DbType:="VarChar(100) NOT NULL", CanBeNull:=false)>  _
	Public Property recf_descripcion() As String
		Get
			Return Me._recf_descripcion
		End Get
		Set
			If (String.Equals(Me._recf_descripcion, value) = false) Then
				Me.Onrecf_descripcionChanging(value)
				Me.SendPropertyChanging
				Me._recf_descripcion = value
				Me.SendPropertyChanged("recf_descripcion")
				Me.Onrecf_descripcionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_recf_periocidad", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property recf_periocidad() As String
		Get
			Return Me._recf_periocidad
		End Get
		Set
			If (String.Equals(Me._recf_periocidad, value) = false) Then
				Me.Onrecf_periocidadChanging(value)
				Me.SendPropertyChanging
				Me._recf_periocidad = value
				Me.SendPropertyChanged("recf_periocidad")
				Me.Onrecf_periocidadChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_recf_proxima_ocurrencia", DbType:="DateTime NOT NULL")>  _
	Public Property recf_proxima_ocurrencia() As Date
		Get
			Return Me._recf_proxima_ocurrencia
		End Get
		Set
			If ((Me._recf_proxima_ocurrencia = value)  _
						= false) Then
				Me.Onrecf_proxima_ocurrenciaChanging(value)
				Me.SendPropertyChanging
				Me._recf_proxima_ocurrencia = value
				Me.SendPropertyChanged("recf_proxima_ocurrencia")
				Me.Onrecf_proxima_ocurrenciaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_recf_notificar_sms", DbType:="Bit NOT NULL")>  _
	Public Property recf_notificar_sms() As Boolean
		Get
			Return Me._recf_notificar_sms
		End Get
		Set
			If ((Me._recf_notificar_sms = value)  _
						= false) Then
				Me.Onrecf_notificar_smsChanging(value)
				Me.SendPropertyChanging
				Me._recf_notificar_sms = value
				Me.SendPropertyChanged("recf_notificar_sms")
				Me.Onrecf_notificar_smsChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_recf_notificar_mail", DbType:="Bit NOT NULL")>  _
	Public Property recf_notificar_mail() As Boolean
		Get
			Return Me._recf_notificar_mail
		End Get
		Set
			If ((Me._recf_notificar_mail = value)  _
						= false) Then
				Me.Onrecf_notificar_mailChanging(value)
				Me.SendPropertyChanging
				Me._recf_notificar_mail = value
				Me.SendPropertyChanged("recf_notificar_mail")
				Me.Onrecf_notificar_mailChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_veh_id", DbType:="Int NOT NULL")>  _
	Public Property veh_id() As Integer
		Get
			Return Me._veh_id
		End Get
		Set
			If ((Me._veh_id = value)  _
						= false) Then
				If Me._Vehiculo.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.Onveh_idChanging(value)
				Me.SendPropertyChanging
				Me._veh_id = value
				Me.SendPropertyChanged("veh_id")
				Me.Onveh_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Vehiculo_Alertas_Recordatorios_Por_Fechas", Storage:="_Vehiculo", ThisKey:="veh_id", OtherKey:="veh_id", IsForeignKey:=true)>  _
	Public Property Vehiculo() As Vehiculo
		Get
			Return Me._Vehiculo.Entity
		End Get
		Set
			Dim previousValue As Vehiculo = Me._Vehiculo.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Vehiculo.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Vehiculo.Entity = Nothing
					previousValue.Alertas_Recordatorios_Por_Fechas.Remove(Me)
				End If
				Me._Vehiculo.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Alertas_Recordatorios_Por_Fechas.Add(Me)
					Me._veh_id = value.veh_id
				Else
					Me._veh_id = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Vehiculo")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Alarmas_Velocidad")>  _
Partial Public Class Alarmas_Velocidad
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _vel_id As Integer
	
	Private _vel_descripcion As String
	
	Private _vel_unidadmedida As String
	
	Private _vel_valor_por_defecto As Integer
	
	Private _vel_tipo_via As System.Nullable(Of Integer)
	
	Private _Alertas_Velocidad_Configuradas As EntitySet(Of Alertas_Velocidad_Configuradas)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub Onvel_idChanging(value As Integer)
    End Sub
    Partial Private Sub Onvel_idChanged()
    End Sub
    Partial Private Sub Onvel_descripcionChanging(value As String)
    End Sub
    Partial Private Sub Onvel_descripcionChanged()
    End Sub
    Partial Private Sub Onvel_unidadmedidaChanging(value As String)
    End Sub
    Partial Private Sub Onvel_unidadmedidaChanged()
    End Sub
    Partial Private Sub Onvel_valor_por_defectoChanging(value As Integer)
    End Sub
    Partial Private Sub Onvel_valor_por_defectoChanged()
    End Sub
    Partial Private Sub Onvel_tipo_viaChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Onvel_tipo_viaChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Alertas_Velocidad_Configuradas = New EntitySet(Of Alertas_Velocidad_Configuradas)(AddressOf Me.attach_Alertas_Velocidad_Configuradas, AddressOf Me.detach_Alertas_Velocidad_Configuradas)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_vel_id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property vel_id() As Integer
		Get
			Return Me._vel_id
		End Get
		Set
			If ((Me._vel_id = value)  _
						= false) Then
				Me.Onvel_idChanging(value)
				Me.SendPropertyChanging
				Me._vel_id = value
				Me.SendPropertyChanged("vel_id")
				Me.Onvel_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_vel_descripcion", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property vel_descripcion() As String
		Get
			Return Me._vel_descripcion
		End Get
		Set
			If (String.Equals(Me._vel_descripcion, value) = false) Then
				Me.Onvel_descripcionChanging(value)
				Me.SendPropertyChanging
				Me._vel_descripcion = value
				Me.SendPropertyChanged("vel_descripcion")
				Me.Onvel_descripcionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_vel_unidadmedida", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property vel_unidadmedida() As String
		Get
			Return Me._vel_unidadmedida
		End Get
		Set
			If (String.Equals(Me._vel_unidadmedida, value) = false) Then
				Me.Onvel_unidadmedidaChanging(value)
				Me.SendPropertyChanging
				Me._vel_unidadmedida = value
				Me.SendPropertyChanged("vel_unidadmedida")
				Me.Onvel_unidadmedidaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_vel_valor_por_defecto", DbType:="Int NOT NULL")>  _
	Public Property vel_valor_por_defecto() As Integer
		Get
			Return Me._vel_valor_por_defecto
		End Get
		Set
			If ((Me._vel_valor_por_defecto = value)  _
						= false) Then
				Me.Onvel_valor_por_defectoChanging(value)
				Me.SendPropertyChanging
				Me._vel_valor_por_defecto = value
				Me.SendPropertyChanged("vel_valor_por_defecto")
				Me.Onvel_valor_por_defectoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_vel_tipo_via", DbType:="Int")>  _
	Public Property vel_tipo_via() As System.Nullable(Of Integer)
		Get
			Return Me._vel_tipo_via
		End Get
		Set
			If (Me._vel_tipo_via.Equals(value) = false) Then
				Me.Onvel_tipo_viaChanging(value)
				Me.SendPropertyChanging
				Me._vel_tipo_via = value
				Me.SendPropertyChanged("vel_tipo_via")
				Me.Onvel_tipo_viaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Alarmas_Velocidad_Alertas_Velocidad_Configuradas", Storage:="_Alertas_Velocidad_Configuradas", ThisKey:="vel_id", OtherKey:="vel_id")>  _
	Public Property Alertas_Velocidad_Configuradas() As EntitySet(Of Alertas_Velocidad_Configuradas)
		Get
			Return Me._Alertas_Velocidad_Configuradas
		End Get
		Set
			Me._Alertas_Velocidad_Configuradas.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Alertas_Velocidad_Configuradas(ByVal entity As Alertas_Velocidad_Configuradas)
		Me.SendPropertyChanging
		entity.Alarmas_Velocidad = Me
	End Sub
	
	Private Sub detach_Alertas_Velocidad_Configuradas(ByVal entity As Alertas_Velocidad_Configuradas)
		Me.SendPropertyChanging
		entity.Alarmas_Velocidad = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Alertas_Velocidad_Configuradas")>  _
Partial Public Class Alertas_Velocidad_Configuradas
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ale_id As Integer
	
	Private _veh_id As Integer
	
	Private _vel_id As Integer
	
	Private _ale_fecha_creacion As Date
	
	Private _ale_valor_maximo As Integer
	
	Private _ale_enviar_SMS As Boolean
	
	Private _ale_enviar_mail As Boolean
	
	Private _Alarmas_Velocidad As EntityRef(Of Alarmas_Velocidad)
	
	Private _Vehiculo As EntityRef(Of Vehiculo)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub Onale_idChanging(value As Integer)
    End Sub
    Partial Private Sub Onale_idChanged()
    End Sub
    Partial Private Sub Onveh_idChanging(value As Integer)
    End Sub
    Partial Private Sub Onveh_idChanged()
    End Sub
    Partial Private Sub Onvel_idChanging(value As Integer)
    End Sub
    Partial Private Sub Onvel_idChanged()
    End Sub
    Partial Private Sub Onale_fecha_creacionChanging(value As Date)
    End Sub
    Partial Private Sub Onale_fecha_creacionChanged()
    End Sub
    Partial Private Sub Onale_valor_maximoChanging(value As Integer)
    End Sub
    Partial Private Sub Onale_valor_maximoChanged()
    End Sub
    Partial Private Sub Onale_enviar_SMSChanging(value As Boolean)
    End Sub
    Partial Private Sub Onale_enviar_SMSChanged()
    End Sub
    Partial Private Sub Onale_enviar_mailChanging(value As Boolean)
    End Sub
    Partial Private Sub Onale_enviar_mailChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Alarmas_Velocidad = CType(Nothing, EntityRef(Of Alarmas_Velocidad))
		Me._Vehiculo = CType(Nothing, EntityRef(Of Vehiculo))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ale_id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ale_id() As Integer
		Get
			Return Me._ale_id
		End Get
		Set
			If ((Me._ale_id = value)  _
						= false) Then
				Me.Onale_idChanging(value)
				Me.SendPropertyChanging
				Me._ale_id = value
				Me.SendPropertyChanged("ale_id")
				Me.Onale_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_veh_id", DbType:="Int NOT NULL")>  _
	Public Property veh_id() As Integer
		Get
			Return Me._veh_id
		End Get
		Set
			If ((Me._veh_id = value)  _
						= false) Then
				If Me._Vehiculo.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.Onveh_idChanging(value)
				Me.SendPropertyChanging
				Me._veh_id = value
				Me.SendPropertyChanged("veh_id")
				Me.Onveh_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_vel_id", DbType:="Int NOT NULL")>  _
	Public Property vel_id() As Integer
		Get
			Return Me._vel_id
		End Get
		Set
			If ((Me._vel_id = value)  _
						= false) Then
				If Me._Alarmas_Velocidad.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.Onvel_idChanging(value)
				Me.SendPropertyChanging
				Me._vel_id = value
				Me.SendPropertyChanged("vel_id")
				Me.Onvel_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ale_fecha_creacion", DbType:="DateTime NOT NULL")>  _
	Public Property ale_fecha_creacion() As Date
		Get
			Return Me._ale_fecha_creacion
		End Get
		Set
			If ((Me._ale_fecha_creacion = value)  _
						= false) Then
				Me.Onale_fecha_creacionChanging(value)
				Me.SendPropertyChanging
				Me._ale_fecha_creacion = value
				Me.SendPropertyChanged("ale_fecha_creacion")
				Me.Onale_fecha_creacionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ale_valor_maximo", DbType:="Int NOT NULL")>  _
	Public Property ale_valor_maximo() As Integer
		Get
			Return Me._ale_valor_maximo
		End Get
		Set
			If ((Me._ale_valor_maximo = value)  _
						= false) Then
				Me.Onale_valor_maximoChanging(value)
				Me.SendPropertyChanging
				Me._ale_valor_maximo = value
				Me.SendPropertyChanged("ale_valor_maximo")
				Me.Onale_valor_maximoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ale_enviar_SMS", DbType:="Bit NOT NULL")>  _
	Public Property ale_enviar_SMS() As Boolean
		Get
			Return Me._ale_enviar_SMS
		End Get
		Set
			If ((Me._ale_enviar_SMS = value)  _
						= false) Then
				Me.Onale_enviar_SMSChanging(value)
				Me.SendPropertyChanging
				Me._ale_enviar_SMS = value
				Me.SendPropertyChanged("ale_enviar_SMS")
				Me.Onale_enviar_SMSChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ale_enviar_mail", DbType:="Bit NOT NULL")>  _
	Public Property ale_enviar_mail() As Boolean
		Get
			Return Me._ale_enviar_mail
		End Get
		Set
			If ((Me._ale_enviar_mail = value)  _
						= false) Then
				Me.Onale_enviar_mailChanging(value)
				Me.SendPropertyChanging
				Me._ale_enviar_mail = value
				Me.SendPropertyChanged("ale_enviar_mail")
				Me.Onale_enviar_mailChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Alarmas_Velocidad_Alertas_Velocidad_Configuradas", Storage:="_Alarmas_Velocidad", ThisKey:="vel_id", OtherKey:="vel_id", IsForeignKey:=true)>  _
	Public Property Alarmas_Velocidad() As Alarmas_Velocidad
		Get
			Return Me._Alarmas_Velocidad.Entity
		End Get
		Set
			Dim previousValue As Alarmas_Velocidad = Me._Alarmas_Velocidad.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Alarmas_Velocidad.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Alarmas_Velocidad.Entity = Nothing
					previousValue.Alertas_Velocidad_Configuradas.Remove(Me)
				End If
				Me._Alarmas_Velocidad.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Alertas_Velocidad_Configuradas.Add(Me)
					Me._vel_id = value.vel_id
				Else
					Me._vel_id = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Alarmas_Velocidad")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Vehiculo_Alertas_Velocidad_Configuradas", Storage:="_Vehiculo", ThisKey:="veh_id", OtherKey:="veh_id", IsForeignKey:=true)>  _
	Public Property Vehiculo() As Vehiculo
		Get
			Return Me._Vehiculo.Entity
		End Get
		Set
			Dim previousValue As Vehiculo = Me._Vehiculo.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Vehiculo.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Vehiculo.Entity = Nothing
					previousValue.Alertas_Velocidad_Configuradas.Remove(Me)
				End If
				Me._Vehiculo.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Alertas_Velocidad_Configuradas.Add(Me)
					Me._veh_id = value.veh_id
				Else
					Me._veh_id = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Vehiculo")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Direcciones")>  _
Partial Public Class Direcciones
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _dir_id As Integer
	
	Private _dir_direccion As String
	
	Private _dir_latitud As String
	
	Private _dir_longitud As String
	
	Private _cli_id As Integer
	
	Private _dir_nombre As String
	
	Private _Alertas_Direcciones As EntitySet(Of Alertas_Direcciones)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub Ondir_idChanging(value As Integer)
    End Sub
    Partial Private Sub Ondir_idChanged()
    End Sub
    Partial Private Sub Ondir_direccionChanging(value As String)
    End Sub
    Partial Private Sub Ondir_direccionChanged()
    End Sub
    Partial Private Sub Ondir_latitudChanging(value As String)
    End Sub
    Partial Private Sub Ondir_latitudChanged()
    End Sub
    Partial Private Sub Ondir_longitudChanging(value As String)
    End Sub
    Partial Private Sub Ondir_longitudChanged()
    End Sub
    Partial Private Sub Oncli_idChanging(value As Integer)
    End Sub
    Partial Private Sub Oncli_idChanged()
    End Sub
    Partial Private Sub Ondir_nombreChanging(value As String)
    End Sub
    Partial Private Sub Ondir_nombreChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Alertas_Direcciones = New EntitySet(Of Alertas_Direcciones)(AddressOf Me.attach_Alertas_Direcciones, AddressOf Me.detach_Alertas_Direcciones)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_dir_id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property dir_id() As Integer
		Get
			Return Me._dir_id
		End Get
		Set
			If ((Me._dir_id = value)  _
						= false) Then
				Me.Ondir_idChanging(value)
				Me.SendPropertyChanging
				Me._dir_id = value
				Me.SendPropertyChanged("dir_id")
				Me.Ondir_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_dir_direccion", DbType:="VarChar(150) NOT NULL", CanBeNull:=false)>  _
	Public Property dir_direccion() As String
		Get
			Return Me._dir_direccion
		End Get
		Set
			If (String.Equals(Me._dir_direccion, value) = false) Then
				Me.Ondir_direccionChanging(value)
				Me.SendPropertyChanging
				Me._dir_direccion = value
				Me.SendPropertyChanged("dir_direccion")
				Me.Ondir_direccionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_dir_latitud", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property dir_latitud() As String
		Get
			Return Me._dir_latitud
		End Get
		Set
			If (String.Equals(Me._dir_latitud, value) = false) Then
				Me.Ondir_latitudChanging(value)
				Me.SendPropertyChanging
				Me._dir_latitud = value
				Me.SendPropertyChanged("dir_latitud")
				Me.Ondir_latitudChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_dir_longitud", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property dir_longitud() As String
		Get
			Return Me._dir_longitud
		End Get
		Set
			If (String.Equals(Me._dir_longitud, value) = false) Then
				Me.Ondir_longitudChanging(value)
				Me.SendPropertyChanging
				Me._dir_longitud = value
				Me.SendPropertyChanged("dir_longitud")
				Me.Ondir_longitudChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_cli_id", DbType:="Int NOT NULL")>  _
	Public Property cli_id() As Integer
		Get
			Return Me._cli_id
		End Get
		Set
			If ((Me._cli_id = value)  _
						= false) Then
				Me.Oncli_idChanging(value)
				Me.SendPropertyChanging
				Me._cli_id = value
				Me.SendPropertyChanged("cli_id")
				Me.Oncli_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_dir_nombre", DbType:="VarChar(100)")>  _
	Public Property dir_nombre() As String
		Get
			Return Me._dir_nombre
		End Get
		Set
			If (String.Equals(Me._dir_nombre, value) = false) Then
				Me.Ondir_nombreChanging(value)
				Me.SendPropertyChanging
				Me._dir_nombre = value
				Me.SendPropertyChanged("dir_nombre")
				Me.Ondir_nombreChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Direcciones_Alertas_Direcciones", Storage:="_Alertas_Direcciones", ThisKey:="dir_id", OtherKey:="dir_id")>  _
	Public Property Alertas_Direcciones() As EntitySet(Of Alertas_Direcciones)
		Get
			Return Me._Alertas_Direcciones
		End Get
		Set
			Me._Alertas_Direcciones.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Alertas_Direcciones(ByVal entity As Alertas_Direcciones)
		Me.SendPropertyChanging
		entity.Direcciones = Me
	End Sub
	
	Private Sub detach_Alertas_Direcciones(ByVal entity As Alertas_Direcciones)
		Me.SendPropertyChanging
		entity.Direcciones = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Alertas_Direcciones")>  _
Partial Public Class Alertas_Direcciones
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _adir_id As Integer
	
	Private _adir_tipo As Integer
	
	Private _adir_enviar_mail As Boolean
	
	Private _adir_enviar_sms As Boolean
	
	Private _adir_fecha_desde As System.Nullable(Of Date)
	
	Private _adir_fecha_hasta As System.Nullable(Of Date)
	
	Private _adir_umbral_desvio As String
	
	Private _veh_id As Integer
	
	Private _dir_id As Integer
	
	Private _adir_activa As Boolean
	
	Private _Alertas_Direcciones_Frecuencia As EntitySet(Of Alertas_Direcciones_Frecuencia)
	
	Private _Direcciones As EntityRef(Of Direcciones)
	
	Private _Vehiculo As EntityRef(Of Vehiculo)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub Onadir_idChanging(value As Integer)
    End Sub
    Partial Private Sub Onadir_idChanged()
    End Sub
    Partial Private Sub Onadir_tipoChanging(value As Integer)
    End Sub
    Partial Private Sub Onadir_tipoChanged()
    End Sub
    Partial Private Sub Onadir_enviar_mailChanging(value As Boolean)
    End Sub
    Partial Private Sub Onadir_enviar_mailChanged()
    End Sub
    Partial Private Sub Onadir_enviar_smsChanging(value As Boolean)
    End Sub
    Partial Private Sub Onadir_enviar_smsChanged()
    End Sub
    Partial Private Sub Onadir_fecha_desdeChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub Onadir_fecha_desdeChanged()
    End Sub
    Partial Private Sub Onadir_fecha_hastaChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub Onadir_fecha_hastaChanged()
    End Sub
    Partial Private Sub Onadir_umbral_desvioChanging(value As String)
    End Sub
    Partial Private Sub Onadir_umbral_desvioChanged()
    End Sub
    Partial Private Sub Onveh_idChanging(value As Integer)
    End Sub
    Partial Private Sub Onveh_idChanged()
    End Sub
    Partial Private Sub Ondir_idChanging(value As Integer)
    End Sub
    Partial Private Sub Ondir_idChanged()
    End Sub
    Partial Private Sub Onadir_activaChanging(value As Boolean)
    End Sub
    Partial Private Sub Onadir_activaChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Alertas_Direcciones_Frecuencia = New EntitySet(Of Alertas_Direcciones_Frecuencia)(AddressOf Me.attach_Alertas_Direcciones_Frecuencia, AddressOf Me.detach_Alertas_Direcciones_Frecuencia)
		Me._Direcciones = CType(Nothing, EntityRef(Of Direcciones))
		Me._Vehiculo = CType(Nothing, EntityRef(Of Vehiculo))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_adir_id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property adir_id() As Integer
		Get
			Return Me._adir_id
		End Get
		Set
			If ((Me._adir_id = value)  _
						= false) Then
				Me.Onadir_idChanging(value)
				Me.SendPropertyChanging
				Me._adir_id = value
				Me.SendPropertyChanged("adir_id")
				Me.Onadir_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_adir_tipo", DbType:="Int NOT NULL")>  _
	Public Property adir_tipo() As Integer
		Get
			Return Me._adir_tipo
		End Get
		Set
			If ((Me._adir_tipo = value)  _
						= false) Then
				Me.Onadir_tipoChanging(value)
				Me.SendPropertyChanging
				Me._adir_tipo = value
				Me.SendPropertyChanged("adir_tipo")
				Me.Onadir_tipoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_adir_enviar_mail", DbType:="Bit NOT NULL")>  _
	Public Property adir_enviar_mail() As Boolean
		Get
			Return Me._adir_enviar_mail
		End Get
		Set
			If ((Me._adir_enviar_mail = value)  _
						= false) Then
				Me.Onadir_enviar_mailChanging(value)
				Me.SendPropertyChanging
				Me._adir_enviar_mail = value
				Me.SendPropertyChanged("adir_enviar_mail")
				Me.Onadir_enviar_mailChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_adir_enviar_sms", DbType:="Bit NOT NULL")>  _
	Public Property adir_enviar_sms() As Boolean
		Get
			Return Me._adir_enviar_sms
		End Get
		Set
			If ((Me._adir_enviar_sms = value)  _
						= false) Then
				Me.Onadir_enviar_smsChanging(value)
				Me.SendPropertyChanging
				Me._adir_enviar_sms = value
				Me.SendPropertyChanged("adir_enviar_sms")
				Me.Onadir_enviar_smsChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_adir_fecha_desde", DbType:="DateTime")>  _
	Public Property adir_fecha_desde() As System.Nullable(Of Date)
		Get
			Return Me._adir_fecha_desde
		End Get
		Set
			If (Me._adir_fecha_desde.Equals(value) = false) Then
				Me.Onadir_fecha_desdeChanging(value)
				Me.SendPropertyChanging
				Me._adir_fecha_desde = value
				Me.SendPropertyChanged("adir_fecha_desde")
				Me.Onadir_fecha_desdeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_adir_fecha_hasta", DbType:="DateTime")>  _
	Public Property adir_fecha_hasta() As System.Nullable(Of Date)
		Get
			Return Me._adir_fecha_hasta
		End Get
		Set
			If (Me._adir_fecha_hasta.Equals(value) = false) Then
				Me.Onadir_fecha_hastaChanging(value)
				Me.SendPropertyChanging
				Me._adir_fecha_hasta = value
				Me.SendPropertyChanged("adir_fecha_hasta")
				Me.Onadir_fecha_hastaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_adir_umbral_desvio", DbType:="VarChar(50)")>  _
	Public Property adir_umbral_desvio() As String
		Get
			Return Me._adir_umbral_desvio
		End Get
		Set
			If (String.Equals(Me._adir_umbral_desvio, value) = false) Then
				Me.Onadir_umbral_desvioChanging(value)
				Me.SendPropertyChanging
				Me._adir_umbral_desvio = value
				Me.SendPropertyChanged("adir_umbral_desvio")
				Me.Onadir_umbral_desvioChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_veh_id", DbType:="Int NOT NULL")>  _
	Public Property veh_id() As Integer
		Get
			Return Me._veh_id
		End Get
		Set
			If ((Me._veh_id = value)  _
						= false) Then
				If Me._Vehiculo.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.Onveh_idChanging(value)
				Me.SendPropertyChanging
				Me._veh_id = value
				Me.SendPropertyChanged("veh_id")
				Me.Onveh_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_dir_id", DbType:="Int NOT NULL")>  _
	Public Property dir_id() As Integer
		Get
			Return Me._dir_id
		End Get
		Set
			If ((Me._dir_id = value)  _
						= false) Then
				If Me._Direcciones.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.Ondir_idChanging(value)
				Me.SendPropertyChanging
				Me._dir_id = value
				Me.SendPropertyChanged("dir_id")
				Me.Ondir_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_adir_activa", DbType:="Bit NOT NULL")>  _
	Public Property adir_activa() As Boolean
		Get
			Return Me._adir_activa
		End Get
		Set
			If ((Me._adir_activa = value)  _
						= false) Then
				Me.Onadir_activaChanging(value)
				Me.SendPropertyChanging
				Me._adir_activa = value
				Me.SendPropertyChanged("adir_activa")
				Me.Onadir_activaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Alertas_Direcciones_Alertas_Direcciones_Frecuencia", Storage:="_Alertas_Direcciones_Frecuencia", ThisKey:="adir_id", OtherKey:="dir_id")>  _
	Public Property Alertas_Direcciones_Frecuencia() As EntitySet(Of Alertas_Direcciones_Frecuencia)
		Get
			Return Me._Alertas_Direcciones_Frecuencia
		End Get
		Set
			Me._Alertas_Direcciones_Frecuencia.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Direcciones_Alertas_Direcciones", Storage:="_Direcciones", ThisKey:="dir_id", OtherKey:="dir_id", IsForeignKey:=true)>  _
	Public Property Direcciones() As Direcciones
		Get
			Return Me._Direcciones.Entity
		End Get
		Set
			Dim previousValue As Direcciones = Me._Direcciones.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Direcciones.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Direcciones.Entity = Nothing
					previousValue.Alertas_Direcciones.Remove(Me)
				End If
				Me._Direcciones.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Alertas_Direcciones.Add(Me)
					Me._dir_id = value.dir_id
				Else
					Me._dir_id = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Direcciones")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Vehiculo_Alertas_Direcciones", Storage:="_Vehiculo", ThisKey:="veh_id", OtherKey:="veh_id", IsForeignKey:=true)>  _
	Public Property Vehiculo() As Vehiculo
		Get
			Return Me._Vehiculo.Entity
		End Get
		Set
			Dim previousValue As Vehiculo = Me._Vehiculo.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Vehiculo.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Vehiculo.Entity = Nothing
					previousValue.Alertas_Direcciones.Remove(Me)
				End If
				Me._Vehiculo.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Alertas_Direcciones.Add(Me)
					Me._veh_id = value.veh_id
				Else
					Me._veh_id = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Vehiculo")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Alertas_Direcciones_Frecuencia(ByVal entity As Alertas_Direcciones_Frecuencia)
		Me.SendPropertyChanging
		entity.Alertas_Direcciones = Me
	End Sub
	
	Private Sub detach_Alertas_Direcciones_Frecuencia(ByVal entity As Alertas_Direcciones_Frecuencia)
		Me.SendPropertyChanging
		entity.Alertas_Direcciones = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Tipos_Usos_Moviles")>  _
Partial Public Class Tipos_Usos_Moviles
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _tipo_uso_id As Integer
	
	Private _tipo_uso_descripcion As String
	
	Private _Vehiculos As EntitySet(Of Vehiculo)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub Ontipo_uso_idChanging(value As Integer)
    End Sub
    Partial Private Sub Ontipo_uso_idChanged()
    End Sub
    Partial Private Sub Ontipo_uso_descripcionChanging(value As String)
    End Sub
    Partial Private Sub Ontipo_uso_descripcionChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Vehiculos = New EntitySet(Of Vehiculo)(AddressOf Me.attach_Vehiculos, AddressOf Me.detach_Vehiculos)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_tipo_uso_id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property tipo_uso_id() As Integer
		Get
			Return Me._tipo_uso_id
		End Get
		Set
			If ((Me._tipo_uso_id = value)  _
						= false) Then
				Me.Ontipo_uso_idChanging(value)
				Me.SendPropertyChanging
				Me._tipo_uso_id = value
				Me.SendPropertyChanged("tipo_uso_id")
				Me.Ontipo_uso_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_tipo_uso_descripcion", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property tipo_uso_descripcion() As String
		Get
			Return Me._tipo_uso_descripcion
		End Get
		Set
			If (String.Equals(Me._tipo_uso_descripcion, value) = false) Then
				Me.Ontipo_uso_descripcionChanging(value)
				Me.SendPropertyChanging
				Me._tipo_uso_descripcion = value
				Me.SendPropertyChanged("tipo_uso_descripcion")
				Me.Ontipo_uso_descripcionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Tipos_Usos_Moviles_Vehiculo", Storage:="_Vehiculos", ThisKey:="tipo_uso_id", OtherKey:="tip_uso_id")>  _
	Public Property Vehiculos() As EntitySet(Of Vehiculo)
		Get
			Return Me._Vehiculos
		End Get
		Set
			Me._Vehiculos.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Vehiculos(ByVal entity As Vehiculo)
		Me.SendPropertyChanging
		entity.Tipos_Usos_Moviles = Me
	End Sub
	
	Private Sub detach_Vehiculos(ByVal entity As Vehiculo)
		Me.SendPropertyChanging
		entity.Tipos_Usos_Moviles = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Sensores_Configurados")>  _
Partial Public Class Sensores_Configurados
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _sen_id As Integer
	
	Private _veh_id As Integer
	
	Private _sen_enviar_mail As Boolean
	
	Private _Sensores As EntityRef(Of Sensores)
	
	Private _Vehiculo As EntityRef(Of Vehiculo)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub Onsen_idChanging(value As Integer)
    End Sub
    Partial Private Sub Onsen_idChanged()
    End Sub
    Partial Private Sub Onveh_idChanging(value As Integer)
    End Sub
    Partial Private Sub Onveh_idChanged()
    End Sub
    Partial Private Sub Onsen_enviar_mailChanging(value As Boolean)
    End Sub
    Partial Private Sub Onsen_enviar_mailChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Sensores = CType(Nothing, EntityRef(Of Sensores))
		Me._Vehiculo = CType(Nothing, EntityRef(Of Vehiculo))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_sen_id", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property sen_id() As Integer
		Get
			Return Me._sen_id
		End Get
		Set
			If ((Me._sen_id = value)  _
						= false) Then
				If Me._Sensores.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.Onsen_idChanging(value)
				Me.SendPropertyChanging
				Me._sen_id = value
				Me.SendPropertyChanged("sen_id")
				Me.Onsen_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_veh_id", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property veh_id() As Integer
		Get
			Return Me._veh_id
		End Get
		Set
			If ((Me._veh_id = value)  _
						= false) Then
				If Me._Vehiculo.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.Onveh_idChanging(value)
				Me.SendPropertyChanging
				Me._veh_id = value
				Me.SendPropertyChanged("veh_id")
				Me.Onveh_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_sen_enviar_mail", DbType:="Bit NOT NULL")>  _
	Public Property sen_enviar_mail() As Boolean
		Get
			Return Me._sen_enviar_mail
		End Get
		Set
			If ((Me._sen_enviar_mail = value)  _
						= false) Then
				Me.Onsen_enviar_mailChanging(value)
				Me.SendPropertyChanging
				Me._sen_enviar_mail = value
				Me.SendPropertyChanged("sen_enviar_mail")
				Me.Onsen_enviar_mailChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Sensores_Sensores_Configurados", Storage:="_Sensores", ThisKey:="sen_id", OtherKey:="sen_id", IsForeignKey:=true)>  _
	Public Property Sensores() As Sensores
		Get
			Return Me._Sensores.Entity
		End Get
		Set
			Dim previousValue As Sensores = Me._Sensores.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Sensores.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Sensores.Entity = Nothing
					previousValue.Sensores_Configurados.Remove(Me)
				End If
				Me._Sensores.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Sensores_Configurados.Add(Me)
					Me._sen_id = value.sen_id
				Else
					Me._sen_id = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Sensores")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Vehiculo_Sensores_Configurados", Storage:="_Vehiculo", ThisKey:="veh_id", OtherKey:="veh_id", IsForeignKey:=true)>  _
	Public Property Vehiculo() As Vehiculo
		Get
			Return Me._Vehiculo.Entity
		End Get
		Set
			Dim previousValue As Vehiculo = Me._Vehiculo.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Vehiculo.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Vehiculo.Entity = Nothing
					previousValue.Sensores_Configurados.Remove(Me)
				End If
				Me._Vehiculo.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Sensores_Configurados.Add(Me)
					Me._veh_id = value.veh_id
				Else
					Me._veh_id = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Vehiculo")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Sensores_Moviles")>  _
Partial Public Class Sensores_Moviles
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _sen_id As Integer
	
	Private _veh_id As Integer
	
	Private _enviar_sms As System.Nullable(Of Boolean)
	
	Private _Sensores As EntityRef(Of Sensores)
	
	Private _Vehiculo As EntityRef(Of Vehiculo)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub Onsen_idChanging(value As Integer)
    End Sub
    Partial Private Sub Onsen_idChanged()
    End Sub
    Partial Private Sub Onveh_idChanging(value As Integer)
    End Sub
    Partial Private Sub Onveh_idChanged()
    End Sub
    Partial Private Sub Onenviar_smsChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub Onenviar_smsChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Sensores = CType(Nothing, EntityRef(Of Sensores))
		Me._Vehiculo = CType(Nothing, EntityRef(Of Vehiculo))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_sen_id", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property sen_id() As Integer
		Get
			Return Me._sen_id
		End Get
		Set
			If ((Me._sen_id = value)  _
						= false) Then
				If Me._Sensores.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.Onsen_idChanging(value)
				Me.SendPropertyChanging
				Me._sen_id = value
				Me.SendPropertyChanged("sen_id")
				Me.Onsen_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_veh_id", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property veh_id() As Integer
		Get
			Return Me._veh_id
		End Get
		Set
			If ((Me._veh_id = value)  _
						= false) Then
				If Me._Vehiculo.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.Onveh_idChanging(value)
				Me.SendPropertyChanging
				Me._veh_id = value
				Me.SendPropertyChanged("veh_id")
				Me.Onveh_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_enviar_sms", DbType:="Bit")>  _
	Public Property enviar_sms() As System.Nullable(Of Boolean)
		Get
			Return Me._enviar_sms
		End Get
		Set
			If (Me._enviar_sms.Equals(value) = false) Then
				Me.Onenviar_smsChanging(value)
				Me.SendPropertyChanging
				Me._enviar_sms = value
				Me.SendPropertyChanged("enviar_sms")
				Me.Onenviar_smsChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Sensores_Sensores_Moviles", Storage:="_Sensores", ThisKey:="sen_id", OtherKey:="sen_id", IsForeignKey:=true)>  _
	Public Property Sensores() As Sensores
		Get
			Return Me._Sensores.Entity
		End Get
		Set
			Dim previousValue As Sensores = Me._Sensores.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Sensores.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Sensores.Entity = Nothing
					previousValue.Sensores_Moviles.Remove(Me)
				End If
				Me._Sensores.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Sensores_Moviles.Add(Me)
					Me._sen_id = value.sen_id
				Else
					Me._sen_id = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Sensores")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Vehiculo_Sensores_Moviles", Storage:="_Vehiculo", ThisKey:="veh_id", OtherKey:="veh_id", IsForeignKey:=true)>  _
	Public Property Vehiculo() As Vehiculo
		Get
			Return Me._Vehiculo.Entity
		End Get
		Set
			Dim previousValue As Vehiculo = Me._Vehiculo.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Vehiculo.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Vehiculo.Entity = Nothing
					previousValue.Sensores_Moviles.Remove(Me)
				End If
				Me._Vehiculo.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Sensores_Moviles.Add(Me)
					Me._veh_id = value.veh_id
				Else
					Me._veh_id = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Vehiculo")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Sensores")>  _
Partial Public Class Sensores
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _sen_id As Integer
	
	Private _sen_nombre As String
	
	Private _sen_posicion As Integer
	
	Private _sen_prioridad As Boolean
	
	Private _sen_binario As System.Nullable(Of Boolean)
	
	Private _sen_valor As String
	
	Private _sen_duracion As System.Nullable(Of Boolean)
	
	Private _sen_alarma As System.Nullable(Of Boolean)
	
	Private _Sensores_Configurados As EntitySet(Of Sensores_Configurados)
	
	Private _Sensores_Moviles As EntitySet(Of Sensores_Moviles)
	
	Private _Comandos As EntitySet(Of Comando)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub Onsen_idChanging(value As Integer)
    End Sub
    Partial Private Sub Onsen_idChanged()
    End Sub
    Partial Private Sub Onsen_nombreChanging(value As String)
    End Sub
    Partial Private Sub Onsen_nombreChanged()
    End Sub
    Partial Private Sub Onsen_posicionChanging(value As Integer)
    End Sub
    Partial Private Sub Onsen_posicionChanged()
    End Sub
    Partial Private Sub Onsen_prioridadChanging(value As Boolean)
    End Sub
    Partial Private Sub Onsen_prioridadChanged()
    End Sub
    Partial Private Sub Onsen_binarioChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub Onsen_binarioChanged()
    End Sub
    Partial Private Sub Onsen_valorChanging(value As String)
    End Sub
    Partial Private Sub Onsen_valorChanged()
    End Sub
    Partial Private Sub Onsen_duracionChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub Onsen_duracionChanged()
    End Sub
    Partial Private Sub Onsen_alarmaChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub Onsen_alarmaChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Sensores_Configurados = New EntitySet(Of Sensores_Configurados)(AddressOf Me.attach_Sensores_Configurados, AddressOf Me.detach_Sensores_Configurados)
		Me._Sensores_Moviles = New EntitySet(Of Sensores_Moviles)(AddressOf Me.attach_Sensores_Moviles, AddressOf Me.detach_Sensores_Moviles)
		Me._Comandos = New EntitySet(Of Comando)(AddressOf Me.attach_Comandos, AddressOf Me.detach_Comandos)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_sen_id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property sen_id() As Integer
		Get
			Return Me._sen_id
		End Get
		Set
			If ((Me._sen_id = value)  _
						= false) Then
				Me.Onsen_idChanging(value)
				Me.SendPropertyChanging
				Me._sen_id = value
				Me.SendPropertyChanged("sen_id")
				Me.Onsen_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_sen_nombre", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property sen_nombre() As String
		Get
			Return Me._sen_nombre
		End Get
		Set
			If (String.Equals(Me._sen_nombre, value) = false) Then
				Me.Onsen_nombreChanging(value)
				Me.SendPropertyChanging
				Me._sen_nombre = value
				Me.SendPropertyChanged("sen_nombre")
				Me.Onsen_nombreChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_sen_posicion", DbType:="Int NOT NULL")>  _
	Public Property sen_posicion() As Integer
		Get
			Return Me._sen_posicion
		End Get
		Set
			If ((Me._sen_posicion = value)  _
						= false) Then
				Me.Onsen_posicionChanging(value)
				Me.SendPropertyChanging
				Me._sen_posicion = value
				Me.SendPropertyChanged("sen_posicion")
				Me.Onsen_posicionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_sen_prioridad", DbType:="Bit NOT NULL")>  _
	Public Property sen_prioridad() As Boolean
		Get
			Return Me._sen_prioridad
		End Get
		Set
			If ((Me._sen_prioridad = value)  _
						= false) Then
				Me.Onsen_prioridadChanging(value)
				Me.SendPropertyChanging
				Me._sen_prioridad = value
				Me.SendPropertyChanged("sen_prioridad")
				Me.Onsen_prioridadChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_sen_binario", DbType:="Bit")>  _
	Public Property sen_binario() As System.Nullable(Of Boolean)
		Get
			Return Me._sen_binario
		End Get
		Set
			If (Me._sen_binario.Equals(value) = false) Then
				Me.Onsen_binarioChanging(value)
				Me.SendPropertyChanging
				Me._sen_binario = value
				Me.SendPropertyChanged("sen_binario")
				Me.Onsen_binarioChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_sen_valor", DbType:="VarChar(50)")>  _
	Public Property sen_valor() As String
		Get
			Return Me._sen_valor
		End Get
		Set
			If (String.Equals(Me._sen_valor, value) = false) Then
				Me.Onsen_valorChanging(value)
				Me.SendPropertyChanging
				Me._sen_valor = value
				Me.SendPropertyChanged("sen_valor")
				Me.Onsen_valorChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_sen_duracion", DbType:="Bit")>  _
	Public Property sen_duracion() As System.Nullable(Of Boolean)
		Get
			Return Me._sen_duracion
		End Get
		Set
			If (Me._sen_duracion.Equals(value) = false) Then
				Me.Onsen_duracionChanging(value)
				Me.SendPropertyChanging
				Me._sen_duracion = value
				Me.SendPropertyChanged("sen_duracion")
				Me.Onsen_duracionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_sen_alarma", DbType:="Bit")>  _
	Public Property sen_alarma() As System.Nullable(Of Boolean)
		Get
			Return Me._sen_alarma
		End Get
		Set
			If (Me._sen_alarma.Equals(value) = false) Then
				Me.Onsen_alarmaChanging(value)
				Me.SendPropertyChanging
				Me._sen_alarma = value
				Me.SendPropertyChanged("sen_alarma")
				Me.Onsen_alarmaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Sensores_Sensores_Configurados", Storage:="_Sensores_Configurados", ThisKey:="sen_id", OtherKey:="sen_id")>  _
	Public Property Sensores_Configurados() As EntitySet(Of Sensores_Configurados)
		Get
			Return Me._Sensores_Configurados
		End Get
		Set
			Me._Sensores_Configurados.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Sensores_Sensores_Moviles", Storage:="_Sensores_Moviles", ThisKey:="sen_id", OtherKey:="sen_id")>  _
	Public Property Sensores_Moviles() As EntitySet(Of Sensores_Moviles)
		Get
			Return Me._Sensores_Moviles
		End Get
		Set
			Me._Sensores_Moviles.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Sensores_Comando", Storage:="_Comandos", ThisKey:="sen_id", OtherKey:="sen_id")>  _
	Public Property Comandos() As EntitySet(Of Comando)
		Get
			Return Me._Comandos
		End Get
		Set
			Me._Comandos.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Sensores_Configurados(ByVal entity As Sensores_Configurados)
		Me.SendPropertyChanging
		entity.Sensores = Me
	End Sub
	
	Private Sub detach_Sensores_Configurados(ByVal entity As Sensores_Configurados)
		Me.SendPropertyChanging
		entity.Sensores = Nothing
	End Sub
	
	Private Sub attach_Sensores_Moviles(ByVal entity As Sensores_Moviles)
		Me.SendPropertyChanging
		entity.Sensores = Me
	End Sub
	
	Private Sub detach_Sensores_Moviles(ByVal entity As Sensores_Moviles)
		Me.SendPropertyChanging
		entity.Sensores = Nothing
	End Sub
	
	Private Sub attach_Comandos(ByVal entity As Comando)
		Me.SendPropertyChanging
		entity.Sensores = Me
	End Sub
	
	Private Sub detach_Comandos(ByVal entity As Comando)
		Me.SendPropertyChanging
		entity.Sensores = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Grupos")>  _
Partial Public Class Grupos
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _grup_id As Integer
	
	Private _grup_nombre As String
	
	Private _cli_id As Integer
	
	Private _Grupos_Vehiculos As EntitySet(Of Grupos_Vehiculos)
	
	Private _Cliente As EntityRef(Of Cliente)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub Ongrup_idChanging(value As Integer)
    End Sub
    Partial Private Sub Ongrup_idChanged()
    End Sub
    Partial Private Sub Ongrup_nombreChanging(value As String)
    End Sub
    Partial Private Sub Ongrup_nombreChanged()
    End Sub
    Partial Private Sub Oncli_idChanging(value As Integer)
    End Sub
    Partial Private Sub Oncli_idChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Grupos_Vehiculos = New EntitySet(Of Grupos_Vehiculos)(AddressOf Me.attach_Grupos_Vehiculos, AddressOf Me.detach_Grupos_Vehiculos)
		Me._Cliente = CType(Nothing, EntityRef(Of Cliente))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_grup_id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property grup_id() As Integer
		Get
			Return Me._grup_id
		End Get
		Set
			If ((Me._grup_id = value)  _
						= false) Then
				Me.Ongrup_idChanging(value)
				Me.SendPropertyChanging
				Me._grup_id = value
				Me.SendPropertyChanged("grup_id")
				Me.Ongrup_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_grup_nombre", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property grup_nombre() As String
		Get
			Return Me._grup_nombre
		End Get
		Set
			If (String.Equals(Me._grup_nombre, value) = false) Then
				Me.Ongrup_nombreChanging(value)
				Me.SendPropertyChanging
				Me._grup_nombre = value
				Me.SendPropertyChanged("grup_nombre")
				Me.Ongrup_nombreChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_cli_id", DbType:="Int NOT NULL")>  _
	Public Property cli_id() As Integer
		Get
			Return Me._cli_id
		End Get
		Set
			If ((Me._cli_id = value)  _
						= false) Then
				If Me._Cliente.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.Oncli_idChanging(value)
				Me.SendPropertyChanging
				Me._cli_id = value
				Me.SendPropertyChanged("cli_id")
				Me.Oncli_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Grupos_Grupos_Vehiculos", Storage:="_Grupos_Vehiculos", ThisKey:="grup_id", OtherKey:="grup_id")>  _
	Public Property Grupos_Vehiculos() As EntitySet(Of Grupos_Vehiculos)
		Get
			Return Me._Grupos_Vehiculos
		End Get
		Set
			Me._Grupos_Vehiculos.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Cliente_Grupos", Storage:="_Cliente", ThisKey:="cli_id", OtherKey:="cli_id", IsForeignKey:=true)>  _
	Public Property Cliente() As Cliente
		Get
			Return Me._Cliente.Entity
		End Get
		Set
			Dim previousValue As Cliente = Me._Cliente.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Cliente.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Cliente.Entity = Nothing
					previousValue.Grupos.Remove(Me)
				End If
				Me._Cliente.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Grupos.Add(Me)
					Me._cli_id = value.cli_id
				Else
					Me._cli_id = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Cliente")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Grupos_Vehiculos(ByVal entity As Grupos_Vehiculos)
		Me.SendPropertyChanging
		entity.Grupos = Me
	End Sub
	
	Private Sub detach_Grupos_Vehiculos(ByVal entity As Grupos_Vehiculos)
		Me.SendPropertyChanging
		entity.Grupos = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Grupos_Vehiculos")>  _
Partial Public Class Grupos_Vehiculos
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _grup_id As Integer
	
	Private _veh_id As Integer
	
	Private _Grupos As EntityRef(Of Grupos)
	
	Private _Vehiculo As EntityRef(Of Vehiculo)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub Ongrup_idChanging(value As Integer)
    End Sub
    Partial Private Sub Ongrup_idChanged()
    End Sub
    Partial Private Sub Onveh_idChanging(value As Integer)
    End Sub
    Partial Private Sub Onveh_idChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Grupos = CType(Nothing, EntityRef(Of Grupos))
		Me._Vehiculo = CType(Nothing, EntityRef(Of Vehiculo))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_grup_id", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property grup_id() As Integer
		Get
			Return Me._grup_id
		End Get
		Set
			If ((Me._grup_id = value)  _
						= false) Then
				If Me._Grupos.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.Ongrup_idChanging(value)
				Me.SendPropertyChanging
				Me._grup_id = value
				Me.SendPropertyChanged("grup_id")
				Me.Ongrup_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_veh_id", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property veh_id() As Integer
		Get
			Return Me._veh_id
		End Get
		Set
			If ((Me._veh_id = value)  _
						= false) Then
				If Me._Vehiculo.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.Onveh_idChanging(value)
				Me.SendPropertyChanging
				Me._veh_id = value
				Me.SendPropertyChanged("veh_id")
				Me.Onveh_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Grupos_Grupos_Vehiculos", Storage:="_Grupos", ThisKey:="grup_id", OtherKey:="grup_id", IsForeignKey:=true)>  _
	Public Property Grupos() As Grupos
		Get
			Return Me._Grupos.Entity
		End Get
		Set
			Dim previousValue As Grupos = Me._Grupos.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Grupos.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Grupos.Entity = Nothing
					previousValue.Grupos_Vehiculos.Remove(Me)
				End If
				Me._Grupos.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Grupos_Vehiculos.Add(Me)
					Me._grup_id = value.grup_id
				Else
					Me._grup_id = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Grupos")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Vehiculo_Grupos_Vehiculos", Storage:="_Vehiculo", ThisKey:="veh_id", OtherKey:="veh_id", IsForeignKey:=true)>  _
	Public Property Vehiculo() As Vehiculo
		Get
			Return Me._Vehiculo.Entity
		End Get
		Set
			Dim previousValue As Vehiculo = Me._Vehiculo.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Vehiculo.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Vehiculo.Entity = Nothing
					previousValue.Grupos_Vehiculos.Remove(Me)
				End If
				Me._Vehiculo.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Grupos_Vehiculos.Add(Me)
					Me._veh_id = value.veh_id
				Else
					Me._veh_id = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Vehiculo")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Tipos_Vehiculos")>  _
Partial Public Class Tipos_Vehiculos
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _veh_tipo_id As Integer
	
	Private _veh_tipo_detalle As String
	
	Private _veh_tipo_icono As String
	
	Private _Vehiculos As EntitySet(Of Vehiculo)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub Onveh_tipo_idChanging(value As Integer)
    End Sub
    Partial Private Sub Onveh_tipo_idChanged()
    End Sub
    Partial Private Sub Onveh_tipo_detalleChanging(value As String)
    End Sub
    Partial Private Sub Onveh_tipo_detalleChanged()
    End Sub
    Partial Private Sub Onveh_tipo_iconoChanging(value As String)
    End Sub
    Partial Private Sub Onveh_tipo_iconoChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Vehiculos = New EntitySet(Of Vehiculo)(AddressOf Me.attach_Vehiculos, AddressOf Me.detach_Vehiculos)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_veh_tipo_id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property veh_tipo_id() As Integer
		Get
			Return Me._veh_tipo_id
		End Get
		Set
			If ((Me._veh_tipo_id = value)  _
						= false) Then
				Me.Onveh_tipo_idChanging(value)
				Me.SendPropertyChanging
				Me._veh_tipo_id = value
				Me.SendPropertyChanged("veh_tipo_id")
				Me.Onveh_tipo_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_veh_tipo_detalle", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property veh_tipo_detalle() As String
		Get
			Return Me._veh_tipo_detalle
		End Get
		Set
			If (String.Equals(Me._veh_tipo_detalle, value) = false) Then
				Me.Onveh_tipo_detalleChanging(value)
				Me.SendPropertyChanging
				Me._veh_tipo_detalle = value
				Me.SendPropertyChanged("veh_tipo_detalle")
				Me.Onveh_tipo_detalleChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_veh_tipo_icono", DbType:="VarChar(50)")>  _
	Public Property veh_tipo_icono() As String
		Get
			Return Me._veh_tipo_icono
		End Get
		Set
			If (String.Equals(Me._veh_tipo_icono, value) = false) Then
				Me.Onveh_tipo_iconoChanging(value)
				Me.SendPropertyChanging
				Me._veh_tipo_icono = value
				Me.SendPropertyChanged("veh_tipo_icono")
				Me.Onveh_tipo_iconoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Tipos_Vehiculos_Vehiculo", Storage:="_Vehiculos", ThisKey:="veh_tipo_id", OtherKey:="veh_tipo_id")>  _
	Public Property Vehiculos() As EntitySet(Of Vehiculo)
		Get
			Return Me._Vehiculos
		End Get
		Set
			Me._Vehiculos.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Vehiculos(ByVal entity As Vehiculo)
		Me.SendPropertyChanging
		entity.Tipos_Vehiculos = Me
	End Sub
	
	Private Sub detach_Vehiculos(ByVal entity As Vehiculo)
		Me.SendPropertyChanging
		entity.Tipos_Vehiculos = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Modulos_Conexiones")>  _
Partial Public Class Modulos_Conexiones
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _con_id As Integer
	
	Private _con_fecha As Date
	
	Private _con_fecha_desconexion As System.Nullable(Of Date)
	
	Private _mod_id As String
	
	Private _con_terminal As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub Oncon_idChanging(value As Integer)
    End Sub
    Partial Private Sub Oncon_idChanged()
    End Sub
    Partial Private Sub Oncon_fechaChanging(value As Date)
    End Sub
    Partial Private Sub Oncon_fechaChanged()
    End Sub
    Partial Private Sub Oncon_fecha_desconexionChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub Oncon_fecha_desconexionChanged()
    End Sub
    Partial Private Sub Onmod_idChanging(value As String)
    End Sub
    Partial Private Sub Onmod_idChanged()
    End Sub
    Partial Private Sub Oncon_terminalChanging(value As String)
    End Sub
    Partial Private Sub Oncon_terminalChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_con_id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property con_id() As Integer
		Get
			Return Me._con_id
		End Get
		Set
			If ((Me._con_id = value)  _
						= false) Then
				Me.Oncon_idChanging(value)
				Me.SendPropertyChanging
				Me._con_id = value
				Me.SendPropertyChanged("con_id")
				Me.Oncon_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_con_fecha", DbType:="DateTime NOT NULL")>  _
	Public Property con_fecha() As Date
		Get
			Return Me._con_fecha
		End Get
		Set
			If ((Me._con_fecha = value)  _
						= false) Then
				Me.Oncon_fechaChanging(value)
				Me.SendPropertyChanging
				Me._con_fecha = value
				Me.SendPropertyChanged("con_fecha")
				Me.Oncon_fechaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_con_fecha_desconexion", DbType:="DateTime")>  _
	Public Property con_fecha_desconexion() As System.Nullable(Of Date)
		Get
			Return Me._con_fecha_desconexion
		End Get
		Set
			If (Me._con_fecha_desconexion.Equals(value) = false) Then
				Me.Oncon_fecha_desconexionChanging(value)
				Me.SendPropertyChanging
				Me._con_fecha_desconexion = value
				Me.SendPropertyChanged("con_fecha_desconexion")
				Me.Oncon_fecha_desconexionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_mod_id", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property mod_id() As String
		Get
			Return Me._mod_id
		End Get
		Set
			If (String.Equals(Me._mod_id, value) = false) Then
				Me.Onmod_idChanging(value)
				Me.SendPropertyChanging
				Me._mod_id = value
				Me.SendPropertyChanged("mod_id")
				Me.Onmod_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_con_terminal", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property con_terminal() As String
		Get
			Return Me._con_terminal
		End Get
		Set
			If (String.Equals(Me._con_terminal, value) = false) Then
				Me.Oncon_terminalChanging(value)
				Me.SendPropertyChanging
				Me._con_terminal = value
				Me.SendPropertyChanged("con_terminal")
				Me.Oncon_terminalChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Alertas_Recorridos")>  _
Partial Public Class Alertas_Recorridos
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _arec_id As Integer
	
	Private _veh_id As Integer
	
	Private _arec_enviar_mail As Boolean
	
	Private _arec_enviar_sms As Boolean
	
	Private _arec_fecha_desde As System.Nullable(Of Date)
	
	Private _arec_fecha_hasta As System.Nullable(Of Date)
	
	Private _arec_umbral_desvio As String
	
	Private _rec_id As Integer
	
	Private _arec_activa As System.Nullable(Of Boolean)
	
	Private _arec_no_deseado As System.Nullable(Of Boolean)
	
	Private _Alertas_Recorridos_Frecuencias As EntitySet(Of Alertas_Recorridos_Frecuencias)
	
	Private _Alertas_Recorrido_Puntos_Visitar As EntitySet(Of Alertas_Recorrido_Puntos_Visitar)
	
	Private _Recorridos As EntityRef(Of Recorridos)
	
	Private _Vehiculo As EntityRef(Of Vehiculo)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub Onarec_idChanging(value As Integer)
    End Sub
    Partial Private Sub Onarec_idChanged()
    End Sub
    Partial Private Sub Onveh_idChanging(value As Integer)
    End Sub
    Partial Private Sub Onveh_idChanged()
    End Sub
    Partial Private Sub Onarec_enviar_mailChanging(value As Boolean)
    End Sub
    Partial Private Sub Onarec_enviar_mailChanged()
    End Sub
    Partial Private Sub Onarec_enviar_smsChanging(value As Boolean)
    End Sub
    Partial Private Sub Onarec_enviar_smsChanged()
    End Sub
    Partial Private Sub Onarec_fecha_desdeChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub Onarec_fecha_desdeChanged()
    End Sub
    Partial Private Sub Onarec_fecha_hastaChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub Onarec_fecha_hastaChanged()
    End Sub
    Partial Private Sub Onarec_umbral_desvioChanging(value As String)
    End Sub
    Partial Private Sub Onarec_umbral_desvioChanged()
    End Sub
    Partial Private Sub Onrec_idChanging(value As Integer)
    End Sub
    Partial Private Sub Onrec_idChanged()
    End Sub
    Partial Private Sub Onarec_activaChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub Onarec_activaChanged()
    End Sub
    Partial Private Sub Onarec_no_deseadoChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub Onarec_no_deseadoChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Alertas_Recorridos_Frecuencias = New EntitySet(Of Alertas_Recorridos_Frecuencias)(AddressOf Me.attach_Alertas_Recorridos_Frecuencias, AddressOf Me.detach_Alertas_Recorridos_Frecuencias)
		Me._Alertas_Recorrido_Puntos_Visitar = New EntitySet(Of Alertas_Recorrido_Puntos_Visitar)(AddressOf Me.attach_Alertas_Recorrido_Puntos_Visitar, AddressOf Me.detach_Alertas_Recorrido_Puntos_Visitar)
		Me._Recorridos = CType(Nothing, EntityRef(Of Recorridos))
		Me._Vehiculo = CType(Nothing, EntityRef(Of Vehiculo))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_arec_id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property arec_id() As Integer
		Get
			Return Me._arec_id
		End Get
		Set
			If ((Me._arec_id = value)  _
						= false) Then
				Me.Onarec_idChanging(value)
				Me.SendPropertyChanging
				Me._arec_id = value
				Me.SendPropertyChanged("arec_id")
				Me.Onarec_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_veh_id", DbType:="Int NOT NULL")>  _
	Public Property veh_id() As Integer
		Get
			Return Me._veh_id
		End Get
		Set
			If ((Me._veh_id = value)  _
						= false) Then
				If Me._Vehiculo.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.Onveh_idChanging(value)
				Me.SendPropertyChanging
				Me._veh_id = value
				Me.SendPropertyChanged("veh_id")
				Me.Onveh_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_arec_enviar_mail", DbType:="Bit NOT NULL")>  _
	Public Property arec_enviar_mail() As Boolean
		Get
			Return Me._arec_enviar_mail
		End Get
		Set
			If ((Me._arec_enviar_mail = value)  _
						= false) Then
				Me.Onarec_enviar_mailChanging(value)
				Me.SendPropertyChanging
				Me._arec_enviar_mail = value
				Me.SendPropertyChanged("arec_enviar_mail")
				Me.Onarec_enviar_mailChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_arec_enviar_sms", DbType:="Bit NOT NULL")>  _
	Public Property arec_enviar_sms() As Boolean
		Get
			Return Me._arec_enviar_sms
		End Get
		Set
			If ((Me._arec_enviar_sms = value)  _
						= false) Then
				Me.Onarec_enviar_smsChanging(value)
				Me.SendPropertyChanging
				Me._arec_enviar_sms = value
				Me.SendPropertyChanged("arec_enviar_sms")
				Me.Onarec_enviar_smsChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_arec_fecha_desde", DbType:="DateTime")>  _
	Public Property arec_fecha_desde() As System.Nullable(Of Date)
		Get
			Return Me._arec_fecha_desde
		End Get
		Set
			If (Me._arec_fecha_desde.Equals(value) = false) Then
				Me.Onarec_fecha_desdeChanging(value)
				Me.SendPropertyChanging
				Me._arec_fecha_desde = value
				Me.SendPropertyChanged("arec_fecha_desde")
				Me.Onarec_fecha_desdeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_arec_fecha_hasta", DbType:="DateTime")>  _
	Public Property arec_fecha_hasta() As System.Nullable(Of Date)
		Get
			Return Me._arec_fecha_hasta
		End Get
		Set
			If (Me._arec_fecha_hasta.Equals(value) = false) Then
				Me.Onarec_fecha_hastaChanging(value)
				Me.SendPropertyChanging
				Me._arec_fecha_hasta = value
				Me.SendPropertyChanged("arec_fecha_hasta")
				Me.Onarec_fecha_hastaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_arec_umbral_desvio", DbType:="VarChar(50)")>  _
	Public Property arec_umbral_desvio() As String
		Get
			Return Me._arec_umbral_desvio
		End Get
		Set
			If (String.Equals(Me._arec_umbral_desvio, value) = false) Then
				Me.Onarec_umbral_desvioChanging(value)
				Me.SendPropertyChanging
				Me._arec_umbral_desvio = value
				Me.SendPropertyChanged("arec_umbral_desvio")
				Me.Onarec_umbral_desvioChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_rec_id", DbType:="Int NOT NULL")>  _
	Public Property rec_id() As Integer
		Get
			Return Me._rec_id
		End Get
		Set
			If ((Me._rec_id = value)  _
						= false) Then
				If Me._Recorridos.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.Onrec_idChanging(value)
				Me.SendPropertyChanging
				Me._rec_id = value
				Me.SendPropertyChanged("rec_id")
				Me.Onrec_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_arec_activa", DbType:="Bit")>  _
	Public Property arec_activa() As System.Nullable(Of Boolean)
		Get
			Return Me._arec_activa
		End Get
		Set
			If (Me._arec_activa.Equals(value) = false) Then
				Me.Onarec_activaChanging(value)
				Me.SendPropertyChanging
				Me._arec_activa = value
				Me.SendPropertyChanged("arec_activa")
				Me.Onarec_activaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_arec_no_deseado", DbType:="Bit")>  _
	Public Property arec_no_deseado() As System.Nullable(Of Boolean)
		Get
			Return Me._arec_no_deseado
		End Get
		Set
			If (Me._arec_no_deseado.Equals(value) = false) Then
				Me.Onarec_no_deseadoChanging(value)
				Me.SendPropertyChanging
				Me._arec_no_deseado = value
				Me.SendPropertyChanged("arec_no_deseado")
				Me.Onarec_no_deseadoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Alertas_Recorridos_Alertas_Recorridos_Frecuencias", Storage:="_Alertas_Recorridos_Frecuencias", ThisKey:="arec_id", OtherKey:="rec_id")>  _
	Public Property Alertas_Recorridos_Frecuencias() As EntitySet(Of Alertas_Recorridos_Frecuencias)
		Get
			Return Me._Alertas_Recorridos_Frecuencias
		End Get
		Set
			Me._Alertas_Recorridos_Frecuencias.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Alertas_Recorridos_Alertas_Recorrido_Puntos_Visitar", Storage:="_Alertas_Recorrido_Puntos_Visitar", ThisKey:="arec_id", OtherKey:="arec_id")>  _
	Public Property Alertas_Recorrido_Puntos_Visitar() As EntitySet(Of Alertas_Recorrido_Puntos_Visitar)
		Get
			Return Me._Alertas_Recorrido_Puntos_Visitar
		End Get
		Set
			Me._Alertas_Recorrido_Puntos_Visitar.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Recorridos_Alertas_Recorridos", Storage:="_Recorridos", ThisKey:="rec_id", OtherKey:="rec_id", IsForeignKey:=true)>  _
	Public Property Recorridos() As Recorridos
		Get
			Return Me._Recorridos.Entity
		End Get
		Set
			Dim previousValue As Recorridos = Me._Recorridos.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Recorridos.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Recorridos.Entity = Nothing
					previousValue.Alertas_Recorridos.Remove(Me)
				End If
				Me._Recorridos.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Alertas_Recorridos.Add(Me)
					Me._rec_id = value.rec_id
				Else
					Me._rec_id = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Recorridos")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Vehiculo_Alertas_Recorridos", Storage:="_Vehiculo", ThisKey:="veh_id", OtherKey:="veh_id", IsForeignKey:=true)>  _
	Public Property Vehiculo() As Vehiculo
		Get
			Return Me._Vehiculo.Entity
		End Get
		Set
			Dim previousValue As Vehiculo = Me._Vehiculo.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Vehiculo.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Vehiculo.Entity = Nothing
					previousValue.Alertas_Recorridos.Remove(Me)
				End If
				Me._Vehiculo.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Alertas_Recorridos.Add(Me)
					Me._veh_id = value.veh_id
				Else
					Me._veh_id = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Vehiculo")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Alertas_Recorridos_Frecuencias(ByVal entity As Alertas_Recorridos_Frecuencias)
		Me.SendPropertyChanging
		entity.Alertas_Recorridos = Me
	End Sub
	
	Private Sub detach_Alertas_Recorridos_Frecuencias(ByVal entity As Alertas_Recorridos_Frecuencias)
		Me.SendPropertyChanging
		entity.Alertas_Recorridos = Nothing
	End Sub
	
	Private Sub attach_Alertas_Recorrido_Puntos_Visitar(ByVal entity As Alertas_Recorrido_Puntos_Visitar)
		Me.SendPropertyChanging
		entity.Alertas_Recorridos = Me
	End Sub
	
	Private Sub detach_Alertas_Recorrido_Puntos_Visitar(ByVal entity As Alertas_Recorrido_Puntos_Visitar)
		Me.SendPropertyChanging
		entity.Alertas_Recorridos = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Alarmas_Fuera_Horario_Dias")>  _
Partial Public Class Alarmas_Fuera_Horario_Dias
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _alahd_id As Integer
	
	Private _alah_id As Integer
	
	Private _alah_dia_semana As Integer
	
	Private _Alarmas_Fuera_Horario As EntityRef(Of Alarmas_Fuera_Horario)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub Onalahd_idChanging(value As Integer)
    End Sub
    Partial Private Sub Onalahd_idChanged()
    End Sub
    Partial Private Sub Onalah_idChanging(value As Integer)
    End Sub
    Partial Private Sub Onalah_idChanged()
    End Sub
    Partial Private Sub Onalah_dia_semanaChanging(value As Integer)
    End Sub
    Partial Private Sub Onalah_dia_semanaChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Alarmas_Fuera_Horario = CType(Nothing, EntityRef(Of Alarmas_Fuera_Horario))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_alahd_id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property alahd_id() As Integer
		Get
			Return Me._alahd_id
		End Get
		Set
			If ((Me._alahd_id = value)  _
						= false) Then
				Me.Onalahd_idChanging(value)
				Me.SendPropertyChanging
				Me._alahd_id = value
				Me.SendPropertyChanged("alahd_id")
				Me.Onalahd_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_alah_id", DbType:="Int NOT NULL")>  _
	Public Property alah_id() As Integer
		Get
			Return Me._alah_id
		End Get
		Set
			If ((Me._alah_id = value)  _
						= false) Then
				If Me._Alarmas_Fuera_Horario.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.Onalah_idChanging(value)
				Me.SendPropertyChanging
				Me._alah_id = value
				Me.SendPropertyChanged("alah_id")
				Me.Onalah_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_alah_dia_semana", DbType:="Int NOT NULL")>  _
	Public Property alah_dia_semana() As Integer
		Get
			Return Me._alah_dia_semana
		End Get
		Set
			If ((Me._alah_dia_semana = value)  _
						= false) Then
				Me.Onalah_dia_semanaChanging(value)
				Me.SendPropertyChanging
				Me._alah_dia_semana = value
				Me.SendPropertyChanged("alah_dia_semana")
				Me.Onalah_dia_semanaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Alarmas_Fuera_Horario_Alarmas_Fuera_Horario_Dias", Storage:="_Alarmas_Fuera_Horario", ThisKey:="alah_id", OtherKey:="alah_id", IsForeignKey:=true)>  _
	Public Property Alarmas_Fuera_Horario() As Alarmas_Fuera_Horario
		Get
			Return Me._Alarmas_Fuera_Horario.Entity
		End Get
		Set
			Dim previousValue As Alarmas_Fuera_Horario = Me._Alarmas_Fuera_Horario.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Alarmas_Fuera_Horario.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Alarmas_Fuera_Horario.Entity = Nothing
					previousValue.Alarmas_Fuera_Horario_Dias.Remove(Me)
				End If
				Me._Alarmas_Fuera_Horario.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Alarmas_Fuera_Horario_Dias.Add(Me)
					Me._alah_id = value.alah_id
				Else
					Me._alah_id = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Alarmas_Fuera_Horario")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Alarmas_Fuera_Horario")>  _
Partial Public Class Alarmas_Fuera_Horario
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _alah_id As Integer
	
	Private _veh_id As Integer
	
	Private _alah_horadesde As String
	
	Private _alah_horahasta As String
	
	Private _alah_descripcion As String
	
	Private _alah_fechadesde As String
	
	Private _alah_fechahasta As String
	
	Private _alah_velocidad_minima As Integer
	
	Private _alah_tiempo_minimo As Integer
	
	Private _alah_enviar_mail As System.Nullable(Of Boolean)
	
	Private _alah_enviar_sms As System.Nullable(Of Boolean)
	
	Private _Alarmas_Fuera_Horario_Dias As EntitySet(Of Alarmas_Fuera_Horario_Dias)
	
	Private _Vehiculo As EntityRef(Of Vehiculo)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub Onalah_idChanging(value As Integer)
    End Sub
    Partial Private Sub Onalah_idChanged()
    End Sub
    Partial Private Sub Onveh_idChanging(value As Integer)
    End Sub
    Partial Private Sub Onveh_idChanged()
    End Sub
    Partial Private Sub Onalah_horadesdeChanging(value As String)
    End Sub
    Partial Private Sub Onalah_horadesdeChanged()
    End Sub
    Partial Private Sub Onalah_horahastaChanging(value As String)
    End Sub
    Partial Private Sub Onalah_horahastaChanged()
    End Sub
    Partial Private Sub Onalah_descripcionChanging(value As String)
    End Sub
    Partial Private Sub Onalah_descripcionChanged()
    End Sub
    Partial Private Sub Onalah_fechadesdeChanging(value As String)
    End Sub
    Partial Private Sub Onalah_fechadesdeChanged()
    End Sub
    Partial Private Sub Onalah_fechahastaChanging(value As String)
    End Sub
    Partial Private Sub Onalah_fechahastaChanged()
    End Sub
    Partial Private Sub Onalah_velocidad_minimaChanging(value As Integer)
    End Sub
    Partial Private Sub Onalah_velocidad_minimaChanged()
    End Sub
    Partial Private Sub Onalah_tiempo_minimoChanging(value As Integer)
    End Sub
    Partial Private Sub Onalah_tiempo_minimoChanged()
    End Sub
    Partial Private Sub Onalah_enviar_mailChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub Onalah_enviar_mailChanged()
    End Sub
    Partial Private Sub Onalah_enviar_smsChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub Onalah_enviar_smsChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Alarmas_Fuera_Horario_Dias = New EntitySet(Of Alarmas_Fuera_Horario_Dias)(AddressOf Me.attach_Alarmas_Fuera_Horario_Dias, AddressOf Me.detach_Alarmas_Fuera_Horario_Dias)
		Me._Vehiculo = CType(Nothing, EntityRef(Of Vehiculo))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_alah_id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property alah_id() As Integer
		Get
			Return Me._alah_id
		End Get
		Set
			If ((Me._alah_id = value)  _
						= false) Then
				Me.Onalah_idChanging(value)
				Me.SendPropertyChanging
				Me._alah_id = value
				Me.SendPropertyChanged("alah_id")
				Me.Onalah_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_veh_id", DbType:="Int NOT NULL")>  _
	Public Property veh_id() As Integer
		Get
			Return Me._veh_id
		End Get
		Set
			If ((Me._veh_id = value)  _
						= false) Then
				If Me._Vehiculo.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.Onveh_idChanging(value)
				Me.SendPropertyChanging
				Me._veh_id = value
				Me.SendPropertyChanged("veh_id")
				Me.Onveh_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_alah_horadesde", DbType:="VarChar(20) NOT NULL", CanBeNull:=false)>  _
	Public Property alah_horadesde() As String
		Get
			Return Me._alah_horadesde
		End Get
		Set
			If (String.Equals(Me._alah_horadesde, value) = false) Then
				Me.Onalah_horadesdeChanging(value)
				Me.SendPropertyChanging
				Me._alah_horadesde = value
				Me.SendPropertyChanged("alah_horadesde")
				Me.Onalah_horadesdeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_alah_horahasta", DbType:="VarChar(20) NOT NULL", CanBeNull:=false)>  _
	Public Property alah_horahasta() As String
		Get
			Return Me._alah_horahasta
		End Get
		Set
			If (String.Equals(Me._alah_horahasta, value) = false) Then
				Me.Onalah_horahastaChanging(value)
				Me.SendPropertyChanging
				Me._alah_horahasta = value
				Me.SendPropertyChanged("alah_horahasta")
				Me.Onalah_horahastaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_alah_descripcion", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property alah_descripcion() As String
		Get
			Return Me._alah_descripcion
		End Get
		Set
			If (String.Equals(Me._alah_descripcion, value) = false) Then
				Me.Onalah_descripcionChanging(value)
				Me.SendPropertyChanging
				Me._alah_descripcion = value
				Me.SendPropertyChanged("alah_descripcion")
				Me.Onalah_descripcionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_alah_fechadesde", DbType:="VarChar(10) NOT NULL", CanBeNull:=false)>  _
	Public Property alah_fechadesde() As String
		Get
			Return Me._alah_fechadesde
		End Get
		Set
			If (String.Equals(Me._alah_fechadesde, value) = false) Then
				Me.Onalah_fechadesdeChanging(value)
				Me.SendPropertyChanging
				Me._alah_fechadesde = value
				Me.SendPropertyChanged("alah_fechadesde")
				Me.Onalah_fechadesdeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_alah_fechahasta", DbType:="VarChar(10) NOT NULL", CanBeNull:=false)>  _
	Public Property alah_fechahasta() As String
		Get
			Return Me._alah_fechahasta
		End Get
		Set
			If (String.Equals(Me._alah_fechahasta, value) = false) Then
				Me.Onalah_fechahastaChanging(value)
				Me.SendPropertyChanging
				Me._alah_fechahasta = value
				Me.SendPropertyChanged("alah_fechahasta")
				Me.Onalah_fechahastaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_alah_velocidad_minima", DbType:="Int NOT NULL")>  _
	Public Property alah_velocidad_minima() As Integer
		Get
			Return Me._alah_velocidad_minima
		End Get
		Set
			If ((Me._alah_velocidad_minima = value)  _
						= false) Then
				Me.Onalah_velocidad_minimaChanging(value)
				Me.SendPropertyChanging
				Me._alah_velocidad_minima = value
				Me.SendPropertyChanged("alah_velocidad_minima")
				Me.Onalah_velocidad_minimaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_alah_tiempo_minimo", DbType:="Int NOT NULL")>  _
	Public Property alah_tiempo_minimo() As Integer
		Get
			Return Me._alah_tiempo_minimo
		End Get
		Set
			If ((Me._alah_tiempo_minimo = value)  _
						= false) Then
				Me.Onalah_tiempo_minimoChanging(value)
				Me.SendPropertyChanging
				Me._alah_tiempo_minimo = value
				Me.SendPropertyChanged("alah_tiempo_minimo")
				Me.Onalah_tiempo_minimoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_alah_enviar_mail", DbType:="Bit")>  _
	Public Property alah_enviar_mail() As System.Nullable(Of Boolean)
		Get
			Return Me._alah_enviar_mail
		End Get
		Set
			If (Me._alah_enviar_mail.Equals(value) = false) Then
				Me.Onalah_enviar_mailChanging(value)
				Me.SendPropertyChanging
				Me._alah_enviar_mail = value
				Me.SendPropertyChanged("alah_enviar_mail")
				Me.Onalah_enviar_mailChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_alah_enviar_sms", DbType:="Bit")>  _
	Public Property alah_enviar_sms() As System.Nullable(Of Boolean)
		Get
			Return Me._alah_enviar_sms
		End Get
		Set
			If (Me._alah_enviar_sms.Equals(value) = false) Then
				Me.Onalah_enviar_smsChanging(value)
				Me.SendPropertyChanging
				Me._alah_enviar_sms = value
				Me.SendPropertyChanged("alah_enviar_sms")
				Me.Onalah_enviar_smsChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Alarmas_Fuera_Horario_Alarmas_Fuera_Horario_Dias", Storage:="_Alarmas_Fuera_Horario_Dias", ThisKey:="alah_id", OtherKey:="alah_id")>  _
	Public Property Alarmas_Fuera_Horario_Dias() As EntitySet(Of Alarmas_Fuera_Horario_Dias)
		Get
			Return Me._Alarmas_Fuera_Horario_Dias
		End Get
		Set
			Me._Alarmas_Fuera_Horario_Dias.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Vehiculo_Alarmas_Fuera_Horario", Storage:="_Vehiculo", ThisKey:="veh_id", OtherKey:="veh_id", IsForeignKey:=true)>  _
	Public Property Vehiculo() As Vehiculo
		Get
			Return Me._Vehiculo.Entity
		End Get
		Set
			Dim previousValue As Vehiculo = Me._Vehiculo.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Vehiculo.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Vehiculo.Entity = Nothing
					previousValue.Alarmas_Fuera_Horarios.Remove(Me)
				End If
				Me._Vehiculo.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Alarmas_Fuera_Horarios.Add(Me)
					Me._veh_id = value.veh_id
				Else
					Me._veh_id = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Vehiculo")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Alarmas_Fuera_Horario_Dias(ByVal entity As Alarmas_Fuera_Horario_Dias)
		Me.SendPropertyChanging
		entity.Alarmas_Fuera_Horario = Me
	End Sub
	
	Private Sub detach_Alarmas_Fuera_Horario_Dias(ByVal entity As Alarmas_Fuera_Horario_Dias)
		Me.SendPropertyChanging
		entity.Alarmas_Fuera_Horario = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Alarma_Inicio_Actividad")>  _
Partial Public Class Alarma_Inicio_Actividad
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _alaric_id As Integer
	
	Private _alaric_descripcion As String
	
	Private _alar_horainicio As String
	
	Private _veh_id As Integer
	
	Private _alar_enviar_mail As Boolean
	
	Private _alaric_inicio_anteshorario As Boolean
	
	Private _Alarmas_Inicio_Actividad_Dias As EntitySet(Of Alarmas_Inicio_Actividad_Dias)
	
	Private _Vehiculo As EntityRef(Of Vehiculo)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub Onalaric_idChanging(value As Integer)
    End Sub
    Partial Private Sub Onalaric_idChanged()
    End Sub
    Partial Private Sub Onalaric_descripcionChanging(value As String)
    End Sub
    Partial Private Sub Onalaric_descripcionChanged()
    End Sub
    Partial Private Sub Onalar_horainicioChanging(value As String)
    End Sub
    Partial Private Sub Onalar_horainicioChanged()
    End Sub
    Partial Private Sub Onveh_idChanging(value As Integer)
    End Sub
    Partial Private Sub Onveh_idChanged()
    End Sub
    Partial Private Sub Onalar_enviar_mailChanging(value As Boolean)
    End Sub
    Partial Private Sub Onalar_enviar_mailChanged()
    End Sub
    Partial Private Sub Onalaric_inicio_anteshorarioChanging(value As Boolean)
    End Sub
    Partial Private Sub Onalaric_inicio_anteshorarioChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Alarmas_Inicio_Actividad_Dias = New EntitySet(Of Alarmas_Inicio_Actividad_Dias)(AddressOf Me.attach_Alarmas_Inicio_Actividad_Dias, AddressOf Me.detach_Alarmas_Inicio_Actividad_Dias)
		Me._Vehiculo = CType(Nothing, EntityRef(Of Vehiculo))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_alaric_id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property alaric_id() As Integer
		Get
			Return Me._alaric_id
		End Get
		Set
			If ((Me._alaric_id = value)  _
						= false) Then
				Me.Onalaric_idChanging(value)
				Me.SendPropertyChanging
				Me._alaric_id = value
				Me.SendPropertyChanged("alaric_id")
				Me.Onalaric_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_alaric_descripcion", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property alaric_descripcion() As String
		Get
			Return Me._alaric_descripcion
		End Get
		Set
			If (String.Equals(Me._alaric_descripcion, value) = false) Then
				Me.Onalaric_descripcionChanging(value)
				Me.SendPropertyChanging
				Me._alaric_descripcion = value
				Me.SendPropertyChanged("alaric_descripcion")
				Me.Onalaric_descripcionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_alar_horainicio", DbType:="VarChar(10) NOT NULL", CanBeNull:=false)>  _
	Public Property alar_horainicio() As String
		Get
			Return Me._alar_horainicio
		End Get
		Set
			If (String.Equals(Me._alar_horainicio, value) = false) Then
				Me.Onalar_horainicioChanging(value)
				Me.SendPropertyChanging
				Me._alar_horainicio = value
				Me.SendPropertyChanged("alar_horainicio")
				Me.Onalar_horainicioChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_veh_id", DbType:="Int NOT NULL")>  _
	Public Property veh_id() As Integer
		Get
			Return Me._veh_id
		End Get
		Set
			If ((Me._veh_id = value)  _
						= false) Then
				If Me._Vehiculo.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.Onveh_idChanging(value)
				Me.SendPropertyChanging
				Me._veh_id = value
				Me.SendPropertyChanged("veh_id")
				Me.Onveh_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_alar_enviar_mail", DbType:="Bit NOT NULL")>  _
	Public Property alar_enviar_mail() As Boolean
		Get
			Return Me._alar_enviar_mail
		End Get
		Set
			If ((Me._alar_enviar_mail = value)  _
						= false) Then
				Me.Onalar_enviar_mailChanging(value)
				Me.SendPropertyChanging
				Me._alar_enviar_mail = value
				Me.SendPropertyChanged("alar_enviar_mail")
				Me.Onalar_enviar_mailChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_alaric_inicio_anteshorario", DbType:="Bit NOT NULL")>  _
	Public Property alaric_inicio_anteshorario() As Boolean
		Get
			Return Me._alaric_inicio_anteshorario
		End Get
		Set
			If ((Me._alaric_inicio_anteshorario = value)  _
						= false) Then
				Me.Onalaric_inicio_anteshorarioChanging(value)
				Me.SendPropertyChanging
				Me._alaric_inicio_anteshorario = value
				Me.SendPropertyChanged("alaric_inicio_anteshorario")
				Me.Onalaric_inicio_anteshorarioChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Alarma_Inicio_Actividad_Alarmas_Inicio_Actividad_Dias", Storage:="_Alarmas_Inicio_Actividad_Dias", ThisKey:="alaric_id", OtherKey:="alaric_id")>  _
	Public Property Alarmas_Inicio_Actividad_Dias() As EntitySet(Of Alarmas_Inicio_Actividad_Dias)
		Get
			Return Me._Alarmas_Inicio_Actividad_Dias
		End Get
		Set
			Me._Alarmas_Inicio_Actividad_Dias.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Vehiculo_Alarma_Inicio_Actividad", Storage:="_Vehiculo", ThisKey:="veh_id", OtherKey:="veh_id", IsForeignKey:=true)>  _
	Public Property Vehiculo() As Vehiculo
		Get
			Return Me._Vehiculo.Entity
		End Get
		Set
			Dim previousValue As Vehiculo = Me._Vehiculo.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Vehiculo.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Vehiculo.Entity = Nothing
					previousValue.Alarma_Inicio_Actividads.Remove(Me)
				End If
				Me._Vehiculo.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Alarma_Inicio_Actividads.Add(Me)
					Me._veh_id = value.veh_id
				Else
					Me._veh_id = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Vehiculo")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Alarmas_Inicio_Actividad_Dias(ByVal entity As Alarmas_Inicio_Actividad_Dias)
		Me.SendPropertyChanging
		entity.Alarma_Inicio_Actividad = Me
	End Sub
	
	Private Sub detach_Alarmas_Inicio_Actividad_Dias(ByVal entity As Alarmas_Inicio_Actividad_Dias)
		Me.SendPropertyChanging
		entity.Alarma_Inicio_Actividad = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Alarmas_Inicio_Actividad_Dias")>  _
Partial Public Class Alarmas_Inicio_Actividad_Dias
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _alaricd_id As Integer
	
	Private _alaric_id As Integer
	
	Private _alaricd_dia_semana As Integer
	
	Private _Alarma_Inicio_Actividad As EntityRef(Of Alarma_Inicio_Actividad)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub Onalaricd_idChanging(value As Integer)
    End Sub
    Partial Private Sub Onalaricd_idChanged()
    End Sub
    Partial Private Sub Onalaric_idChanging(value As Integer)
    End Sub
    Partial Private Sub Onalaric_idChanged()
    End Sub
    Partial Private Sub Onalaricd_dia_semanaChanging(value As Integer)
    End Sub
    Partial Private Sub Onalaricd_dia_semanaChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Alarma_Inicio_Actividad = CType(Nothing, EntityRef(Of Alarma_Inicio_Actividad))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_alaricd_id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property alaricd_id() As Integer
		Get
			Return Me._alaricd_id
		End Get
		Set
			If ((Me._alaricd_id = value)  _
						= false) Then
				Me.Onalaricd_idChanging(value)
				Me.SendPropertyChanging
				Me._alaricd_id = value
				Me.SendPropertyChanged("alaricd_id")
				Me.Onalaricd_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_alaric_id", DbType:="Int NOT NULL")>  _
	Public Property alaric_id() As Integer
		Get
			Return Me._alaric_id
		End Get
		Set
			If ((Me._alaric_id = value)  _
						= false) Then
				If Me._Alarma_Inicio_Actividad.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.Onalaric_idChanging(value)
				Me.SendPropertyChanging
				Me._alaric_id = value
				Me.SendPropertyChanged("alaric_id")
				Me.Onalaric_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_alaricd_dia_semana", DbType:="Int NOT NULL")>  _
	Public Property alaricd_dia_semana() As Integer
		Get
			Return Me._alaricd_dia_semana
		End Get
		Set
			If ((Me._alaricd_dia_semana = value)  _
						= false) Then
				Me.Onalaricd_dia_semanaChanging(value)
				Me.SendPropertyChanging
				Me._alaricd_dia_semana = value
				Me.SendPropertyChanged("alaricd_dia_semana")
				Me.Onalaricd_dia_semanaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Alarma_Inicio_Actividad_Alarmas_Inicio_Actividad_Dias", Storage:="_Alarma_Inicio_Actividad", ThisKey:="alaric_id", OtherKey:="alaric_id", IsForeignKey:=true)>  _
	Public Property Alarma_Inicio_Actividad() As Alarma_Inicio_Actividad
		Get
			Return Me._Alarma_Inicio_Actividad.Entity
		End Get
		Set
			Dim previousValue As Alarma_Inicio_Actividad = Me._Alarma_Inicio_Actividad.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Alarma_Inicio_Actividad.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Alarma_Inicio_Actividad.Entity = Nothing
					previousValue.Alarmas_Inicio_Actividad_Dias.Remove(Me)
				End If
				Me._Alarma_Inicio_Actividad.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Alarmas_Inicio_Actividad_Dias.Add(Me)
					Me._alaric_id = value.alaric_id
				Else
					Me._alaric_id = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Alarma_Inicio_Actividad")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Alarmas_Inactividad_Dias")>  _
Partial Public Class Alarmas_Inactividad_Dias
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _alarid_id As Integer
	
	Private _alari_id As Integer
	
	Private _alari_dia_semana As Integer
	
	Private _Alarmas_Inactividad As EntityRef(Of Alarmas_Inactividad)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub Onalarid_idChanging(value As Integer)
    End Sub
    Partial Private Sub Onalarid_idChanged()
    End Sub
    Partial Private Sub Onalari_idChanging(value As Integer)
    End Sub
    Partial Private Sub Onalari_idChanged()
    End Sub
    Partial Private Sub Onalari_dia_semanaChanging(value As Integer)
    End Sub
    Partial Private Sub Onalari_dia_semanaChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Alarmas_Inactividad = CType(Nothing, EntityRef(Of Alarmas_Inactividad))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_alarid_id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property alarid_id() As Integer
		Get
			Return Me._alarid_id
		End Get
		Set
			If ((Me._alarid_id = value)  _
						= false) Then
				Me.Onalarid_idChanging(value)
				Me.SendPropertyChanging
				Me._alarid_id = value
				Me.SendPropertyChanged("alarid_id")
				Me.Onalarid_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_alari_id", DbType:="Int NOT NULL")>  _
	Public Property alari_id() As Integer
		Get
			Return Me._alari_id
		End Get
		Set
			If ((Me._alari_id = value)  _
						= false) Then
				If Me._Alarmas_Inactividad.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.Onalari_idChanging(value)
				Me.SendPropertyChanging
				Me._alari_id = value
				Me.SendPropertyChanged("alari_id")
				Me.Onalari_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_alari_dia_semana", DbType:="Int NOT NULL")>  _
	Public Property alari_dia_semana() As Integer
		Get
			Return Me._alari_dia_semana
		End Get
		Set
			If ((Me._alari_dia_semana = value)  _
						= false) Then
				Me.Onalari_dia_semanaChanging(value)
				Me.SendPropertyChanging
				Me._alari_dia_semana = value
				Me.SendPropertyChanged("alari_dia_semana")
				Me.Onalari_dia_semanaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Alarmas_Inactividad_Alarmas_Inactividad_Dias", Storage:="_Alarmas_Inactividad", ThisKey:="alari_id", OtherKey:="alari_id", IsForeignKey:=true)>  _
	Public Property Alarmas_Inactividad() As Alarmas_Inactividad
		Get
			Return Me._Alarmas_Inactividad.Entity
		End Get
		Set
			Dim previousValue As Alarmas_Inactividad = Me._Alarmas_Inactividad.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Alarmas_Inactividad.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Alarmas_Inactividad.Entity = Nothing
					previousValue.Alarmas_Inactividad_Dias.Remove(Me)
				End If
				Me._Alarmas_Inactividad.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Alarmas_Inactividad_Dias.Add(Me)
					Me._alari_id = value.alari_id
				Else
					Me._alari_id = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Alarmas_Inactividad")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Alarmas_Inactividad")>  _
Partial Public Class Alarmas_Inactividad
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _alari_id As Integer
	
	Private _veh_id As Integer
	
	Private _alari_descripcion As String
	
	Private _alari_horadesde As String
	
	Private _alari_horahasta As String
	
	Private _alari_fechadesde As String
	
	Private _alari_fechahasta As String
	
	Private _alah_velocidad_minima As Integer
	
	Private _alari_tiempo_minimo As Integer
	
	Private _alari_enviar_mail As Boolean
	
	Private _alari_enviar_sms As Boolean
	
	Private _Alarmas_Inactividad_Dias As EntitySet(Of Alarmas_Inactividad_Dias)
	
	Private _Vehiculo As EntityRef(Of Vehiculo)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub Onalari_idChanging(value As Integer)
    End Sub
    Partial Private Sub Onalari_idChanged()
    End Sub
    Partial Private Sub Onveh_idChanging(value As Integer)
    End Sub
    Partial Private Sub Onveh_idChanged()
    End Sub
    Partial Private Sub Onalari_descripcionChanging(value As String)
    End Sub
    Partial Private Sub Onalari_descripcionChanged()
    End Sub
    Partial Private Sub Onalari_horadesdeChanging(value As String)
    End Sub
    Partial Private Sub Onalari_horadesdeChanged()
    End Sub
    Partial Private Sub Onalari_horahastaChanging(value As String)
    End Sub
    Partial Private Sub Onalari_horahastaChanged()
    End Sub
    Partial Private Sub Onalari_fechadesdeChanging(value As String)
    End Sub
    Partial Private Sub Onalari_fechadesdeChanged()
    End Sub
    Partial Private Sub Onalari_fechahastaChanging(value As String)
    End Sub
    Partial Private Sub Onalari_fechahastaChanged()
    End Sub
    Partial Private Sub Onalah_velocidad_minimaChanging(value As Integer)
    End Sub
    Partial Private Sub Onalah_velocidad_minimaChanged()
    End Sub
    Partial Private Sub Onalari_tiempo_minimoChanging(value As Integer)
    End Sub
    Partial Private Sub Onalari_tiempo_minimoChanged()
    End Sub
    Partial Private Sub Onalari_enviar_mailChanging(value As Boolean)
    End Sub
    Partial Private Sub Onalari_enviar_mailChanged()
    End Sub
    Partial Private Sub Onalari_enviar_smsChanging(value As Boolean)
    End Sub
    Partial Private Sub Onalari_enviar_smsChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Alarmas_Inactividad_Dias = New EntitySet(Of Alarmas_Inactividad_Dias)(AddressOf Me.attach_Alarmas_Inactividad_Dias, AddressOf Me.detach_Alarmas_Inactividad_Dias)
		Me._Vehiculo = CType(Nothing, EntityRef(Of Vehiculo))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_alari_id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property alari_id() As Integer
		Get
			Return Me._alari_id
		End Get
		Set
			If ((Me._alari_id = value)  _
						= false) Then
				Me.Onalari_idChanging(value)
				Me.SendPropertyChanging
				Me._alari_id = value
				Me.SendPropertyChanged("alari_id")
				Me.Onalari_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_veh_id", DbType:="Int NOT NULL")>  _
	Public Property veh_id() As Integer
		Get
			Return Me._veh_id
		End Get
		Set
			If ((Me._veh_id = value)  _
						= false) Then
				If Me._Vehiculo.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.Onveh_idChanging(value)
				Me.SendPropertyChanging
				Me._veh_id = value
				Me.SendPropertyChanged("veh_id")
				Me.Onveh_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_alari_descripcion", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property alari_descripcion() As String
		Get
			Return Me._alari_descripcion
		End Get
		Set
			If (String.Equals(Me._alari_descripcion, value) = false) Then
				Me.Onalari_descripcionChanging(value)
				Me.SendPropertyChanging
				Me._alari_descripcion = value
				Me.SendPropertyChanged("alari_descripcion")
				Me.Onalari_descripcionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_alari_horadesde", DbType:="VarChar(10) NOT NULL", CanBeNull:=false)>  _
	Public Property alari_horadesde() As String
		Get
			Return Me._alari_horadesde
		End Get
		Set
			If (String.Equals(Me._alari_horadesde, value) = false) Then
				Me.Onalari_horadesdeChanging(value)
				Me.SendPropertyChanging
				Me._alari_horadesde = value
				Me.SendPropertyChanged("alari_horadesde")
				Me.Onalari_horadesdeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_alari_horahasta", DbType:="VarChar(10) NOT NULL", CanBeNull:=false)>  _
	Public Property alari_horahasta() As String
		Get
			Return Me._alari_horahasta
		End Get
		Set
			If (String.Equals(Me._alari_horahasta, value) = false) Then
				Me.Onalari_horahastaChanging(value)
				Me.SendPropertyChanging
				Me._alari_horahasta = value
				Me.SendPropertyChanged("alari_horahasta")
				Me.Onalari_horahastaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_alari_fechadesde", DbType:="VarChar(10) NOT NULL", CanBeNull:=false)>  _
	Public Property alari_fechadesde() As String
		Get
			Return Me._alari_fechadesde
		End Get
		Set
			If (String.Equals(Me._alari_fechadesde, value) = false) Then
				Me.Onalari_fechadesdeChanging(value)
				Me.SendPropertyChanging
				Me._alari_fechadesde = value
				Me.SendPropertyChanged("alari_fechadesde")
				Me.Onalari_fechadesdeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_alari_fechahasta", DbType:="VarChar(10) NOT NULL", CanBeNull:=false)>  _
	Public Property alari_fechahasta() As String
		Get
			Return Me._alari_fechahasta
		End Get
		Set
			If (String.Equals(Me._alari_fechahasta, value) = false) Then
				Me.Onalari_fechahastaChanging(value)
				Me.SendPropertyChanging
				Me._alari_fechahasta = value
				Me.SendPropertyChanged("alari_fechahasta")
				Me.Onalari_fechahastaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_alah_velocidad_minima", DbType:="Int NOT NULL")>  _
	Public Property alah_velocidad_minima() As Integer
		Get
			Return Me._alah_velocidad_minima
		End Get
		Set
			If ((Me._alah_velocidad_minima = value)  _
						= false) Then
				Me.Onalah_velocidad_minimaChanging(value)
				Me.SendPropertyChanging
				Me._alah_velocidad_minima = value
				Me.SendPropertyChanged("alah_velocidad_minima")
				Me.Onalah_velocidad_minimaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_alari_tiempo_minimo", DbType:="Int NOT NULL")>  _
	Public Property alari_tiempo_minimo() As Integer
		Get
			Return Me._alari_tiempo_minimo
		End Get
		Set
			If ((Me._alari_tiempo_minimo = value)  _
						= false) Then
				Me.Onalari_tiempo_minimoChanging(value)
				Me.SendPropertyChanging
				Me._alari_tiempo_minimo = value
				Me.SendPropertyChanged("alari_tiempo_minimo")
				Me.Onalari_tiempo_minimoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_alari_enviar_mail", DbType:="Bit NOT NULL")>  _
	Public Property alari_enviar_mail() As Boolean
		Get
			Return Me._alari_enviar_mail
		End Get
		Set
			If ((Me._alari_enviar_mail = value)  _
						= false) Then
				Me.Onalari_enviar_mailChanging(value)
				Me.SendPropertyChanging
				Me._alari_enviar_mail = value
				Me.SendPropertyChanged("alari_enviar_mail")
				Me.Onalari_enviar_mailChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_alari_enviar_sms", DbType:="Bit NOT NULL")>  _
	Public Property alari_enviar_sms() As Boolean
		Get
			Return Me._alari_enviar_sms
		End Get
		Set
			If ((Me._alari_enviar_sms = value)  _
						= false) Then
				Me.Onalari_enviar_smsChanging(value)
				Me.SendPropertyChanging
				Me._alari_enviar_sms = value
				Me.SendPropertyChanged("alari_enviar_sms")
				Me.Onalari_enviar_smsChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Alarmas_Inactividad_Alarmas_Inactividad_Dias", Storage:="_Alarmas_Inactividad_Dias", ThisKey:="alari_id", OtherKey:="alari_id")>  _
	Public Property Alarmas_Inactividad_Dias() As EntitySet(Of Alarmas_Inactividad_Dias)
		Get
			Return Me._Alarmas_Inactividad_Dias
		End Get
		Set
			Me._Alarmas_Inactividad_Dias.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Vehiculo_Alarmas_Inactividad", Storage:="_Vehiculo", ThisKey:="veh_id", OtherKey:="veh_id", IsForeignKey:=true)>  _
	Public Property Vehiculo() As Vehiculo
		Get
			Return Me._Vehiculo.Entity
		End Get
		Set
			Dim previousValue As Vehiculo = Me._Vehiculo.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Vehiculo.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Vehiculo.Entity = Nothing
					previousValue.Alarmas_Inactividads.Remove(Me)
				End If
				Me._Vehiculo.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Alarmas_Inactividads.Add(Me)
					Me._veh_id = value.veh_id
				Else
					Me._veh_id = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Vehiculo")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Alarmas_Inactividad_Dias(ByVal entity As Alarmas_Inactividad_Dias)
		Me.SendPropertyChanging
		entity.Alarmas_Inactividad = Me
	End Sub
	
	Private Sub detach_Alarmas_Inactividad_Dias(ByVal entity As Alarmas_Inactividad_Dias)
		Me.SendPropertyChanging
		entity.Alarmas_Inactividad = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Uso_Moviles")>  _
Partial Public Class Uso_Moviles
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _uso_id As Integer
	
	Private _veh_id As Integer
	
	Private _uso_fecha_inicio As Date
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub Onuso_idChanging(value As Integer)
    End Sub
    Partial Private Sub Onuso_idChanged()
    End Sub
    Partial Private Sub Onveh_idChanging(value As Integer)
    End Sub
    Partial Private Sub Onveh_idChanged()
    End Sub
    Partial Private Sub Onuso_fecha_inicioChanging(value As Date)
    End Sub
    Partial Private Sub Onuso_fecha_inicioChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_uso_id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property uso_id() As Integer
		Get
			Return Me._uso_id
		End Get
		Set
			If ((Me._uso_id = value)  _
						= false) Then
				Me.Onuso_idChanging(value)
				Me.SendPropertyChanging
				Me._uso_id = value
				Me.SendPropertyChanged("uso_id")
				Me.Onuso_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_veh_id", DbType:="Int NOT NULL")>  _
	Public Property veh_id() As Integer
		Get
			Return Me._veh_id
		End Get
		Set
			If ((Me._veh_id = value)  _
						= false) Then
				Me.Onveh_idChanging(value)
				Me.SendPropertyChanging
				Me._veh_id = value
				Me.SendPropertyChanged("veh_id")
				Me.Onveh_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_uso_fecha_inicio", DbType:="DateTime NOT NULL")>  _
	Public Property uso_fecha_inicio() As Date
		Get
			Return Me._uso_fecha_inicio
		End Get
		Set
			If ((Me._uso_fecha_inicio = value)  _
						= false) Then
				Me.Onuso_fecha_inicioChanging(value)
				Me.SendPropertyChanging
				Me._uso_fecha_inicio = value
				Me.SendPropertyChanged("uso_fecha_inicio")
				Me.Onuso_fecha_inicioChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Alamas_Kms_Excedidos")>  _
Partial Public Class Alamas_Kms_Excedidos
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _alak_id As Integer
	
	Private _veh_id As Integer
	
	Private _alak_descripcion As String
	
	Private _alak_frecuencia As Char
	
	Private _alak_cant_km As Integer
	
	Private _alak_enviar_mail As Boolean
	
	Private _alak_enviar_sms As Boolean
	
	Private _Vehiculo As EntityRef(Of Vehiculo)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub Onalak_idChanging(value As Integer)
    End Sub
    Partial Private Sub Onalak_idChanged()
    End Sub
    Partial Private Sub Onveh_idChanging(value As Integer)
    End Sub
    Partial Private Sub Onveh_idChanged()
    End Sub
    Partial Private Sub Onalak_descripcionChanging(value As String)
    End Sub
    Partial Private Sub Onalak_descripcionChanged()
    End Sub
    Partial Private Sub Onalak_frecuenciaChanging(value As Char)
    End Sub
    Partial Private Sub Onalak_frecuenciaChanged()
    End Sub
    Partial Private Sub Onalak_cant_kmChanging(value As Integer)
    End Sub
    Partial Private Sub Onalak_cant_kmChanged()
    End Sub
    Partial Private Sub Onalak_enviar_mailChanging(value As Boolean)
    End Sub
    Partial Private Sub Onalak_enviar_mailChanged()
    End Sub
    Partial Private Sub Onalak_enviar_smsChanging(value As Boolean)
    End Sub
    Partial Private Sub Onalak_enviar_smsChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Vehiculo = CType(Nothing, EntityRef(Of Vehiculo))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_alak_id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property alak_id() As Integer
		Get
			Return Me._alak_id
		End Get
		Set
			If ((Me._alak_id = value)  _
						= false) Then
				Me.Onalak_idChanging(value)
				Me.SendPropertyChanging
				Me._alak_id = value
				Me.SendPropertyChanged("alak_id")
				Me.Onalak_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_veh_id", DbType:="Int NOT NULL")>  _
	Public Property veh_id() As Integer
		Get
			Return Me._veh_id
		End Get
		Set
			If ((Me._veh_id = value)  _
						= false) Then
				If Me._Vehiculo.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.Onveh_idChanging(value)
				Me.SendPropertyChanging
				Me._veh_id = value
				Me.SendPropertyChanged("veh_id")
				Me.Onveh_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_alak_descripcion", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property alak_descripcion() As String
		Get
			Return Me._alak_descripcion
		End Get
		Set
			If (String.Equals(Me._alak_descripcion, value) = false) Then
				Me.Onalak_descripcionChanging(value)
				Me.SendPropertyChanging
				Me._alak_descripcion = value
				Me.SendPropertyChanged("alak_descripcion")
				Me.Onalak_descripcionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_alak_frecuencia", DbType:="Char(1) NOT NULL")>  _
	Public Property alak_frecuencia() As Char
		Get
			Return Me._alak_frecuencia
		End Get
		Set
			If ((Me._alak_frecuencia = value)  _
						= false) Then
				Me.Onalak_frecuenciaChanging(value)
				Me.SendPropertyChanging
				Me._alak_frecuencia = value
				Me.SendPropertyChanged("alak_frecuencia")
				Me.Onalak_frecuenciaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_alak_cant_km", DbType:="Int NOT NULL")>  _
	Public Property alak_cant_km() As Integer
		Get
			Return Me._alak_cant_km
		End Get
		Set
			If ((Me._alak_cant_km = value)  _
						= false) Then
				Me.Onalak_cant_kmChanging(value)
				Me.SendPropertyChanging
				Me._alak_cant_km = value
				Me.SendPropertyChanged("alak_cant_km")
				Me.Onalak_cant_kmChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_alak_enviar_mail", DbType:="Bit NOT NULL")>  _
	Public Property alak_enviar_mail() As Boolean
		Get
			Return Me._alak_enviar_mail
		End Get
		Set
			If ((Me._alak_enviar_mail = value)  _
						= false) Then
				Me.Onalak_enviar_mailChanging(value)
				Me.SendPropertyChanging
				Me._alak_enviar_mail = value
				Me.SendPropertyChanged("alak_enviar_mail")
				Me.Onalak_enviar_mailChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_alak_enviar_sms", DbType:="Bit NOT NULL")>  _
	Public Property alak_enviar_sms() As Boolean
		Get
			Return Me._alak_enviar_sms
		End Get
		Set
			If ((Me._alak_enviar_sms = value)  _
						= false) Then
				Me.Onalak_enviar_smsChanging(value)
				Me.SendPropertyChanging
				Me._alak_enviar_sms = value
				Me.SendPropertyChanged("alak_enviar_sms")
				Me.Onalak_enviar_smsChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Vehiculo_Alamas_Kms_Excedidos", Storage:="_Vehiculo", ThisKey:="veh_id", OtherKey:="veh_id", IsForeignKey:=true)>  _
	Public Property Vehiculo() As Vehiculo
		Get
			Return Me._Vehiculo.Entity
		End Get
		Set
			Dim previousValue As Vehiculo = Me._Vehiculo.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Vehiculo.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Vehiculo.Entity = Nothing
					previousValue.Alamas_Kms_Excedidos.Remove(Me)
				End If
				Me._Vehiculo.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Alamas_Kms_Excedidos.Add(Me)
					Me._veh_id = value.veh_id
				Else
					Me._veh_id = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Vehiculo")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Recorridos_Puntos")>  _
Partial Public Class Recorridos_Puntos
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _rec_punto_id As Integer
	
	Private _rec_id As Integer
	
	Private _rec_latitud As String
	
	Private _rec_longitud As String
	
	Private _Alertas_Recorrido_Puntos_Visitar As EntitySet(Of Alertas_Recorrido_Puntos_Visitar)
	
	Private _Recorridos As EntityRef(Of Recorridos)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub Onrec_punto_idChanging(value As Integer)
    End Sub
    Partial Private Sub Onrec_punto_idChanged()
    End Sub
    Partial Private Sub Onrec_idChanging(value As Integer)
    End Sub
    Partial Private Sub Onrec_idChanged()
    End Sub
    Partial Private Sub Onrec_latitudChanging(value As String)
    End Sub
    Partial Private Sub Onrec_latitudChanged()
    End Sub
    Partial Private Sub Onrec_longitudChanging(value As String)
    End Sub
    Partial Private Sub Onrec_longitudChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Alertas_Recorrido_Puntos_Visitar = New EntitySet(Of Alertas_Recorrido_Puntos_Visitar)(AddressOf Me.attach_Alertas_Recorrido_Puntos_Visitar, AddressOf Me.detach_Alertas_Recorrido_Puntos_Visitar)
		Me._Recorridos = CType(Nothing, EntityRef(Of Recorridos))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_rec_punto_id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property rec_punto_id() As Integer
		Get
			Return Me._rec_punto_id
		End Get
		Set
			If ((Me._rec_punto_id = value)  _
						= false) Then
				Me.Onrec_punto_idChanging(value)
				Me.SendPropertyChanging
				Me._rec_punto_id = value
				Me.SendPropertyChanged("rec_punto_id")
				Me.Onrec_punto_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_rec_id", DbType:="Int NOT NULL")>  _
	Public Property rec_id() As Integer
		Get
			Return Me._rec_id
		End Get
		Set
			If ((Me._rec_id = value)  _
						= false) Then
				If Me._Recorridos.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.Onrec_idChanging(value)
				Me.SendPropertyChanging
				Me._rec_id = value
				Me.SendPropertyChanged("rec_id")
				Me.Onrec_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_rec_latitud", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property rec_latitud() As String
		Get
			Return Me._rec_latitud
		End Get
		Set
			If (String.Equals(Me._rec_latitud, value) = false) Then
				Me.Onrec_latitudChanging(value)
				Me.SendPropertyChanging
				Me._rec_latitud = value
				Me.SendPropertyChanged("rec_latitud")
				Me.Onrec_latitudChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_rec_longitud", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property rec_longitud() As String
		Get
			Return Me._rec_longitud
		End Get
		Set
			If (String.Equals(Me._rec_longitud, value) = false) Then
				Me.Onrec_longitudChanging(value)
				Me.SendPropertyChanging
				Me._rec_longitud = value
				Me.SendPropertyChanged("rec_longitud")
				Me.Onrec_longitudChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Recorridos_Puntos_Alertas_Recorrido_Puntos_Visitar", Storage:="_Alertas_Recorrido_Puntos_Visitar", ThisKey:="rec_punto_id", OtherKey:="rec_punto_id")>  _
	Public Property Alertas_Recorrido_Puntos_Visitar() As EntitySet(Of Alertas_Recorrido_Puntos_Visitar)
		Get
			Return Me._Alertas_Recorrido_Puntos_Visitar
		End Get
		Set
			Me._Alertas_Recorrido_Puntos_Visitar.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Recorridos_Recorridos_Puntos", Storage:="_Recorridos", ThisKey:="rec_id", OtherKey:="rec_id", IsForeignKey:=true)>  _
	Public Property Recorridos() As Recorridos
		Get
			Return Me._Recorridos.Entity
		End Get
		Set
			Dim previousValue As Recorridos = Me._Recorridos.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Recorridos.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Recorridos.Entity = Nothing
					previousValue.Recorridos_Puntos.Remove(Me)
				End If
				Me._Recorridos.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Recorridos_Puntos.Add(Me)
					Me._rec_id = value.rec_id
				Else
					Me._rec_id = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Recorridos")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Alertas_Recorrido_Puntos_Visitar(ByVal entity As Alertas_Recorrido_Puntos_Visitar)
		Me.SendPropertyChanging
		entity.Recorridos_Puntos = Me
	End Sub
	
	Private Sub detach_Alertas_Recorrido_Puntos_Visitar(ByVal entity As Alertas_Recorrido_Puntos_Visitar)
		Me.SendPropertyChanging
		entity.Recorridos_Puntos = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Alarmas")>  _
Partial Public Class Alarmas
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _alar_id As Integer
	
	Private _veh_id As System.Nullable(Of Integer)
	
	Private _alar_nombre As String
	
	Private _alar_fecha As Date
	
	Private _alar_nombre_via As String
	
	Private _alar_Localidad As String
	
	Private _alar_Provincia As String
	
	Private _alar_valor As Decimal
	
	Private _alar_Categoria As String
	
	Private _veh_patente As String
	
	Private _alar_vista As System.Nullable(Of Boolean)
	
	Private _alar_vista_admin As System.Nullable(Of Boolean)
	
	Private _alar_lat As String
	
	Private _alar_lng As String
	
	Private _veh_conductor As String
	
	Private _mail_enviado As System.Nullable(Of Date)
	
	Private _sms_enviado As System.Nullable(Of Date)
	
	Private _alar_limite As String
	
	Private _alar_tipo As System.Nullable(Of Integer)
	
	Private _alar_codigo_config As System.Nullable(Of Integer)
	
	Private _alar_mostrar As System.Nullable(Of Boolean)
	
	Private _alar_duracion As System.Nullable(Of Decimal)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub Onalar_idChanging(value As Integer)
    End Sub
    Partial Private Sub Onalar_idChanged()
    End Sub
    Partial Private Sub Onveh_idChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Onveh_idChanged()
    End Sub
    Partial Private Sub Onalar_nombreChanging(value As String)
    End Sub
    Partial Private Sub Onalar_nombreChanged()
    End Sub
    Partial Private Sub Onalar_fechaChanging(value As Date)
    End Sub
    Partial Private Sub Onalar_fechaChanged()
    End Sub
    Partial Private Sub Onalar_nombre_viaChanging(value As String)
    End Sub
    Partial Private Sub Onalar_nombre_viaChanged()
    End Sub
    Partial Private Sub Onalar_LocalidadChanging(value As String)
    End Sub
    Partial Private Sub Onalar_LocalidadChanged()
    End Sub
    Partial Private Sub Onalar_ProvinciaChanging(value As String)
    End Sub
    Partial Private Sub Onalar_ProvinciaChanged()
    End Sub
    Partial Private Sub Onalar_valorChanging(value As Decimal)
    End Sub
    Partial Private Sub Onalar_valorChanged()
    End Sub
    Partial Private Sub Onalar_CategoriaChanging(value As String)
    End Sub
    Partial Private Sub Onalar_CategoriaChanged()
    End Sub
    Partial Private Sub Onveh_patenteChanging(value As String)
    End Sub
    Partial Private Sub Onveh_patenteChanged()
    End Sub
    Partial Private Sub Onalar_vistaChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub Onalar_vistaChanged()
    End Sub
    Partial Private Sub Onalar_vista_adminChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub Onalar_vista_adminChanged()
    End Sub
    Partial Private Sub Onalar_latChanging(value As String)
    End Sub
    Partial Private Sub Onalar_latChanged()
    End Sub
    Partial Private Sub Onalar_lngChanging(value As String)
    End Sub
    Partial Private Sub Onalar_lngChanged()
    End Sub
    Partial Private Sub Onveh_conductorChanging(value As String)
    End Sub
    Partial Private Sub Onveh_conductorChanged()
    End Sub
    Partial Private Sub Onmail_enviadoChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub Onmail_enviadoChanged()
    End Sub
    Partial Private Sub Onsms_enviadoChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub Onsms_enviadoChanged()
    End Sub
    Partial Private Sub Onalar_limiteChanging(value As String)
    End Sub
    Partial Private Sub Onalar_limiteChanged()
    End Sub
    Partial Private Sub Onalar_tipoChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Onalar_tipoChanged()
    End Sub
    Partial Private Sub Onalar_codigo_configChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Onalar_codigo_configChanged()
    End Sub
    Partial Private Sub Onalar_mostrarChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub Onalar_mostrarChanged()
    End Sub
    Partial Private Sub Onalar_duracionChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub Onalar_duracionChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_alar_id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property alar_id() As Integer
		Get
			Return Me._alar_id
		End Get
		Set
			If ((Me._alar_id = value)  _
						= false) Then
				Me.Onalar_idChanging(value)
				Me.SendPropertyChanging
				Me._alar_id = value
				Me.SendPropertyChanged("alar_id")
				Me.Onalar_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_veh_id", DbType:="Int")>  _
	Public Property veh_id() As System.Nullable(Of Integer)
		Get
			Return Me._veh_id
		End Get
		Set
			If (Me._veh_id.Equals(value) = false) Then
				Me.Onveh_idChanging(value)
				Me.SendPropertyChanging
				Me._veh_id = value
				Me.SendPropertyChanged("veh_id")
				Me.Onveh_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_alar_nombre", DbType:="VarChar(200) NOT NULL", CanBeNull:=false)>  _
	Public Property alar_nombre() As String
		Get
			Return Me._alar_nombre
		End Get
		Set
			If (String.Equals(Me._alar_nombre, value) = false) Then
				Me.Onalar_nombreChanging(value)
				Me.SendPropertyChanging
				Me._alar_nombre = value
				Me.SendPropertyChanged("alar_nombre")
				Me.Onalar_nombreChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_alar_fecha", DbType:="DateTime NOT NULL")>  _
	Public Property alar_fecha() As Date
		Get
			Return Me._alar_fecha
		End Get
		Set
			If ((Me._alar_fecha = value)  _
						= false) Then
				Me.Onalar_fechaChanging(value)
				Me.SendPropertyChanging
				Me._alar_fecha = value
				Me.SendPropertyChanged("alar_fecha")
				Me.Onalar_fechaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_alar_nombre_via", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property alar_nombre_via() As String
		Get
			Return Me._alar_nombre_via
		End Get
		Set
			If (String.Equals(Me._alar_nombre_via, value) = false) Then
				Me.Onalar_nombre_viaChanging(value)
				Me.SendPropertyChanging
				Me._alar_nombre_via = value
				Me.SendPropertyChanged("alar_nombre_via")
				Me.Onalar_nombre_viaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_alar_Localidad", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property alar_Localidad() As String
		Get
			Return Me._alar_Localidad
		End Get
		Set
			If (String.Equals(Me._alar_Localidad, value) = false) Then
				Me.Onalar_LocalidadChanging(value)
				Me.SendPropertyChanging
				Me._alar_Localidad = value
				Me.SendPropertyChanged("alar_Localidad")
				Me.Onalar_LocalidadChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_alar_Provincia", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property alar_Provincia() As String
		Get
			Return Me._alar_Provincia
		End Get
		Set
			If (String.Equals(Me._alar_Provincia, value) = false) Then
				Me.Onalar_ProvinciaChanging(value)
				Me.SendPropertyChanging
				Me._alar_Provincia = value
				Me.SendPropertyChanged("alar_Provincia")
				Me.Onalar_ProvinciaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_alar_valor", DbType:="Decimal(18,2) NOT NULL")>  _
	Public Property alar_valor() As Decimal
		Get
			Return Me._alar_valor
		End Get
		Set
			If ((Me._alar_valor = value)  _
						= false) Then
				Me.Onalar_valorChanging(value)
				Me.SendPropertyChanging
				Me._alar_valor = value
				Me.SendPropertyChanged("alar_valor")
				Me.Onalar_valorChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_alar_Categoria", DbType:="VarChar(50)")>  _
	Public Property alar_Categoria() As String
		Get
			Return Me._alar_Categoria
		End Get
		Set
			If (String.Equals(Me._alar_Categoria, value) = false) Then
				Me.Onalar_CategoriaChanging(value)
				Me.SendPropertyChanging
				Me._alar_Categoria = value
				Me.SendPropertyChanged("alar_Categoria")
				Me.Onalar_CategoriaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_veh_patente", DbType:="VarChar(50)")>  _
	Public Property veh_patente() As String
		Get
			Return Me._veh_patente
		End Get
		Set
			If (String.Equals(Me._veh_patente, value) = false) Then
				Me.Onveh_patenteChanging(value)
				Me.SendPropertyChanging
				Me._veh_patente = value
				Me.SendPropertyChanged("veh_patente")
				Me.Onveh_patenteChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_alar_vista", DbType:="Bit")>  _
	Public Property alar_vista() As System.Nullable(Of Boolean)
		Get
			Return Me._alar_vista
		End Get
		Set
			If (Me._alar_vista.Equals(value) = false) Then
				Me.Onalar_vistaChanging(value)
				Me.SendPropertyChanging
				Me._alar_vista = value
				Me.SendPropertyChanged("alar_vista")
				Me.Onalar_vistaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_alar_vista_admin", DbType:="Bit")>  _
	Public Property alar_vista_admin() As System.Nullable(Of Boolean)
		Get
			Return Me._alar_vista_admin
		End Get
		Set
			If (Me._alar_vista_admin.Equals(value) = false) Then
				Me.Onalar_vista_adminChanging(value)
				Me.SendPropertyChanging
				Me._alar_vista_admin = value
				Me.SendPropertyChanged("alar_vista_admin")
				Me.Onalar_vista_adminChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_alar_lat", DbType:="VarChar(50)")>  _
	Public Property alar_lat() As String
		Get
			Return Me._alar_lat
		End Get
		Set
			If (String.Equals(Me._alar_lat, value) = false) Then
				Me.Onalar_latChanging(value)
				Me.SendPropertyChanging
				Me._alar_lat = value
				Me.SendPropertyChanged("alar_lat")
				Me.Onalar_latChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_alar_lng", DbType:="VarChar(50)")>  _
	Public Property alar_lng() As String
		Get
			Return Me._alar_lng
		End Get
		Set
			If (String.Equals(Me._alar_lng, value) = false) Then
				Me.Onalar_lngChanging(value)
				Me.SendPropertyChanging
				Me._alar_lng = value
				Me.SendPropertyChanged("alar_lng")
				Me.Onalar_lngChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_veh_conductor", DbType:="VarChar(50)")>  _
	Public Property veh_conductor() As String
		Get
			Return Me._veh_conductor
		End Get
		Set
			If (String.Equals(Me._veh_conductor, value) = false) Then
				Me.Onveh_conductorChanging(value)
				Me.SendPropertyChanging
				Me._veh_conductor = value
				Me.SendPropertyChanged("veh_conductor")
				Me.Onveh_conductorChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_mail_enviado", DbType:="DateTime")>  _
	Public Property mail_enviado() As System.Nullable(Of Date)
		Get
			Return Me._mail_enviado
		End Get
		Set
			If (Me._mail_enviado.Equals(value) = false) Then
				Me.Onmail_enviadoChanging(value)
				Me.SendPropertyChanging
				Me._mail_enviado = value
				Me.SendPropertyChanged("mail_enviado")
				Me.Onmail_enviadoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_sms_enviado", DbType:="DateTime")>  _
	Public Property sms_enviado() As System.Nullable(Of Date)
		Get
			Return Me._sms_enviado
		End Get
		Set
			If (Me._sms_enviado.Equals(value) = false) Then
				Me.Onsms_enviadoChanging(value)
				Me.SendPropertyChanging
				Me._sms_enviado = value
				Me.SendPropertyChanged("sms_enviado")
				Me.Onsms_enviadoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_alar_limite", DbType:="VarChar(50)")>  _
	Public Property alar_limite() As String
		Get
			Return Me._alar_limite
		End Get
		Set
			If (String.Equals(Me._alar_limite, value) = false) Then
				Me.Onalar_limiteChanging(value)
				Me.SendPropertyChanging
				Me._alar_limite = value
				Me.SendPropertyChanged("alar_limite")
				Me.Onalar_limiteChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_alar_tipo", DbType:="Int")>  _
	Public Property alar_tipo() As System.Nullable(Of Integer)
		Get
			Return Me._alar_tipo
		End Get
		Set
			If (Me._alar_tipo.Equals(value) = false) Then
				Me.Onalar_tipoChanging(value)
				Me.SendPropertyChanging
				Me._alar_tipo = value
				Me.SendPropertyChanged("alar_tipo")
				Me.Onalar_tipoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_alar_codigo_config", DbType:="Int")>  _
	Public Property alar_codigo_config() As System.Nullable(Of Integer)
		Get
			Return Me._alar_codigo_config
		End Get
		Set
			If (Me._alar_codigo_config.Equals(value) = false) Then
				Me.Onalar_codigo_configChanging(value)
				Me.SendPropertyChanging
				Me._alar_codigo_config = value
				Me.SendPropertyChanged("alar_codigo_config")
				Me.Onalar_codigo_configChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_alar_mostrar", DbType:="Bit")>  _
	Public Property alar_mostrar() As System.Nullable(Of Boolean)
		Get
			Return Me._alar_mostrar
		End Get
		Set
			If (Me._alar_mostrar.Equals(value) = false) Then
				Me.Onalar_mostrarChanging(value)
				Me.SendPropertyChanging
				Me._alar_mostrar = value
				Me.SendPropertyChanged("alar_mostrar")
				Me.Onalar_mostrarChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_alar_duracion", DbType:="Decimal(18,2)")>  _
	Public Property alar_duracion() As System.Nullable(Of Decimal)
		Get
			Return Me._alar_duracion
		End Get
		Set
			If (Me._alar_duracion.Equals(value) = false) Then
				Me.Onalar_duracionChanging(value)
				Me.SendPropertyChanging
				Me._alar_duracion = value
				Me.SendPropertyChanged("alar_duracion")
				Me.Onalar_duracionChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Alertas_Recorrido_Puntos_Visitar")>  _
Partial Public Class Alertas_Recorrido_Puntos_Visitar
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _rec_punto_id As Integer
	
	Private _arec_id As Integer
	
	Private _rec_punto_fecha_llegada As String
	
	Private _rec_punto_horario_desde As String
	
	Private _rec_punto_horario_hasta As String
	
	Private _rec_punto_direccion As String
	
	Private _Alertas_Recorridos As EntityRef(Of Alertas_Recorridos)
	
	Private _Recorridos_Puntos As EntityRef(Of Recorridos_Puntos)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub Onrec_punto_idChanging(value As Integer)
    End Sub
    Partial Private Sub Onrec_punto_idChanged()
    End Sub
    Partial Private Sub Onarec_idChanging(value As Integer)
    End Sub
    Partial Private Sub Onarec_idChanged()
    End Sub
    Partial Private Sub Onrec_punto_fecha_llegadaChanging(value As String)
    End Sub
    Partial Private Sub Onrec_punto_fecha_llegadaChanged()
    End Sub
    Partial Private Sub Onrec_punto_horario_desdeChanging(value As String)
    End Sub
    Partial Private Sub Onrec_punto_horario_desdeChanged()
    End Sub
    Partial Private Sub Onrec_punto_horario_hastaChanging(value As String)
    End Sub
    Partial Private Sub Onrec_punto_horario_hastaChanged()
    End Sub
    Partial Private Sub Onrec_punto_direccionChanging(value As String)
    End Sub
    Partial Private Sub Onrec_punto_direccionChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Alertas_Recorridos = CType(Nothing, EntityRef(Of Alertas_Recorridos))
		Me._Recorridos_Puntos = CType(Nothing, EntityRef(Of Recorridos_Puntos))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_rec_punto_id", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property rec_punto_id() As Integer
		Get
			Return Me._rec_punto_id
		End Get
		Set
			If ((Me._rec_punto_id = value)  _
						= false) Then
				If Me._Recorridos_Puntos.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.Onrec_punto_idChanging(value)
				Me.SendPropertyChanging
				Me._rec_punto_id = value
				Me.SendPropertyChanged("rec_punto_id")
				Me.Onrec_punto_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_arec_id", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property arec_id() As Integer
		Get
			Return Me._arec_id
		End Get
		Set
			If ((Me._arec_id = value)  _
						= false) Then
				If Me._Alertas_Recorridos.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.Onarec_idChanging(value)
				Me.SendPropertyChanging
				Me._arec_id = value
				Me.SendPropertyChanged("arec_id")
				Me.Onarec_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_rec_punto_fecha_llegada", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property rec_punto_fecha_llegada() As String
		Get
			Return Me._rec_punto_fecha_llegada
		End Get
		Set
			If (String.Equals(Me._rec_punto_fecha_llegada, value) = false) Then
				Me.Onrec_punto_fecha_llegadaChanging(value)
				Me.SendPropertyChanging
				Me._rec_punto_fecha_llegada = value
				Me.SendPropertyChanged("rec_punto_fecha_llegada")
				Me.Onrec_punto_fecha_llegadaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_rec_punto_horario_desde", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property rec_punto_horario_desde() As String
		Get
			Return Me._rec_punto_horario_desde
		End Get
		Set
			If (String.Equals(Me._rec_punto_horario_desde, value) = false) Then
				Me.Onrec_punto_horario_desdeChanging(value)
				Me.SendPropertyChanging
				Me._rec_punto_horario_desde = value
				Me.SendPropertyChanged("rec_punto_horario_desde")
				Me.Onrec_punto_horario_desdeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_rec_punto_horario_hasta", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property rec_punto_horario_hasta() As String
		Get
			Return Me._rec_punto_horario_hasta
		End Get
		Set
			If (String.Equals(Me._rec_punto_horario_hasta, value) = false) Then
				Me.Onrec_punto_horario_hastaChanging(value)
				Me.SendPropertyChanging
				Me._rec_punto_horario_hasta = value
				Me.SendPropertyChanged("rec_punto_horario_hasta")
				Me.Onrec_punto_horario_hastaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_rec_punto_direccion", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property rec_punto_direccion() As String
		Get
			Return Me._rec_punto_direccion
		End Get
		Set
			If (String.Equals(Me._rec_punto_direccion, value) = false) Then
				Me.Onrec_punto_direccionChanging(value)
				Me.SendPropertyChanging
				Me._rec_punto_direccion = value
				Me.SendPropertyChanged("rec_punto_direccion")
				Me.Onrec_punto_direccionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Alertas_Recorridos_Alertas_Recorrido_Puntos_Visitar", Storage:="_Alertas_Recorridos", ThisKey:="arec_id", OtherKey:="arec_id", IsForeignKey:=true)>  _
	Public Property Alertas_Recorridos() As Alertas_Recorridos
		Get
			Return Me._Alertas_Recorridos.Entity
		End Get
		Set
			Dim previousValue As Alertas_Recorridos = Me._Alertas_Recorridos.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Alertas_Recorridos.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Alertas_Recorridos.Entity = Nothing
					previousValue.Alertas_Recorrido_Puntos_Visitar.Remove(Me)
				End If
				Me._Alertas_Recorridos.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Alertas_Recorrido_Puntos_Visitar.Add(Me)
					Me._arec_id = value.arec_id
				Else
					Me._arec_id = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Alertas_Recorridos")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Recorridos_Puntos_Alertas_Recorrido_Puntos_Visitar", Storage:="_Recorridos_Puntos", ThisKey:="rec_punto_id", OtherKey:="rec_punto_id", IsForeignKey:=true)>  _
	Public Property Recorridos_Puntos() As Recorridos_Puntos
		Get
			Return Me._Recorridos_Puntos.Entity
		End Get
		Set
			Dim previousValue As Recorridos_Puntos = Me._Recorridos_Puntos.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Recorridos_Puntos.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Recorridos_Puntos.Entity = Nothing
					previousValue.Alertas_Recorrido_Puntos_Visitar.Remove(Me)
				End If
				Me._Recorridos_Puntos.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Alertas_Recorrido_Puntos_Visitar.Add(Me)
					Me._rec_punto_id = value.rec_punto_id
				Else
					Me._rec_punto_id = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Recorridos_Puntos")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Inactividad_Moviles")>  _
Partial Public Class Inactividad_Moviles
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _inc_id As Integer
	
	Private _veh_id As Integer
	
	Private _inc_fecha_inicio As Date
	
	Private _alar_id As Integer
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub Oninc_idChanging(value As Integer)
    End Sub
    Partial Private Sub Oninc_idChanged()
    End Sub
    Partial Private Sub Onveh_idChanging(value As Integer)
    End Sub
    Partial Private Sub Onveh_idChanged()
    End Sub
    Partial Private Sub Oninc_fecha_inicioChanging(value As Date)
    End Sub
    Partial Private Sub Oninc_fecha_inicioChanged()
    End Sub
    Partial Private Sub Onalar_idChanging(value As Integer)
    End Sub
    Partial Private Sub Onalar_idChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_inc_id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property inc_id() As Integer
		Get
			Return Me._inc_id
		End Get
		Set
			If ((Me._inc_id = value)  _
						= false) Then
				Me.Oninc_idChanging(value)
				Me.SendPropertyChanging
				Me._inc_id = value
				Me.SendPropertyChanged("inc_id")
				Me.Oninc_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_veh_id", DbType:="Int NOT NULL")>  _
	Public Property veh_id() As Integer
		Get
			Return Me._veh_id
		End Get
		Set
			If ((Me._veh_id = value)  _
						= false) Then
				Me.Onveh_idChanging(value)
				Me.SendPropertyChanging
				Me._veh_id = value
				Me.SendPropertyChanged("veh_id")
				Me.Onveh_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_inc_fecha_inicio", DbType:="DateTime NOT NULL")>  _
	Public Property inc_fecha_inicio() As Date
		Get
			Return Me._inc_fecha_inicio
		End Get
		Set
			If ((Me._inc_fecha_inicio = value)  _
						= false) Then
				Me.Oninc_fecha_inicioChanging(value)
				Me.SendPropertyChanging
				Me._inc_fecha_inicio = value
				Me.SendPropertyChanged("inc_fecha_inicio")
				Me.Oninc_fecha_inicioChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_alar_id", DbType:="Int NOT NULL")>  _
	Public Property alar_id() As Integer
		Get
			Return Me._alar_id
		End Get
		Set
			If ((Me._alar_id = value)  _
						= false) Then
				Me.Onalar_idChanging(value)
				Me.SendPropertyChanging
				Me._alar_id = value
				Me.SendPropertyChanged("alar_id")
				Me.Onalar_idChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Cortes_Corriente")>  _
Partial Public Class Cortes_Corriente
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _cor_id As Integer
	
	Private _veh_id As Integer
	
	Private _cort_fecha As Date
	
	Private _cort_tipo As String
	
	Private _cort_hecho As Boolean
	
	Private _cort_admin As String
	
	Private _modulo_num As String
	
	Private _Vehiculo As EntityRef(Of Vehiculo)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub Oncor_idChanging(value As Integer)
    End Sub
    Partial Private Sub Oncor_idChanged()
    End Sub
    Partial Private Sub Onveh_idChanging(value As Integer)
    End Sub
    Partial Private Sub Onveh_idChanged()
    End Sub
    Partial Private Sub Oncort_fechaChanging(value As Date)
    End Sub
    Partial Private Sub Oncort_fechaChanged()
    End Sub
    Partial Private Sub Oncort_tipoChanging(value As String)
    End Sub
    Partial Private Sub Oncort_tipoChanged()
    End Sub
    Partial Private Sub Oncort_hechoChanging(value As Boolean)
    End Sub
    Partial Private Sub Oncort_hechoChanged()
    End Sub
    Partial Private Sub Oncort_adminChanging(value As String)
    End Sub
    Partial Private Sub Oncort_adminChanged()
    End Sub
    Partial Private Sub Onmodulo_numChanging(value As String)
    End Sub
    Partial Private Sub Onmodulo_numChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Vehiculo = CType(Nothing, EntityRef(Of Vehiculo))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_cor_id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property cor_id() As Integer
		Get
			Return Me._cor_id
		End Get
		Set
			If ((Me._cor_id = value)  _
						= false) Then
				Me.Oncor_idChanging(value)
				Me.SendPropertyChanging
				Me._cor_id = value
				Me.SendPropertyChanged("cor_id")
				Me.Oncor_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_veh_id", DbType:="Int NOT NULL")>  _
	Public Property veh_id() As Integer
		Get
			Return Me._veh_id
		End Get
		Set
			If ((Me._veh_id = value)  _
						= false) Then
				If Me._Vehiculo.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.Onveh_idChanging(value)
				Me.SendPropertyChanging
				Me._veh_id = value
				Me.SendPropertyChanged("veh_id")
				Me.Onveh_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_cort_fecha", DbType:="DateTime NOT NULL")>  _
	Public Property cort_fecha() As Date
		Get
			Return Me._cort_fecha
		End Get
		Set
			If ((Me._cort_fecha = value)  _
						= false) Then
				Me.Oncort_fechaChanging(value)
				Me.SendPropertyChanging
				Me._cort_fecha = value
				Me.SendPropertyChanged("cort_fecha")
				Me.Oncort_fechaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_cort_tipo", DbType:="VarChar(3) NOT NULL", CanBeNull:=false)>  _
	Public Property cort_tipo() As String
		Get
			Return Me._cort_tipo
		End Get
		Set
			If (String.Equals(Me._cort_tipo, value) = false) Then
				Me.Oncort_tipoChanging(value)
				Me.SendPropertyChanging
				Me._cort_tipo = value
				Me.SendPropertyChanged("cort_tipo")
				Me.Oncort_tipoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_cort_hecho", DbType:="Bit NOT NULL")>  _
	Public Property cort_hecho() As Boolean
		Get
			Return Me._cort_hecho
		End Get
		Set
			If ((Me._cort_hecho = value)  _
						= false) Then
				Me.Oncort_hechoChanging(value)
				Me.SendPropertyChanging
				Me._cort_hecho = value
				Me.SendPropertyChanged("cort_hecho")
				Me.Oncort_hechoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_cort_admin", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property cort_admin() As String
		Get
			Return Me._cort_admin
		End Get
		Set
			If (String.Equals(Me._cort_admin, value) = false) Then
				Me.Oncort_adminChanging(value)
				Me.SendPropertyChanging
				Me._cort_admin = value
				Me.SendPropertyChanged("cort_admin")
				Me.Oncort_adminChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_modulo_num", DbType:="VarChar(50)")>  _
	Public Property modulo_num() As String
		Get
			Return Me._modulo_num
		End Get
		Set
			If (String.Equals(Me._modulo_num, value) = false) Then
				Me.Onmodulo_numChanging(value)
				Me.SendPropertyChanging
				Me._modulo_num = value
				Me.SendPropertyChanged("modulo_num")
				Me.Onmodulo_numChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Vehiculo_Cortes_Corriente", Storage:="_Vehiculo", ThisKey:="veh_id", OtherKey:="veh_id", IsForeignKey:=true)>  _
	Public Property Vehiculo() As Vehiculo
		Get
			Return Me._Vehiculo.Entity
		End Get
		Set
			Dim previousValue As Vehiculo = Me._Vehiculo.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Vehiculo.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Vehiculo.Entity = Nothing
					previousValue.Cortes_Corrientes.Remove(Me)
				End If
				Me._Vehiculo.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Cortes_Corrientes.Add(Me)
					Me._veh_id = value.veh_id
				Else
					Me._veh_id = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Vehiculo")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Eventos")>  _
Partial Public Class Evento
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _eve_id As Integer
	
	Private _eve_codigo As Integer
	
	Private _eve_nombre As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub Oneve_idChanging(value As Integer)
    End Sub
    Partial Private Sub Oneve_idChanged()
    End Sub
    Partial Private Sub Oneve_codigoChanging(value As Integer)
    End Sub
    Partial Private Sub Oneve_codigoChanged()
    End Sub
    Partial Private Sub Oneve_nombreChanging(value As String)
    End Sub
    Partial Private Sub Oneve_nombreChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_eve_id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property eve_id() As Integer
		Get
			Return Me._eve_id
		End Get
		Set
			If ((Me._eve_id = value)  _
						= false) Then
				Me.Oneve_idChanging(value)
				Me.SendPropertyChanging
				Me._eve_id = value
				Me.SendPropertyChanged("eve_id")
				Me.Oneve_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_eve_codigo", DbType:="Int NOT NULL")>  _
	Public Property eve_codigo() As Integer
		Get
			Return Me._eve_codigo
		End Get
		Set
			If ((Me._eve_codigo = value)  _
						= false) Then
				Me.Oneve_codigoChanging(value)
				Me.SendPropertyChanging
				Me._eve_codigo = value
				Me.SendPropertyChanged("eve_codigo")
				Me.Oneve_codigoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_eve_nombre", DbType:="VarChar(100) NOT NULL", CanBeNull:=false)>  _
	Public Property eve_nombre() As String
		Get
			Return Me._eve_nombre
		End Get
		Set
			If (String.Equals(Me._eve_nombre, value) = false) Then
				Me.Oneve_nombreChanging(value)
				Me.SendPropertyChanging
				Me._eve_nombre = value
				Me.SendPropertyChanged("eve_nombre")
				Me.Oneve_nombreChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Modulos")>  _
Partial Public Class Modulo
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _mod_id As Integer
	
	Private _mod_numero As String
	
	Private _mod_en_uso As Boolean
	
	Private _mod_nro_cel As String
	
	Private _mod_version_trama As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub Onmod_idChanging(value As Integer)
    End Sub
    Partial Private Sub Onmod_idChanged()
    End Sub
    Partial Private Sub Onmod_numeroChanging(value As String)
    End Sub
    Partial Private Sub Onmod_numeroChanged()
    End Sub
    Partial Private Sub Onmod_en_usoChanging(value As Boolean)
    End Sub
    Partial Private Sub Onmod_en_usoChanged()
    End Sub
    Partial Private Sub Onmod_nro_celChanging(value As String)
    End Sub
    Partial Private Sub Onmod_nro_celChanged()
    End Sub
    Partial Private Sub Onmod_version_tramaChanging(value As String)
    End Sub
    Partial Private Sub Onmod_version_tramaChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_mod_id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property mod_id() As Integer
		Get
			Return Me._mod_id
		End Get
		Set
			If ((Me._mod_id = value)  _
						= false) Then
				Me.Onmod_idChanging(value)
				Me.SendPropertyChanging
				Me._mod_id = value
				Me.SendPropertyChanged("mod_id")
				Me.Onmod_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_mod_numero", DbType:="VarChar(50)")>  _
	Public Property mod_numero() As String
		Get
			Return Me._mod_numero
		End Get
		Set
			If (String.Equals(Me._mod_numero, value) = false) Then
				Me.Onmod_numeroChanging(value)
				Me.SendPropertyChanging
				Me._mod_numero = value
				Me.SendPropertyChanged("mod_numero")
				Me.Onmod_numeroChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_mod_en_uso", DbType:="Bit NOT NULL")>  _
	Public Property mod_en_uso() As Boolean
		Get
			Return Me._mod_en_uso
		End Get
		Set
			If ((Me._mod_en_uso = value)  _
						= false) Then
				Me.Onmod_en_usoChanging(value)
				Me.SendPropertyChanging
				Me._mod_en_uso = value
				Me.SendPropertyChanged("mod_en_uso")
				Me.Onmod_en_usoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_mod_nro_cel", DbType:="VarChar(50)")>  _
	Public Property mod_nro_cel() As String
		Get
			Return Me._mod_nro_cel
		End Get
		Set
			If (String.Equals(Me._mod_nro_cel, value) = false) Then
				Me.Onmod_nro_celChanging(value)
				Me.SendPropertyChanging
				Me._mod_nro_cel = value
				Me.SendPropertyChanged("mod_nro_cel")
				Me.Onmod_nro_celChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_mod_version_trama", DbType:="VarChar(50)")>  _
	Public Property mod_version_trama() As String
		Get
			Return Me._mod_version_trama
		End Get
		Set
			If (String.Equals(Me._mod_version_trama, value) = false) Then
				Me.Onmod_version_tramaChanging(value)
				Me.SendPropertyChanging
				Me._mod_version_trama = value
				Me.SendPropertyChanged("mod_version_trama")
				Me.Onmod_version_tramaChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Marcadores_Genericos")>  _
Partial Public Class Marcadores_Generico
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _marc_id As Integer
	
	Private _marc_latitud As String
	
	Private _marc_longitud As String
	
	Private _tipo_marc_id As Integer
	
	Private _marc_nombre As String
	
	Private _marc_direccion As String
	
	Private _marc_imagen As String
	
	Private _marc_mostrar_a_todos As System.Nullable(Of Boolean)
	
	Private _Marcadores_GenericosXClientes As EntitySet(Of Marcadores_GenericosXClientes)
	
	Private _Tipos_Marcadores As EntityRef(Of Tipos_Marcadores)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub Onmarc_idChanging(value As Integer)
    End Sub
    Partial Private Sub Onmarc_idChanged()
    End Sub
    Partial Private Sub Onmarc_latitudChanging(value As String)
    End Sub
    Partial Private Sub Onmarc_latitudChanged()
    End Sub
    Partial Private Sub Onmarc_longitudChanging(value As String)
    End Sub
    Partial Private Sub Onmarc_longitudChanged()
    End Sub
    Partial Private Sub Ontipo_marc_idChanging(value As Integer)
    End Sub
    Partial Private Sub Ontipo_marc_idChanged()
    End Sub
    Partial Private Sub Onmarc_nombreChanging(value As String)
    End Sub
    Partial Private Sub Onmarc_nombreChanged()
    End Sub
    Partial Private Sub Onmarc_direccionChanging(value As String)
    End Sub
    Partial Private Sub Onmarc_direccionChanged()
    End Sub
    Partial Private Sub Onmarc_imagenChanging(value As String)
    End Sub
    Partial Private Sub Onmarc_imagenChanged()
    End Sub
    Partial Private Sub Onmarc_mostrar_a_todosChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub Onmarc_mostrar_a_todosChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Marcadores_GenericosXClientes = New EntitySet(Of Marcadores_GenericosXClientes)(AddressOf Me.attach_Marcadores_GenericosXClientes, AddressOf Me.detach_Marcadores_GenericosXClientes)
		Me._Tipos_Marcadores = CType(Nothing, EntityRef(Of Tipos_Marcadores))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_marc_id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property marc_id() As Integer
		Get
			Return Me._marc_id
		End Get
		Set
			If ((Me._marc_id = value)  _
						= false) Then
				Me.Onmarc_idChanging(value)
				Me.SendPropertyChanging
				Me._marc_id = value
				Me.SendPropertyChanged("marc_id")
				Me.Onmarc_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_marc_latitud", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property marc_latitud() As String
		Get
			Return Me._marc_latitud
		End Get
		Set
			If (String.Equals(Me._marc_latitud, value) = false) Then
				Me.Onmarc_latitudChanging(value)
				Me.SendPropertyChanging
				Me._marc_latitud = value
				Me.SendPropertyChanged("marc_latitud")
				Me.Onmarc_latitudChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_marc_longitud", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property marc_longitud() As String
		Get
			Return Me._marc_longitud
		End Get
		Set
			If (String.Equals(Me._marc_longitud, value) = false) Then
				Me.Onmarc_longitudChanging(value)
				Me.SendPropertyChanging
				Me._marc_longitud = value
				Me.SendPropertyChanged("marc_longitud")
				Me.Onmarc_longitudChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_tipo_marc_id", DbType:="Int NOT NULL")>  _
	Public Property tipo_marc_id() As Integer
		Get
			Return Me._tipo_marc_id
		End Get
		Set
			If ((Me._tipo_marc_id = value)  _
						= false) Then
				If Me._Tipos_Marcadores.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.Ontipo_marc_idChanging(value)
				Me.SendPropertyChanging
				Me._tipo_marc_id = value
				Me.SendPropertyChanged("tipo_marc_id")
				Me.Ontipo_marc_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_marc_nombre", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property marc_nombre() As String
		Get
			Return Me._marc_nombre
		End Get
		Set
			If (String.Equals(Me._marc_nombre, value) = false) Then
				Me.Onmarc_nombreChanging(value)
				Me.SendPropertyChanging
				Me._marc_nombre = value
				Me.SendPropertyChanged("marc_nombre")
				Me.Onmarc_nombreChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_marc_direccion", DbType:="VarChar(150) NOT NULL", CanBeNull:=false)>  _
	Public Property marc_direccion() As String
		Get
			Return Me._marc_direccion
		End Get
		Set
			If (String.Equals(Me._marc_direccion, value) = false) Then
				Me.Onmarc_direccionChanging(value)
				Me.SendPropertyChanging
				Me._marc_direccion = value
				Me.SendPropertyChanged("marc_direccion")
				Me.Onmarc_direccionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_marc_imagen", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property marc_imagen() As String
		Get
			Return Me._marc_imagen
		End Get
		Set
			If (String.Equals(Me._marc_imagen, value) = false) Then
				Me.Onmarc_imagenChanging(value)
				Me.SendPropertyChanging
				Me._marc_imagen = value
				Me.SendPropertyChanged("marc_imagen")
				Me.Onmarc_imagenChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_marc_mostrar_a_todos", DbType:="Bit")>  _
	Public Property marc_mostrar_a_todos() As System.Nullable(Of Boolean)
		Get
			Return Me._marc_mostrar_a_todos
		End Get
		Set
			If (Me._marc_mostrar_a_todos.Equals(value) = false) Then
				Me.Onmarc_mostrar_a_todosChanging(value)
				Me.SendPropertyChanging
				Me._marc_mostrar_a_todos = value
				Me.SendPropertyChanged("marc_mostrar_a_todos")
				Me.Onmarc_mostrar_a_todosChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Marcadores_Generico_Marcadores_GenericosXClientes", Storage:="_Marcadores_GenericosXClientes", ThisKey:="marc_id", OtherKey:="marc_id")>  _
	Public Property Marcadores_GenericosXClientes() As EntitySet(Of Marcadores_GenericosXClientes)
		Get
			Return Me._Marcadores_GenericosXClientes
		End Get
		Set
			Me._Marcadores_GenericosXClientes.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Tipos_Marcadores_Marcadores_Generico", Storage:="_Tipos_Marcadores", ThisKey:="tipo_marc_id", OtherKey:="tipo_marc_id", IsForeignKey:=true)>  _
	Public Property Tipos_Marcadores() As Tipos_Marcadores
		Get
			Return Me._Tipos_Marcadores.Entity
		End Get
		Set
			Dim previousValue As Tipos_Marcadores = Me._Tipos_Marcadores.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Tipos_Marcadores.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Tipos_Marcadores.Entity = Nothing
					previousValue.Marcadores_Genericos.Remove(Me)
				End If
				Me._Tipos_Marcadores.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Marcadores_Genericos.Add(Me)
					Me._tipo_marc_id = value.tipo_marc_id
				Else
					Me._tipo_marc_id = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Tipos_Marcadores")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Marcadores_GenericosXClientes(ByVal entity As Marcadores_GenericosXClientes)
		Me.SendPropertyChanging
		entity.Marcadores_Generico = Me
	End Sub
	
	Private Sub detach_Marcadores_GenericosXClientes(ByVal entity As Marcadores_GenericosXClientes)
		Me.SendPropertyChanging
		entity.Marcadores_Generico = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Alertas_Recordatorios_Por_Km")>  _
Partial Public Class Alertas_Recordatorios_Por_Km
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _reck_id As Integer
	
	Private _reck_descripcion As String
	
	Private _reck_kms_primer_alarma As System.Nullable(Of Integer)
	
	Private _reck_ocurrencia_cada_km As Integer
	
	Private _reck_kilm_proxima_alarma As Integer
	
	Private _reck_notificar_sms As Boolean
	
	Private _reck_notificar_mail As Boolean
	
	Private _veh_id As Integer
	
	Private _Vehiculo As EntityRef(Of Vehiculo)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub Onreck_idChanging(value As Integer)
    End Sub
    Partial Private Sub Onreck_idChanged()
    End Sub
    Partial Private Sub Onreck_descripcionChanging(value As String)
    End Sub
    Partial Private Sub Onreck_descripcionChanged()
    End Sub
    Partial Private Sub Onreck_kms_primer_alarmaChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Onreck_kms_primer_alarmaChanged()
    End Sub
    Partial Private Sub Onreck_ocurrencia_cada_kmChanging(value As Integer)
    End Sub
    Partial Private Sub Onreck_ocurrencia_cada_kmChanged()
    End Sub
    Partial Private Sub Onreck_kilm_proxima_alarmaChanging(value As Integer)
    End Sub
    Partial Private Sub Onreck_kilm_proxima_alarmaChanged()
    End Sub
    Partial Private Sub Onreck_notificar_smsChanging(value As Boolean)
    End Sub
    Partial Private Sub Onreck_notificar_smsChanged()
    End Sub
    Partial Private Sub Onreck_notificar_mailChanging(value As Boolean)
    End Sub
    Partial Private Sub Onreck_notificar_mailChanged()
    End Sub
    Partial Private Sub Onveh_idChanging(value As Integer)
    End Sub
    Partial Private Sub Onveh_idChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Vehiculo = CType(Nothing, EntityRef(Of Vehiculo))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_reck_id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property reck_id() As Integer
		Get
			Return Me._reck_id
		End Get
		Set
			If ((Me._reck_id = value)  _
						= false) Then
				Me.Onreck_idChanging(value)
				Me.SendPropertyChanging
				Me._reck_id = value
				Me.SendPropertyChanged("reck_id")
				Me.Onreck_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_reck_descripcion", DbType:="VarChar(100) NOT NULL", CanBeNull:=false)>  _
	Public Property reck_descripcion() As String
		Get
			Return Me._reck_descripcion
		End Get
		Set
			If (String.Equals(Me._reck_descripcion, value) = false) Then
				Me.Onreck_descripcionChanging(value)
				Me.SendPropertyChanging
				Me._reck_descripcion = value
				Me.SendPropertyChanged("reck_descripcion")
				Me.Onreck_descripcionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_reck_kms_primer_alarma", DbType:="Int")>  _
	Public Property reck_kms_primer_alarma() As System.Nullable(Of Integer)
		Get
			Return Me._reck_kms_primer_alarma
		End Get
		Set
			If (Me._reck_kms_primer_alarma.Equals(value) = false) Then
				Me.Onreck_kms_primer_alarmaChanging(value)
				Me.SendPropertyChanging
				Me._reck_kms_primer_alarma = value
				Me.SendPropertyChanged("reck_kms_primer_alarma")
				Me.Onreck_kms_primer_alarmaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_reck_ocurrencia_cada_km", DbType:="Int NOT NULL")>  _
	Public Property reck_ocurrencia_cada_km() As Integer
		Get
			Return Me._reck_ocurrencia_cada_km
		End Get
		Set
			If ((Me._reck_ocurrencia_cada_km = value)  _
						= false) Then
				Me.Onreck_ocurrencia_cada_kmChanging(value)
				Me.SendPropertyChanging
				Me._reck_ocurrencia_cada_km = value
				Me.SendPropertyChanged("reck_ocurrencia_cada_km")
				Me.Onreck_ocurrencia_cada_kmChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_reck_kilm_proxima_alarma", DbType:="Int NOT NULL")>  _
	Public Property reck_kilm_proxima_alarma() As Integer
		Get
			Return Me._reck_kilm_proxima_alarma
		End Get
		Set
			If ((Me._reck_kilm_proxima_alarma = value)  _
						= false) Then
				Me.Onreck_kilm_proxima_alarmaChanging(value)
				Me.SendPropertyChanging
				Me._reck_kilm_proxima_alarma = value
				Me.SendPropertyChanged("reck_kilm_proxima_alarma")
				Me.Onreck_kilm_proxima_alarmaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_reck_notificar_sms", DbType:="Bit NOT NULL")>  _
	Public Property reck_notificar_sms() As Boolean
		Get
			Return Me._reck_notificar_sms
		End Get
		Set
			If ((Me._reck_notificar_sms = value)  _
						= false) Then
				Me.Onreck_notificar_smsChanging(value)
				Me.SendPropertyChanging
				Me._reck_notificar_sms = value
				Me.SendPropertyChanged("reck_notificar_sms")
				Me.Onreck_notificar_smsChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_reck_notificar_mail", DbType:="Bit NOT NULL")>  _
	Public Property reck_notificar_mail() As Boolean
		Get
			Return Me._reck_notificar_mail
		End Get
		Set
			If ((Me._reck_notificar_mail = value)  _
						= false) Then
				Me.Onreck_notificar_mailChanging(value)
				Me.SendPropertyChanging
				Me._reck_notificar_mail = value
				Me.SendPropertyChanged("reck_notificar_mail")
				Me.Onreck_notificar_mailChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_veh_id", DbType:="Int NOT NULL")>  _
	Public Property veh_id() As Integer
		Get
			Return Me._veh_id
		End Get
		Set
			If ((Me._veh_id = value)  _
						= false) Then
				If Me._Vehiculo.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.Onveh_idChanging(value)
				Me.SendPropertyChanging
				Me._veh_id = value
				Me.SendPropertyChanged("veh_id")
				Me.Onveh_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Vehiculo_Alertas_Recordatorios_Por_Km", Storage:="_Vehiculo", ThisKey:="veh_id", OtherKey:="veh_id", IsForeignKey:=true)>  _
	Public Property Vehiculo() As Vehiculo
		Get
			Return Me._Vehiculo.Entity
		End Get
		Set
			Dim previousValue As Vehiculo = Me._Vehiculo.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Vehiculo.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Vehiculo.Entity = Nothing
					previousValue.Alertas_Recordatorios_Por_Kms.Remove(Me)
				End If
				Me._Vehiculo.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Alertas_Recordatorios_Por_Kms.Add(Me)
					Me._veh_id = value.veh_id
				Else
					Me._veh_id = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Vehiculo")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Respuestas_Comandos")>  _
Partial Public Class Respuestas_Comando
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _men_id As Integer
	
	Private _mod_id As String
	
	Private _men_fecha As Date
	
	Private _men_respuesta As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub Onmen_idChanging(value As Integer)
    End Sub
    Partial Private Sub Onmen_idChanged()
    End Sub
    Partial Private Sub Onmod_idChanging(value As String)
    End Sub
    Partial Private Sub Onmod_idChanged()
    End Sub
    Partial Private Sub Onmen_fechaChanging(value As Date)
    End Sub
    Partial Private Sub Onmen_fechaChanged()
    End Sub
    Partial Private Sub Onmen_respuestaChanging(value As String)
    End Sub
    Partial Private Sub Onmen_respuestaChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_men_id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property men_id() As Integer
		Get
			Return Me._men_id
		End Get
		Set
			If ((Me._men_id = value)  _
						= false) Then
				Me.Onmen_idChanging(value)
				Me.SendPropertyChanging
				Me._men_id = value
				Me.SendPropertyChanged("men_id")
				Me.Onmen_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_mod_id", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property mod_id() As String
		Get
			Return Me._mod_id
		End Get
		Set
			If (String.Equals(Me._mod_id, value) = false) Then
				Me.Onmod_idChanging(value)
				Me.SendPropertyChanging
				Me._mod_id = value
				Me.SendPropertyChanged("mod_id")
				Me.Onmod_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_men_fecha", DbType:="DateTime NOT NULL")>  _
	Public Property men_fecha() As Date
		Get
			Return Me._men_fecha
		End Get
		Set
			If ((Me._men_fecha = value)  _
						= false) Then
				Me.Onmen_fechaChanging(value)
				Me.SendPropertyChanging
				Me._men_fecha = value
				Me.SendPropertyChanged("men_fecha")
				Me.Onmen_fechaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_men_respuesta", DbType:="VarChar(200) NOT NULL", CanBeNull:=false)>  _
	Public Property men_respuesta() As String
		Get
			Return Me._men_respuesta
		End Get
		Set
			If (String.Equals(Me._men_respuesta, value) = false) Then
				Me.Onmen_respuestaChanging(value)
				Me.SendPropertyChanging
				Me._men_respuesta = value
				Me.SendPropertyChanged("men_respuesta")
				Me.Onmen_respuestaChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Comandos_Enviados")>  _
Partial Public Class Comandos_Enviado
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _men_id As Integer
	
	Private _com_id As Integer
	
	Private _mod_id As Integer
	
	Private _men_fecha As Date
	
	Private _men_enviado As Boolean
	
	Private _men_respuesta As String
	
	Private _men_id_terminal As String
	
	Private _men_mensaje As String
	
	Private _Comando As EntityRef(Of Comando)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub Onmen_idChanging(value As Integer)
    End Sub
    Partial Private Sub Onmen_idChanged()
    End Sub
    Partial Private Sub Oncom_idChanging(value As Integer)
    End Sub
    Partial Private Sub Oncom_idChanged()
    End Sub
    Partial Private Sub Onmod_idChanging(value As Integer)
    End Sub
    Partial Private Sub Onmod_idChanged()
    End Sub
    Partial Private Sub Onmen_fechaChanging(value As Date)
    End Sub
    Partial Private Sub Onmen_fechaChanged()
    End Sub
    Partial Private Sub Onmen_enviadoChanging(value As Boolean)
    End Sub
    Partial Private Sub Onmen_enviadoChanged()
    End Sub
    Partial Private Sub Onmen_respuestaChanging(value As String)
    End Sub
    Partial Private Sub Onmen_respuestaChanged()
    End Sub
    Partial Private Sub Onmen_id_terminalChanging(value As String)
    End Sub
    Partial Private Sub Onmen_id_terminalChanged()
    End Sub
    Partial Private Sub Onmen_mensajeChanging(value As String)
    End Sub
    Partial Private Sub Onmen_mensajeChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Comando = CType(Nothing, EntityRef(Of Comando))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_men_id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property men_id() As Integer
		Get
			Return Me._men_id
		End Get
		Set
			If ((Me._men_id = value)  _
						= false) Then
				Me.Onmen_idChanging(value)
				Me.SendPropertyChanging
				Me._men_id = value
				Me.SendPropertyChanged("men_id")
				Me.Onmen_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_com_id", DbType:="Int NOT NULL")>  _
	Public Property com_id() As Integer
		Get
			Return Me._com_id
		End Get
		Set
			If ((Me._com_id = value)  _
						= false) Then
				If Me._Comando.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.Oncom_idChanging(value)
				Me.SendPropertyChanging
				Me._com_id = value
				Me.SendPropertyChanged("com_id")
				Me.Oncom_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_mod_id", DbType:="Int NOT NULL")>  _
	Public Property mod_id() As Integer
		Get
			Return Me._mod_id
		End Get
		Set
			If ((Me._mod_id = value)  _
						= false) Then
				Me.Onmod_idChanging(value)
				Me.SendPropertyChanging
				Me._mod_id = value
				Me.SendPropertyChanged("mod_id")
				Me.Onmod_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_men_fecha", DbType:="DateTime NOT NULL")>  _
	Public Property men_fecha() As Date
		Get
			Return Me._men_fecha
		End Get
		Set
			If ((Me._men_fecha = value)  _
						= false) Then
				Me.Onmen_fechaChanging(value)
				Me.SendPropertyChanging
				Me._men_fecha = value
				Me.SendPropertyChanged("men_fecha")
				Me.Onmen_fechaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_men_enviado", DbType:="Bit NOT NULL")>  _
	Public Property men_enviado() As Boolean
		Get
			Return Me._men_enviado
		End Get
		Set
			If ((Me._men_enviado = value)  _
						= false) Then
				Me.Onmen_enviadoChanging(value)
				Me.SendPropertyChanging
				Me._men_enviado = value
				Me.SendPropertyChanged("men_enviado")
				Me.Onmen_enviadoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_men_respuesta", DbType:="VarChar(200) NOT NULL", CanBeNull:=false)>  _
	Public Property men_respuesta() As String
		Get
			Return Me._men_respuesta
		End Get
		Set
			If (String.Equals(Me._men_respuesta, value) = false) Then
				Me.Onmen_respuestaChanging(value)
				Me.SendPropertyChanging
				Me._men_respuesta = value
				Me.SendPropertyChanged("men_respuesta")
				Me.Onmen_respuestaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_men_id_terminal", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property men_id_terminal() As String
		Get
			Return Me._men_id_terminal
		End Get
		Set
			If (String.Equals(Me._men_id_terminal, value) = false) Then
				Me.Onmen_id_terminalChanging(value)
				Me.SendPropertyChanging
				Me._men_id_terminal = value
				Me.SendPropertyChanged("men_id_terminal")
				Me.Onmen_id_terminalChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_men_mensaje", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property men_mensaje() As String
		Get
			Return Me._men_mensaje
		End Get
		Set
			If (String.Equals(Me._men_mensaje, value) = false) Then
				Me.Onmen_mensajeChanging(value)
				Me.SendPropertyChanging
				Me._men_mensaje = value
				Me.SendPropertyChanged("men_mensaje")
				Me.Onmen_mensajeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Comando_Comandos_Enviado", Storage:="_Comando", ThisKey:="com_id", OtherKey:="com_id", IsForeignKey:=true)>  _
	Public Property Comando() As Comando
		Get
			Return Me._Comando.Entity
		End Get
		Set
			Dim previousValue As Comando = Me._Comando.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Comando.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Comando.Entity = Nothing
					previousValue.Comandos_Enviados.Remove(Me)
				End If
				Me._Comando.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Comandos_Enviados.Add(Me)
					Me._com_id = value.com_id
				Else
					Me._com_id = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Comando")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Comandos")>  _
Partial Public Class Comando
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _com_id As Integer
	
	Private _com_nombre As String
	
	Private _com_comando As String
	
	Private _sen_id As System.Nullable(Of Integer)
	
	Private _com_encender As System.Nullable(Of Boolean)
	
	Private _Comandos_Enviados As EntitySet(Of Comandos_Enviado)
	
	Private _Sensores As EntityRef(Of Sensores)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub Oncom_idChanging(value As Integer)
    End Sub
    Partial Private Sub Oncom_idChanged()
    End Sub
    Partial Private Sub Oncom_nombreChanging(value As String)
    End Sub
    Partial Private Sub Oncom_nombreChanged()
    End Sub
    Partial Private Sub Oncom_comandoChanging(value As String)
    End Sub
    Partial Private Sub Oncom_comandoChanged()
    End Sub
    Partial Private Sub Onsen_idChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Onsen_idChanged()
    End Sub
    Partial Private Sub Oncom_encenderChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub Oncom_encenderChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Comandos_Enviados = New EntitySet(Of Comandos_Enviado)(AddressOf Me.attach_Comandos_Enviados, AddressOf Me.detach_Comandos_Enviados)
		Me._Sensores = CType(Nothing, EntityRef(Of Sensores))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_com_id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property com_id() As Integer
		Get
			Return Me._com_id
		End Get
		Set
			If ((Me._com_id = value)  _
						= false) Then
				Me.Oncom_idChanging(value)
				Me.SendPropertyChanging
				Me._com_id = value
				Me.SendPropertyChanged("com_id")
				Me.Oncom_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_com_nombre", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property com_nombre() As String
		Get
			Return Me._com_nombre
		End Get
		Set
			If (String.Equals(Me._com_nombre, value) = false) Then
				Me.Oncom_nombreChanging(value)
				Me.SendPropertyChanging
				Me._com_nombre = value
				Me.SendPropertyChanged("com_nombre")
				Me.Oncom_nombreChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_com_comando", DbType:="VarChar(5) NOT NULL", CanBeNull:=false)>  _
	Public Property com_comando() As String
		Get
			Return Me._com_comando
		End Get
		Set
			If (String.Equals(Me._com_comando, value) = false) Then
				Me.Oncom_comandoChanging(value)
				Me.SendPropertyChanging
				Me._com_comando = value
				Me.SendPropertyChanged("com_comando")
				Me.Oncom_comandoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_sen_id", DbType:="Int")>  _
	Public Property sen_id() As System.Nullable(Of Integer)
		Get
			Return Me._sen_id
		End Get
		Set
			If (Me._sen_id.Equals(value) = false) Then
				If Me._Sensores.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.Onsen_idChanging(value)
				Me.SendPropertyChanging
				Me._sen_id = value
				Me.SendPropertyChanged("sen_id")
				Me.Onsen_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_com_encender", DbType:="Bit")>  _
	Public Property com_encender() As System.Nullable(Of Boolean)
		Get
			Return Me._com_encender
		End Get
		Set
			If (Me._com_encender.Equals(value) = false) Then
				Me.Oncom_encenderChanging(value)
				Me.SendPropertyChanging
				Me._com_encender = value
				Me.SendPropertyChanged("com_encender")
				Me.Oncom_encenderChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Comando_Comandos_Enviado", Storage:="_Comandos_Enviados", ThisKey:="com_id", OtherKey:="com_id")>  _
	Public Property Comandos_Enviados() As EntitySet(Of Comandos_Enviado)
		Get
			Return Me._Comandos_Enviados
		End Get
		Set
			Me._Comandos_Enviados.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Sensores_Comando", Storage:="_Sensores", ThisKey:="sen_id", OtherKey:="sen_id", IsForeignKey:=true)>  _
	Public Property Sensores() As Sensores
		Get
			Return Me._Sensores.Entity
		End Get
		Set
			Dim previousValue As Sensores = Me._Sensores.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Sensores.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Sensores.Entity = Nothing
					previousValue.Comandos.Remove(Me)
				End If
				Me._Sensores.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Comandos.Add(Me)
					Me._sen_id = value.sen_id
				Else
					Me._sen_id = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("Sensores")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Comandos_Enviados(ByVal entity As Comandos_Enviado)
		Me.SendPropertyChanging
		entity.Comando = Me
	End Sub
	
	Private Sub detach_Comandos_Enviados(ByVal entity As Comandos_Enviado)
		Me.SendPropertyChanging
		entity.Comando = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.vMonitoreos")>  _
Partial Public Class vMonitoreo
	
	Private _Codigo As Integer
	
	Private _ID_MODULO As String
	
	Private _FECHA As Date
	
	Private _LATITUD As String
	
	Private _LONGITUD As String
	
	Private _VELOCIDAD As Decimal
	
	Private _ALTURA As Integer
	
	Private _TIPO_VIA As System.Nullable(Of Integer)
	
	Private _NOMBRE_VIA As String
	
	Private _LOCALIDAD As String
	
	Private _PROVINCIA As String
	
	Private _KMS_RECORRIDOS As System.Nullable(Of Decimal)
	
	Private _ORIENTACION As System.Nullable(Of Char)
	
	Private _SENSORES As String
	
	Private _TEMP As System.Nullable(Of Decimal)
	
	Private _RPM As System.Nullable(Of Integer)
	
	Private _ID_VEHICULO As System.Nullable(Of Integer)
	
	Private _ENCENDIDO As System.Nullable(Of Boolean)
	
	Private _OCUPADO As System.Nullable(Of Boolean)
	
	Private _BATERIA As System.Nullable(Of Decimal)
	
	Private _ESTADO As System.Nullable(Of Integer)
	
	Private _TIEMPO_PARCIAL As System.Nullable(Of Integer)
	
	Private _PRESICION_SATELITE As System.Nullable(Of Decimal)
	
	Private _ODOMETRO As System.Nullable(Of Decimal)
	
	Private _CARGA_BATERIA_INTERNA As System.Nullable(Of Decimal)
	
	Private _CODIGO_EVENTO As System.Nullable(Of Integer)
	
	Private _de_memoria As System.Nullable(Of Boolean)
	
	Private _procesado_alarma As System.Nullable(Of Boolean)
	
	Private _procesado_recalcular As System.Nullable(Of Boolean)
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Codigo", AutoSync:=AutoSync.Always, DbType:="Int NOT NULL IDENTITY", IsDbGenerated:=true)>  _
	Public Property Codigo() As Integer
		Get
			Return Me._Codigo
		End Get
		Set
			If ((Me._Codigo = value)  _
						= false) Then
				Me._Codigo = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_MODULO", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property ID_MODULO() As String
		Get
			Return Me._ID_MODULO
		End Get
		Set
			If (String.Equals(Me._ID_MODULO, value) = false) Then
				Me._ID_MODULO = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FECHA", DbType:="DateTime NOT NULL")>  _
	Public Property FECHA() As Date
		Get
			Return Me._FECHA
		End Get
		Set
			If ((Me._FECHA = value)  _
						= false) Then
				Me._FECHA = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LATITUD", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property LATITUD() As String
		Get
			Return Me._LATITUD
		End Get
		Set
			If (String.Equals(Me._LATITUD, value) = false) Then
				Me._LATITUD = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LONGITUD", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property LONGITUD() As String
		Get
			Return Me._LONGITUD
		End Get
		Set
			If (String.Equals(Me._LONGITUD, value) = false) Then
				Me._LONGITUD = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_VELOCIDAD", DbType:="Decimal(18,3) NOT NULL")>  _
	Public Property VELOCIDAD() As Decimal
		Get
			Return Me._VELOCIDAD
		End Get
		Set
			If ((Me._VELOCIDAD = value)  _
						= false) Then
				Me._VELOCIDAD = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ALTURA", DbType:="Int NOT NULL")>  _
	Public Property ALTURA() As Integer
		Get
			Return Me._ALTURA
		End Get
		Set
			If ((Me._ALTURA = value)  _
						= false) Then
				Me._ALTURA = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TIPO_VIA", DbType:="Int")>  _
	Public Property TIPO_VIA() As System.Nullable(Of Integer)
		Get
			Return Me._TIPO_VIA
		End Get
		Set
			If (Me._TIPO_VIA.Equals(value) = false) Then
				Me._TIPO_VIA = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NOMBRE_VIA", DbType:="VarChar(100)")>  _
	Public Property NOMBRE_VIA() As String
		Get
			Return Me._NOMBRE_VIA
		End Get
		Set
			If (String.Equals(Me._NOMBRE_VIA, value) = false) Then
				Me._NOMBRE_VIA = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LOCALIDAD", DbType:="VarChar(100)")>  _
	Public Property LOCALIDAD() As String
		Get
			Return Me._LOCALIDAD
		End Get
		Set
			If (String.Equals(Me._LOCALIDAD, value) = false) Then
				Me._LOCALIDAD = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PROVINCIA", DbType:="VarChar(100)")>  _
	Public Property PROVINCIA() As String
		Get
			Return Me._PROVINCIA
		End Get
		Set
			If (String.Equals(Me._PROVINCIA, value) = false) Then
				Me._PROVINCIA = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_KMS_RECORRIDOS", DbType:="Decimal(18,4)")>  _
	Public Property KMS_RECORRIDOS() As System.Nullable(Of Decimal)
		Get
			Return Me._KMS_RECORRIDOS
		End Get
		Set
			If (Me._KMS_RECORRIDOS.Equals(value) = false) Then
				Me._KMS_RECORRIDOS = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ORIENTACION", DbType:="Char(1)")>  _
	Public Property ORIENTACION() As System.Nullable(Of Char)
		Get
			Return Me._ORIENTACION
		End Get
		Set
			If (Me._ORIENTACION.Equals(value) = false) Then
				Me._ORIENTACION = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SENSORES", DbType:="VarChar(50)")>  _
	Public Property SENSORES() As String
		Get
			Return Me._SENSORES
		End Get
		Set
			If (String.Equals(Me._SENSORES, value) = false) Then
				Me._SENSORES = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TEMP", DbType:="Decimal(18,2)")>  _
	Public Property TEMP() As System.Nullable(Of Decimal)
		Get
			Return Me._TEMP
		End Get
		Set
			If (Me._TEMP.Equals(value) = false) Then
				Me._TEMP = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RPM", DbType:="Int")>  _
	Public Property RPM() As System.Nullable(Of Integer)
		Get
			Return Me._RPM
		End Get
		Set
			If (Me._RPM.Equals(value) = false) Then
				Me._RPM = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_VEHICULO", DbType:="Int")>  _
	Public Property ID_VEHICULO() As System.Nullable(Of Integer)
		Get
			Return Me._ID_VEHICULO
		End Get
		Set
			If (Me._ID_VEHICULO.Equals(value) = false) Then
				Me._ID_VEHICULO = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ENCENDIDO", DbType:="Bit")>  _
	Public Property ENCENDIDO() As System.Nullable(Of Boolean)
		Get
			Return Me._ENCENDIDO
		End Get
		Set
			If (Me._ENCENDIDO.Equals(value) = false) Then
				Me._ENCENDIDO = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_OCUPADO", DbType:="Bit")>  _
	Public Property OCUPADO() As System.Nullable(Of Boolean)
		Get
			Return Me._OCUPADO
		End Get
		Set
			If (Me._OCUPADO.Equals(value) = false) Then
				Me._OCUPADO = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_BATERIA", DbType:="Decimal(18,2)")>  _
	Public Property BATERIA() As System.Nullable(Of Decimal)
		Get
			Return Me._BATERIA
		End Get
		Set
			If (Me._BATERIA.Equals(value) = false) Then
				Me._BATERIA = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ESTADO", DbType:="Int")>  _
	Public Property ESTADO() As System.Nullable(Of Integer)
		Get
			Return Me._ESTADO
		End Get
		Set
			If (Me._ESTADO.Equals(value) = false) Then
				Me._ESTADO = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TIEMPO_PARCIAL", DbType:="Int")>  _
	Public Property TIEMPO_PARCIAL() As System.Nullable(Of Integer)
		Get
			Return Me._TIEMPO_PARCIAL
		End Get
		Set
			If (Me._TIEMPO_PARCIAL.Equals(value) = false) Then
				Me._TIEMPO_PARCIAL = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PRESICION_SATELITE", DbType:="Decimal(18,3)")>  _
	Public Property PRESICION_SATELITE() As System.Nullable(Of Decimal)
		Get
			Return Me._PRESICION_SATELITE
		End Get
		Set
			If (Me._PRESICION_SATELITE.Equals(value) = false) Then
				Me._PRESICION_SATELITE = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ODOMETRO", DbType:="Decimal(18,3)")>  _
	Public Property ODOMETRO() As System.Nullable(Of Decimal)
		Get
			Return Me._ODOMETRO
		End Get
		Set
			If (Me._ODOMETRO.Equals(value) = false) Then
				Me._ODOMETRO = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CARGA_BATERIA_INTERNA", DbType:="Decimal(18,3)")>  _
	Public Property CARGA_BATERIA_INTERNA() As System.Nullable(Of Decimal)
		Get
			Return Me._CARGA_BATERIA_INTERNA
		End Get
		Set
			If (Me._CARGA_BATERIA_INTERNA.Equals(value) = false) Then
				Me._CARGA_BATERIA_INTERNA = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CODIGO_EVENTO", DbType:="Int")>  _
	Public Property CODIGO_EVENTO() As System.Nullable(Of Integer)
		Get
			Return Me._CODIGO_EVENTO
		End Get
		Set
			If (Me._CODIGO_EVENTO.Equals(value) = false) Then
				Me._CODIGO_EVENTO = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_de_memoria", DbType:="Bit")>  _
	Public Property de_memoria() As System.Nullable(Of Boolean)
		Get
			Return Me._de_memoria
		End Get
		Set
			If (Me._de_memoria.Equals(value) = false) Then
				Me._de_memoria = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_procesado_alarma", DbType:="Bit")>  _
	Public Property procesado_alarma() As System.Nullable(Of Boolean)
		Get
			Return Me._procesado_alarma
		End Get
		Set
			If (Me._procesado_alarma.Equals(value) = false) Then
				Me._procesado_alarma = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_procesado_recalcular", DbType:="Bit")>  _
	Public Property procesado_recalcular() As System.Nullable(Of Boolean)
		Get
			Return Me._procesado_recalcular
		End Get
		Set
			If (Me._procesado_recalcular.Equals(value) = false) Then
				Me._procesado_recalcular = value
			End If
		End Set
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Clientes")>  _
Partial Public Class Cliente
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _cli_id As Integer
	
	Private _cli_nombre As String
	
	Private _cli_email As String
	
	Private _cli_contrasenia As String
	
	Private _cli_fecha_creacion As System.Nullable(Of Date)
	
	Private _cli_direccion As String
	
	Private _cli_telefono As String
	
	Private _cli_activo As System.Nullable(Of Boolean)
	
	Private _cli_Condicion_Iva As String
	
	Private _cli_apellido As String
	
	Private _cli_fecha_baja As System.Nullable(Of Date)
	
	Private _cli_CP As String
	
	Private _cli_DNI As String
	
	Private _tipo_cli_id As Integer
	
	Private _cli_forma_pago As String
	
	Private _cli_fecha_nacimiento As System.Nullable(Of Date)
	
	Private _cli_borrado As System.Nullable(Of Boolean)
	
	Private _plan_id As System.Nullable(Of Integer)
	
	Private _Marcadores As EntitySet(Of Marcadores)
	
	Private _Clientes_Particulares As EntitySet(Of Clientes_Particulares)
	
	Private _Clientes_Empresas As EntitySet(Of Clientes_Empresas)
	
	Private _Contactos_Clientes As EntitySet(Of Contactos_Clientes)
	
	Private _Zonas As EntitySet(Of Zonas)
	
	Private _Recorridos As EntitySet(Of Recorridos)
	
	Private _Grupos As EntitySet(Of Grupos)
	
	Private _Vehiculos As EntitySet(Of Vehiculo)
	
	Private _Tipos_Clientes As EntityRef(Of Tipos_Clientes)
	
	Private _Plane As EntityRef(Of Plane)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub Oncli_idChanging(value As Integer)
    End Sub
    Partial Private Sub Oncli_idChanged()
    End Sub
    Partial Private Sub Oncli_nombreChanging(value As String)
    End Sub
    Partial Private Sub Oncli_nombreChanged()
    End Sub
    Partial Private Sub Oncli_emailChanging(value As String)
    End Sub
    Partial Private Sub Oncli_emailChanged()
    End Sub
    Partial Private Sub Oncli_contraseniaChanging(value As String)
    End Sub
    Partial Private Sub Oncli_contraseniaChanged()
    End Sub
    Partial Private Sub Oncli_fecha_creacionChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub Oncli_fecha_creacionChanged()
    End Sub
    Partial Private Sub Oncli_direccionChanging(value As String)
    End Sub
    Partial Private Sub Oncli_direccionChanged()
    End Sub
    Partial Private Sub Oncli_telefonoChanging(value As String)
    End Sub
    Partial Private Sub Oncli_telefonoChanged()
    End Sub
    Partial Private Sub Oncli_activoChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub Oncli_activoChanged()
    End Sub
    Partial Private Sub Oncli_Condicion_IvaChanging(value As String)
    End Sub
    Partial Private Sub Oncli_Condicion_IvaChanged()
    End Sub
    Partial Private Sub Oncli_apellidoChanging(value As String)
    End Sub
    Partial Private Sub Oncli_apellidoChanged()
    End Sub
    Partial Private Sub Oncli_fecha_bajaChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub Oncli_fecha_bajaChanged()
    End Sub
    Partial Private Sub Oncli_CPChanging(value As String)
    End Sub
    Partial Private Sub Oncli_CPChanged()
    End Sub
    Partial Private Sub Oncli_DNIChanging(value As String)
    End Sub
    Partial Private Sub Oncli_DNIChanged()
    End Sub
    Partial Private Sub Ontipo_cli_idChanging(value As Integer)
    End Sub
    Partial Private Sub Ontipo_cli_idChanged()
    End Sub
    Partial Private Sub Oncli_forma_pagoChanging(value As String)
    End Sub
    Partial Private Sub Oncli_forma_pagoChanged()
    End Sub
    Partial Private Sub Oncli_fecha_nacimientoChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub Oncli_fecha_nacimientoChanged()
    End Sub
    Partial Private Sub Oncli_borradoChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub Oncli_borradoChanged()
    End Sub
    Partial Private Sub Onplan_idChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Onplan_idChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Marcadores = New EntitySet(Of Marcadores)(AddressOf Me.attach_Marcadores, AddressOf Me.detach_Marcadores)
		Me._Clientes_Particulares = New EntitySet(Of Clientes_Particulares)(AddressOf Me.attach_Clientes_Particulares, AddressOf Me.detach_Clientes_Particulares)
		Me._Clientes_Empresas = New EntitySet(Of Clientes_Empresas)(AddressOf Me.attach_Clientes_Empresas, AddressOf Me.detach_Clientes_Empresas)
		Me._Contactos_Clientes = New EntitySet(Of Contactos_Clientes)(AddressOf Me.attach_Contactos_Clientes, AddressOf Me.detach_Contactos_Clientes)
		Me._Zonas = New EntitySet(Of Zonas)(AddressOf Me.attach_Zonas, AddressOf Me.detach_Zonas)
		Me._Recorridos = New EntitySet(Of Recorridos)(AddressOf Me.attach_Recorridos, AddressOf Me.detach_Recorridos)
		Me._Grupos = New EntitySet(Of Grupos)(AddressOf Me.attach_Grupos, AddressOf Me.detach_Grupos)
		Me._Vehiculos = New EntitySet(Of Vehiculo)(AddressOf Me.attach_Vehiculos, AddressOf Me.detach_Vehiculos)
		Me._Tipos_Clientes = CType(Nothing, EntityRef(Of Tipos_Clientes))
		Me._Plane = CType(Nothing, EntityRef(Of Plane))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_cli_id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property cli_id() As Integer
		Get
			Return Me._cli_id
		End Get
		Set
			If ((Me._cli_id = value)  _
						= false) Then
				Me.Oncli_idChanging(value)
				Me.SendPropertyChanging
				Me._cli_id = value
				Me.SendPropertyChanged("cli_id")
				Me.Oncli_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_cli_nombre", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property cli_nombre() As String
		Get
			Return Me._cli_nombre
		End Get
		Set
			If (String.Equals(Me._cli_nombre, value) = false) Then
				Me.Oncli_nombreChanging(value)
				Me.SendPropertyChanging
				Me._cli_nombre = value
				Me.SendPropertyChanged("cli_nombre")
				Me.Oncli_nombreChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_cli_email", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property cli_email() As String
		Get
			Return Me._cli_email
		End Get
		Set
			If (String.Equals(Me._cli_email, value) = false) Then
				Me.Oncli_emailChanging(value)
				Me.SendPropertyChanging
				Me._cli_email = value
				Me.SendPropertyChanged("cli_email")
				Me.Oncli_emailChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_cli_contrasenia", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property cli_contrasenia() As String
		Get
			Return Me._cli_contrasenia
		End Get
		Set
			If (String.Equals(Me._cli_contrasenia, value) = false) Then
				Me.Oncli_contraseniaChanging(value)
				Me.SendPropertyChanging
				Me._cli_contrasenia = value
				Me.SendPropertyChanged("cli_contrasenia")
				Me.Oncli_contraseniaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_cli_fecha_creacion", DbType:="DateTime")>  _
	Public Property cli_fecha_creacion() As System.Nullable(Of Date)
		Get
			Return Me._cli_fecha_creacion
		End Get
		Set
			If (Me._cli_fecha_creacion.Equals(value) = false) Then
				Me.Oncli_fecha_creacionChanging(value)
				Me.SendPropertyChanging
				Me._cli_fecha_creacion = value
				Me.SendPropertyChanged("cli_fecha_creacion")
				Me.Oncli_fecha_creacionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_cli_direccion", DbType:="VarChar(100)")>  _
	Public Property cli_direccion() As String
		Get
			Return Me._cli_direccion
		End Get
		Set
			If (String.Equals(Me._cli_direccion, value) = false) Then
				Me.Oncli_direccionChanging(value)
				Me.SendPropertyChanging
				Me._cli_direccion = value
				Me.SendPropertyChanged("cli_direccion")
				Me.Oncli_direccionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_cli_telefono", DbType:="VarChar(50)")>  _
	Public Property cli_telefono() As String
		Get
			Return Me._cli_telefono
		End Get
		Set
			If (String.Equals(Me._cli_telefono, value) = false) Then
				Me.Oncli_telefonoChanging(value)
				Me.SendPropertyChanging
				Me._cli_telefono = value
				Me.SendPropertyChanged("cli_telefono")
				Me.Oncli_telefonoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_cli_activo", DbType:="Bit")>  _
	Public Property cli_activo() As System.Nullable(Of Boolean)
		Get
			Return Me._cli_activo
		End Get
		Set
			If (Me._cli_activo.Equals(value) = false) Then
				Me.Oncli_activoChanging(value)
				Me.SendPropertyChanging
				Me._cli_activo = value
				Me.SendPropertyChanged("cli_activo")
				Me.Oncli_activoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_cli_Condicion_Iva", DbType:="VarChar(50)")>  _
	Public Property cli_Condicion_Iva() As String
		Get
			Return Me._cli_Condicion_Iva
		End Get
		Set
			If (String.Equals(Me._cli_Condicion_Iva, value) = false) Then
				Me.Oncli_Condicion_IvaChanging(value)
				Me.SendPropertyChanging
				Me._cli_Condicion_Iva = value
				Me.SendPropertyChanged("cli_Condicion_Iva")
				Me.Oncli_Condicion_IvaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_cli_apellido", DbType:="VarChar(50)")>  _
	Public Property cli_apellido() As String
		Get
			Return Me._cli_apellido
		End Get
		Set
			If (String.Equals(Me._cli_apellido, value) = false) Then
				Me.Oncli_apellidoChanging(value)
				Me.SendPropertyChanging
				Me._cli_apellido = value
				Me.SendPropertyChanged("cli_apellido")
				Me.Oncli_apellidoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_cli_fecha_baja", DbType:="DateTime")>  _
	Public Property cli_fecha_baja() As System.Nullable(Of Date)
		Get
			Return Me._cli_fecha_baja
		End Get
		Set
			If (Me._cli_fecha_baja.Equals(value) = false) Then
				Me.Oncli_fecha_bajaChanging(value)
				Me.SendPropertyChanging
				Me._cli_fecha_baja = value
				Me.SendPropertyChanged("cli_fecha_baja")
				Me.Oncli_fecha_bajaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_cli_CP", DbType:="VarChar(50)")>  _
	Public Property cli_CP() As String
		Get
			Return Me._cli_CP
		End Get
		Set
			If (String.Equals(Me._cli_CP, value) = false) Then
				Me.Oncli_CPChanging(value)
				Me.SendPropertyChanging
				Me._cli_CP = value
				Me.SendPropertyChanged("cli_CP")
				Me.Oncli_CPChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_cli_DNI", DbType:="VarChar(50)")>  _
	Public Property cli_DNI() As String
		Get
			Return Me._cli_DNI
		End Get
		Set
			If (String.Equals(Me._cli_DNI, value) = false) Then
				Me.Oncli_DNIChanging(value)
				Me.SendPropertyChanging
				Me._cli_DNI = value
				Me.SendPropertyChanged("cli_DNI")
				Me.Oncli_DNIChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_tipo_cli_id", DbType:="Int NOT NULL")>  _
	Public Property tipo_cli_id() As Integer
		Get
			Return Me._tipo_cli_id
		End Get
		Set
			If ((Me._tipo_cli_id = value)  _
						= false) Then
				If Me._Tipos_Clientes.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.Ontipo_cli_idChanging(value)
				Me.SendPropertyChanging
				Me._tipo_cli_id = value
				Me.SendPropertyChanged("tipo_cli_id")
				Me.Ontipo_cli_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_cli_forma_pago", DbType:="VarChar(50)")>  _
	Public Property cli_forma_pago() As String
		Get
			Return Me._cli_forma_pago
		End Get
		Set
			If (String.Equals(Me._cli_forma_pago, value) = false) Then
				Me.Oncli_forma_pagoChanging(value)
				Me.SendPropertyChanging
				Me._cli_forma_pago = value
				Me.SendPropertyChanged("cli_forma_pago")
				Me.Oncli_forma_pagoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_cli_fecha_nacimiento", DbType:="DateTime")>  _
	Public Property cli_fecha_nacimiento() As System.Nullable(Of Date)
		Get
			Return Me._cli_fecha_nacimiento
		End Get
		Set
			If (Me._cli_fecha_nacimiento.Equals(value) = false) Then
				Me.Oncli_fecha_nacimientoChanging(value)
				Me.SendPropertyChanging
				Me._cli_fecha_nacimiento = value
				Me.SendPropertyChanged("cli_fecha_nacimiento")
				Me.Oncli_fecha_nacimientoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_cli_borrado", DbType:="Bit")>  _
	Public Property cli_borrado() As System.Nullable(Of Boolean)
		Get
			Return Me._cli_borrado
		End Get
		Set
			If (Me._cli_borrado.Equals(value) = false) Then
				Me.Oncli_borradoChanging(value)
				Me.SendPropertyChanging
				Me._cli_borrado = value
				Me.SendPropertyChanged("cli_borrado")
				Me.Oncli_borradoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_plan_id", DbType:="Int")>  _
	Public Property plan_id() As System.Nullable(Of Integer)
		Get
			Return Me._plan_id
		End Get
		Set
			If (Me._plan_id.Equals(value) = false) Then
				If Me._Plane.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.Onplan_idChanging(value)
				Me.SendPropertyChanging
				Me._plan_id = value
				Me.SendPropertyChanged("plan_id")
				Me.Onplan_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Cliente_Marcadores", Storage:="_Marcadores", ThisKey:="cli_id", OtherKey:="cli_id")>  _
	Public Property Marcadores() As EntitySet(Of Marcadores)
		Get
			Return Me._Marcadores
		End Get
		Set
			Me._Marcadores.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Cliente_Clientes_Particulares", Storage:="_Clientes_Particulares", ThisKey:="cli_id", OtherKey:="cli_id")>  _
	Public Property Clientes_Particulares() As EntitySet(Of Clientes_Particulares)
		Get
			Return Me._Clientes_Particulares
		End Get
		Set
			Me._Clientes_Particulares.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Cliente_Clientes_Empresas", Storage:="_Clientes_Empresas", ThisKey:="cli_id", OtherKey:="cli_id")>  _
	Public Property Clientes_Empresas() As EntitySet(Of Clientes_Empresas)
		Get
			Return Me._Clientes_Empresas
		End Get
		Set
			Me._Clientes_Empresas.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Cliente_Contactos_Clientes", Storage:="_Contactos_Clientes", ThisKey:="cli_id", OtherKey:="cli_id")>  _
	Public Property Contactos_Clientes() As EntitySet(Of Contactos_Clientes)
		Get
			Return Me._Contactos_Clientes
		End Get
		Set
			Me._Contactos_Clientes.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Cliente_Zonas", Storage:="_Zonas", ThisKey:="cli_id", OtherKey:="cli_id")>  _
	Public Property Zonas() As EntitySet(Of Zonas)
		Get
			Return Me._Zonas
		End Get
		Set
			Me._Zonas.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Cliente_Recorridos", Storage:="_Recorridos", ThisKey:="cli_id", OtherKey:="cli_id")>  _
	Public Property Recorridos() As EntitySet(Of Recorridos)
		Get
			Return Me._Recorridos
		End Get
		Set
			Me._Recorridos.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Cliente_Grupos", Storage:="_Grupos", ThisKey:="cli_id", OtherKey:="cli_id")>  _
	Public Property Grupos() As EntitySet(Of Grupos)
		Get
			Return Me._Grupos
		End Get
		Set
			Me._Grupos.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Cliente_Vehiculo", Storage:="_Vehiculos", ThisKey:="cli_id", OtherKey:="cli_id")>  _
	Public Property Vehiculos() As EntitySet(Of Vehiculo)
		Get
			Return Me._Vehiculos
		End Get
		Set
			Me._Vehiculos.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Tipos_Clientes_Cliente", Storage:="_Tipos_Clientes", ThisKey:="tipo_cli_id", OtherKey:="tipo_cli_id", IsForeignKey:=true)>  _
	Public Property Tipos_Clientes() As Tipos_Clientes
		Get
			Return Me._Tipos_Clientes.Entity
		End Get
		Set
			Dim previousValue As Tipos_Clientes = Me._Tipos_Clientes.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Tipos_Clientes.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Tipos_Clientes.Entity = Nothing
					previousValue.Clientes.Remove(Me)
				End If
				Me._Tipos_Clientes.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Clientes.Add(Me)
					Me._tipo_cli_id = value.tipo_cli_id
				Else
					Me._tipo_cli_id = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Tipos_Clientes")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Plane_Cliente", Storage:="_Plane", ThisKey:="plan_id", OtherKey:="plan_id", IsForeignKey:=true)>  _
	Public Property Plane() As Plane
		Get
			Return Me._Plane.Entity
		End Get
		Set
			Dim previousValue As Plane = Me._Plane.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Plane.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Plane.Entity = Nothing
					previousValue.Clientes.Remove(Me)
				End If
				Me._Plane.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Clientes.Add(Me)
					Me._plan_id = value.plan_id
				Else
					Me._plan_id = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("Plane")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Marcadores(ByVal entity As Marcadores)
		Me.SendPropertyChanging
		entity.Cliente = Me
	End Sub
	
	Private Sub detach_Marcadores(ByVal entity As Marcadores)
		Me.SendPropertyChanging
		entity.Cliente = Nothing
	End Sub
	
	Private Sub attach_Clientes_Particulares(ByVal entity As Clientes_Particulares)
		Me.SendPropertyChanging
		entity.Cliente = Me
	End Sub
	
	Private Sub detach_Clientes_Particulares(ByVal entity As Clientes_Particulares)
		Me.SendPropertyChanging
		entity.Cliente = Nothing
	End Sub
	
	Private Sub attach_Clientes_Empresas(ByVal entity As Clientes_Empresas)
		Me.SendPropertyChanging
		entity.Cliente = Me
	End Sub
	
	Private Sub detach_Clientes_Empresas(ByVal entity As Clientes_Empresas)
		Me.SendPropertyChanging
		entity.Cliente = Nothing
	End Sub
	
	Private Sub attach_Contactos_Clientes(ByVal entity As Contactos_Clientes)
		Me.SendPropertyChanging
		entity.Cliente = Me
	End Sub
	
	Private Sub detach_Contactos_Clientes(ByVal entity As Contactos_Clientes)
		Me.SendPropertyChanging
		entity.Cliente = Nothing
	End Sub
	
	Private Sub attach_Zonas(ByVal entity As Zonas)
		Me.SendPropertyChanging
		entity.Cliente = Me
	End Sub
	
	Private Sub detach_Zonas(ByVal entity As Zonas)
		Me.SendPropertyChanging
		entity.Cliente = Nothing
	End Sub
	
	Private Sub attach_Recorridos(ByVal entity As Recorridos)
		Me.SendPropertyChanging
		entity.Cliente = Me
	End Sub
	
	Private Sub detach_Recorridos(ByVal entity As Recorridos)
		Me.SendPropertyChanging
		entity.Cliente = Nothing
	End Sub
	
	Private Sub attach_Grupos(ByVal entity As Grupos)
		Me.SendPropertyChanging
		entity.Cliente = Me
	End Sub
	
	Private Sub detach_Grupos(ByVal entity As Grupos)
		Me.SendPropertyChanging
		entity.Cliente = Nothing
	End Sub
	
	Private Sub attach_Vehiculos(ByVal entity As Vehiculo)
		Me.SendPropertyChanging
		entity.Cliente = Me
	End Sub
	
	Private Sub detach_Vehiculos(ByVal entity As Vehiculo)
		Me.SendPropertyChanging
		entity.Cliente = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Planes")>  _
Partial Public Class Plane
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _plan_id As Integer
	
	Private _plan_nombre As String
	
	Private _plan_activo As Boolean
	
	Private _Clientes As EntitySet(Of Cliente)
	
	Private _Planes_Parametros As EntitySet(Of Planes_Parametro)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub Onplan_idChanging(value As Integer)
    End Sub
    Partial Private Sub Onplan_idChanged()
    End Sub
    Partial Private Sub Onplan_nombreChanging(value As String)
    End Sub
    Partial Private Sub Onplan_nombreChanged()
    End Sub
    Partial Private Sub Onplan_activoChanging(value As Boolean)
    End Sub
    Partial Private Sub Onplan_activoChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Clientes = New EntitySet(Of Cliente)(AddressOf Me.attach_Clientes, AddressOf Me.detach_Clientes)
		Me._Planes_Parametros = New EntitySet(Of Planes_Parametro)(AddressOf Me.attach_Planes_Parametros, AddressOf Me.detach_Planes_Parametros)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_plan_id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property plan_id() As Integer
		Get
			Return Me._plan_id
		End Get
		Set
			If ((Me._plan_id = value)  _
						= false) Then
				Me.Onplan_idChanging(value)
				Me.SendPropertyChanging
				Me._plan_id = value
				Me.SendPropertyChanged("plan_id")
				Me.Onplan_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_plan_nombre", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property plan_nombre() As String
		Get
			Return Me._plan_nombre
		End Get
		Set
			If (String.Equals(Me._plan_nombre, value) = false) Then
				Me.Onplan_nombreChanging(value)
				Me.SendPropertyChanging
				Me._plan_nombre = value
				Me.SendPropertyChanged("plan_nombre")
				Me.Onplan_nombreChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_plan_activo", DbType:="Bit NOT NULL")>  _
	Public Property plan_activo() As Boolean
		Get
			Return Me._plan_activo
		End Get
		Set
			If ((Me._plan_activo = value)  _
						= false) Then
				Me.Onplan_activoChanging(value)
				Me.SendPropertyChanging
				Me._plan_activo = value
				Me.SendPropertyChanged("plan_activo")
				Me.Onplan_activoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Plane_Cliente", Storage:="_Clientes", ThisKey:="plan_id", OtherKey:="plan_id")>  _
	Public Property Clientes() As EntitySet(Of Cliente)
		Get
			Return Me._Clientes
		End Get
		Set
			Me._Clientes.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Plane_Planes_Parametro", Storage:="_Planes_Parametros", ThisKey:="plan_id", OtherKey:="plan_id")>  _
	Public Property Planes_Parametros() As EntitySet(Of Planes_Parametro)
		Get
			Return Me._Planes_Parametros
		End Get
		Set
			Me._Planes_Parametros.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Clientes(ByVal entity As Cliente)
		Me.SendPropertyChanging
		entity.Plane = Me
	End Sub
	
	Private Sub detach_Clientes(ByVal entity As Cliente)
		Me.SendPropertyChanging
		entity.Plane = Nothing
	End Sub
	
	Private Sub attach_Planes_Parametros(ByVal entity As Planes_Parametro)
		Me.SendPropertyChanging
		entity.Plane = Me
	End Sub
	
	Private Sub detach_Planes_Parametros(ByVal entity As Planes_Parametro)
		Me.SendPropertyChanging
		entity.Plane = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Planes_Parametros")>  _
Partial Public Class Planes_Parametro
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _plan_item_id As Integer
	
	Private _plan_id As Integer
	
	Private _plan_item_valor As String
	
	Private _plan_item_nombre As String
	
	Private _Plane As EntityRef(Of Plane)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub Onplan_item_idChanging(value As Integer)
    End Sub
    Partial Private Sub Onplan_item_idChanged()
    End Sub
    Partial Private Sub Onplan_idChanging(value As Integer)
    End Sub
    Partial Private Sub Onplan_idChanged()
    End Sub
    Partial Private Sub Onplan_item_valorChanging(value As String)
    End Sub
    Partial Private Sub Onplan_item_valorChanged()
    End Sub
    Partial Private Sub Onplan_item_nombreChanging(value As String)
    End Sub
    Partial Private Sub Onplan_item_nombreChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Plane = CType(Nothing, EntityRef(Of Plane))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_plan_item_id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property plan_item_id() As Integer
		Get
			Return Me._plan_item_id
		End Get
		Set
			If ((Me._plan_item_id = value)  _
						= false) Then
				Me.Onplan_item_idChanging(value)
				Me.SendPropertyChanging
				Me._plan_item_id = value
				Me.SendPropertyChanged("plan_item_id")
				Me.Onplan_item_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_plan_id", DbType:="Int NOT NULL")>  _
	Public Property plan_id() As Integer
		Get
			Return Me._plan_id
		End Get
		Set
			If ((Me._plan_id = value)  _
						= false) Then
				If Me._Plane.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.Onplan_idChanging(value)
				Me.SendPropertyChanging
				Me._plan_id = value
				Me.SendPropertyChanged("plan_id")
				Me.Onplan_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_plan_item_valor", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property plan_item_valor() As String
		Get
			Return Me._plan_item_valor
		End Get
		Set
			If (String.Equals(Me._plan_item_valor, value) = false) Then
				Me.Onplan_item_valorChanging(value)
				Me.SendPropertyChanging
				Me._plan_item_valor = value
				Me.SendPropertyChanged("plan_item_valor")
				Me.Onplan_item_valorChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_plan_item_nombre", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property plan_item_nombre() As String
		Get
			Return Me._plan_item_nombre
		End Get
		Set
			If (String.Equals(Me._plan_item_nombre, value) = false) Then
				Me.Onplan_item_nombreChanging(value)
				Me.SendPropertyChanging
				Me._plan_item_nombre = value
				Me.SendPropertyChanged("plan_item_nombre")
				Me.Onplan_item_nombreChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Plane_Planes_Parametro", Storage:="_Plane", ThisKey:="plan_id", OtherKey:="plan_id", IsForeignKey:=true)>  _
	Public Property Plane() As Plane
		Get
			Return Me._Plane.Entity
		End Get
		Set
			Dim previousValue As Plane = Me._Plane.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Plane.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Plane.Entity = Nothing
					previousValue.Planes_Parametros.Remove(Me)
				End If
				Me._Plane.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Planes_Parametros.Add(Me)
					Me._plan_id = value.plan_id
				Else
					Me._plan_id = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Plane")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Vehiculos")>  _
Partial Public Class Vehiculo
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _veh_id As Integer
	
	Private _cli_id As Integer
	
	Private _veh_descripcion As String
	
	Private _veh_patente As String
	
	Private _veh_tipo_id As Integer
	
	Private _veh_imagen As String
	
	Private _mod_id As String
	
	Private _veh_nombre_conductor As String
	
	Private _veh_activo As System.Nullable(Of Boolean)
	
	Private _veh_marca As String
	
	Private _veh_modelo As String
	
	Private _veh_color As String
	
	Private _tip_uso_id As System.Nullable(Of Integer)
	
	Private _veh_kilometros As System.Nullable(Of Integer)
	
	Private _veh_modulo_sensor As System.Nullable(Of Boolean)
	
	Private _veh_kilometros_acumulados As System.Nullable(Of Decimal)
	
	Private _Alertas_Zonas As EntitySet(Of Alertas_Zonas)
	
	Private _Alertas_Recordatorios_Por_Fechas As EntitySet(Of Alertas_Recordatorios_Por_Fechas)
	
	Private _Alertas_Velocidad_Configuradas As EntitySet(Of Alertas_Velocidad_Configuradas)
	
	Private _Alertas_Direcciones As EntitySet(Of Alertas_Direcciones)
	
	Private _Sensores_Configurados As EntitySet(Of Sensores_Configurados)
	
	Private _Sensores_Moviles As EntitySet(Of Sensores_Moviles)
	
	Private _Grupos_Vehiculos As EntitySet(Of Grupos_Vehiculos)
	
	Private _Alertas_Recorridos As EntitySet(Of Alertas_Recorridos)
	
	Private _Alarmas_Fuera_Horarios As EntitySet(Of Alarmas_Fuera_Horario)
	
	Private _Alarma_Inicio_Actividads As EntitySet(Of Alarma_Inicio_Actividad)
	
	Private _Alarmas_Inactividads As EntitySet(Of Alarmas_Inactividad)
	
	Private _Alamas_Kms_Excedidos As EntitySet(Of Alamas_Kms_Excedidos)
	
	Private _Cortes_Corrientes As EntitySet(Of Cortes_Corriente)
	
	Private _Alertas_Recordatorios_Por_Kms As EntitySet(Of Alertas_Recordatorios_Por_Km)
	
	Private _Cliente As EntityRef(Of Cliente)
	
	Private _Tipos_Usos_Moviles As EntityRef(Of Tipos_Usos_Moviles)
	
	Private _Tipos_Vehiculos As EntityRef(Of Tipos_Vehiculos)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub Onveh_idChanging(value As Integer)
    End Sub
    Partial Private Sub Onveh_idChanged()
    End Sub
    Partial Private Sub Oncli_idChanging(value As Integer)
    End Sub
    Partial Private Sub Oncli_idChanged()
    End Sub
    Partial Private Sub Onveh_descripcionChanging(value As String)
    End Sub
    Partial Private Sub Onveh_descripcionChanged()
    End Sub
    Partial Private Sub Onveh_patenteChanging(value As String)
    End Sub
    Partial Private Sub Onveh_patenteChanged()
    End Sub
    Partial Private Sub Onveh_tipo_idChanging(value As Integer)
    End Sub
    Partial Private Sub Onveh_tipo_idChanged()
    End Sub
    Partial Private Sub Onveh_imagenChanging(value As String)
    End Sub
    Partial Private Sub Onveh_imagenChanged()
    End Sub
    Partial Private Sub Onmod_idChanging(value As String)
    End Sub
    Partial Private Sub Onmod_idChanged()
    End Sub
    Partial Private Sub Onveh_nombre_conductorChanging(value As String)
    End Sub
    Partial Private Sub Onveh_nombre_conductorChanged()
    End Sub
    Partial Private Sub Onveh_activoChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub Onveh_activoChanged()
    End Sub
    Partial Private Sub Onveh_marcaChanging(value As String)
    End Sub
    Partial Private Sub Onveh_marcaChanged()
    End Sub
    Partial Private Sub Onveh_modeloChanging(value As String)
    End Sub
    Partial Private Sub Onveh_modeloChanged()
    End Sub
    Partial Private Sub Onveh_colorChanging(value As String)
    End Sub
    Partial Private Sub Onveh_colorChanged()
    End Sub
    Partial Private Sub Ontip_uso_idChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Ontip_uso_idChanged()
    End Sub
    Partial Private Sub Onveh_kilometrosChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Onveh_kilometrosChanged()
    End Sub
    Partial Private Sub Onveh_modulo_sensorChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub Onveh_modulo_sensorChanged()
    End Sub
    Partial Private Sub Onveh_kilometros_acumuladosChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub Onveh_kilometros_acumuladosChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Alertas_Zonas = New EntitySet(Of Alertas_Zonas)(AddressOf Me.attach_Alertas_Zonas, AddressOf Me.detach_Alertas_Zonas)
		Me._Alertas_Recordatorios_Por_Fechas = New EntitySet(Of Alertas_Recordatorios_Por_Fechas)(AddressOf Me.attach_Alertas_Recordatorios_Por_Fechas, AddressOf Me.detach_Alertas_Recordatorios_Por_Fechas)
		Me._Alertas_Velocidad_Configuradas = New EntitySet(Of Alertas_Velocidad_Configuradas)(AddressOf Me.attach_Alertas_Velocidad_Configuradas, AddressOf Me.detach_Alertas_Velocidad_Configuradas)
		Me._Alertas_Direcciones = New EntitySet(Of Alertas_Direcciones)(AddressOf Me.attach_Alertas_Direcciones, AddressOf Me.detach_Alertas_Direcciones)
		Me._Sensores_Configurados = New EntitySet(Of Sensores_Configurados)(AddressOf Me.attach_Sensores_Configurados, AddressOf Me.detach_Sensores_Configurados)
		Me._Sensores_Moviles = New EntitySet(Of Sensores_Moviles)(AddressOf Me.attach_Sensores_Moviles, AddressOf Me.detach_Sensores_Moviles)
		Me._Grupos_Vehiculos = New EntitySet(Of Grupos_Vehiculos)(AddressOf Me.attach_Grupos_Vehiculos, AddressOf Me.detach_Grupos_Vehiculos)
		Me._Alertas_Recorridos = New EntitySet(Of Alertas_Recorridos)(AddressOf Me.attach_Alertas_Recorridos, AddressOf Me.detach_Alertas_Recorridos)
		Me._Alarmas_Fuera_Horarios = New EntitySet(Of Alarmas_Fuera_Horario)(AddressOf Me.attach_Alarmas_Fuera_Horarios, AddressOf Me.detach_Alarmas_Fuera_Horarios)
		Me._Alarma_Inicio_Actividads = New EntitySet(Of Alarma_Inicio_Actividad)(AddressOf Me.attach_Alarma_Inicio_Actividads, AddressOf Me.detach_Alarma_Inicio_Actividads)
		Me._Alarmas_Inactividads = New EntitySet(Of Alarmas_Inactividad)(AddressOf Me.attach_Alarmas_Inactividads, AddressOf Me.detach_Alarmas_Inactividads)
		Me._Alamas_Kms_Excedidos = New EntitySet(Of Alamas_Kms_Excedidos)(AddressOf Me.attach_Alamas_Kms_Excedidos, AddressOf Me.detach_Alamas_Kms_Excedidos)
		Me._Cortes_Corrientes = New EntitySet(Of Cortes_Corriente)(AddressOf Me.attach_Cortes_Corrientes, AddressOf Me.detach_Cortes_Corrientes)
		Me._Alertas_Recordatorios_Por_Kms = New EntitySet(Of Alertas_Recordatorios_Por_Km)(AddressOf Me.attach_Alertas_Recordatorios_Por_Kms, AddressOf Me.detach_Alertas_Recordatorios_Por_Kms)
		Me._Cliente = CType(Nothing, EntityRef(Of Cliente))
		Me._Tipos_Usos_Moviles = CType(Nothing, EntityRef(Of Tipos_Usos_Moviles))
		Me._Tipos_Vehiculos = CType(Nothing, EntityRef(Of Tipos_Vehiculos))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_veh_id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property veh_id() As Integer
		Get
			Return Me._veh_id
		End Get
		Set
			If ((Me._veh_id = value)  _
						= false) Then
				Me.Onveh_idChanging(value)
				Me.SendPropertyChanging
				Me._veh_id = value
				Me.SendPropertyChanged("veh_id")
				Me.Onveh_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_cli_id", DbType:="Int NOT NULL")>  _
	Public Property cli_id() As Integer
		Get
			Return Me._cli_id
		End Get
		Set
			If ((Me._cli_id = value)  _
						= false) Then
				If Me._Cliente.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.Oncli_idChanging(value)
				Me.SendPropertyChanging
				Me._cli_id = value
				Me.SendPropertyChanged("cli_id")
				Me.Oncli_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_veh_descripcion", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property veh_descripcion() As String
		Get
			Return Me._veh_descripcion
		End Get
		Set
			If (String.Equals(Me._veh_descripcion, value) = false) Then
				Me.Onveh_descripcionChanging(value)
				Me.SendPropertyChanging
				Me._veh_descripcion = value
				Me.SendPropertyChanged("veh_descripcion")
				Me.Onveh_descripcionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_veh_patente", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property veh_patente() As String
		Get
			Return Me._veh_patente
		End Get
		Set
			If (String.Equals(Me._veh_patente, value) = false) Then
				Me.Onveh_patenteChanging(value)
				Me.SendPropertyChanging
				Me._veh_patente = value
				Me.SendPropertyChanged("veh_patente")
				Me.Onveh_patenteChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_veh_tipo_id", DbType:="Int NOT NULL")>  _
	Public Property veh_tipo_id() As Integer
		Get
			Return Me._veh_tipo_id
		End Get
		Set
			If ((Me._veh_tipo_id = value)  _
						= false) Then
				If Me._Tipos_Vehiculos.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.Onveh_tipo_idChanging(value)
				Me.SendPropertyChanging
				Me._veh_tipo_id = value
				Me.SendPropertyChanged("veh_tipo_id")
				Me.Onveh_tipo_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_veh_imagen", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property veh_imagen() As String
		Get
			Return Me._veh_imagen
		End Get
		Set
			If (String.Equals(Me._veh_imagen, value) = false) Then
				Me.Onveh_imagenChanging(value)
				Me.SendPropertyChanging
				Me._veh_imagen = value
				Me.SendPropertyChanged("veh_imagen")
				Me.Onveh_imagenChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_mod_id", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property mod_id() As String
		Get
			Return Me._mod_id
		End Get
		Set
			If (String.Equals(Me._mod_id, value) = false) Then
				Me.Onmod_idChanging(value)
				Me.SendPropertyChanging
				Me._mod_id = value
				Me.SendPropertyChanged("mod_id")
				Me.Onmod_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_veh_nombre_conductor", DbType:="VarChar(100)")>  _
	Public Property veh_nombre_conductor() As String
		Get
			Return Me._veh_nombre_conductor
		End Get
		Set
			If (String.Equals(Me._veh_nombre_conductor, value) = false) Then
				Me.Onveh_nombre_conductorChanging(value)
				Me.SendPropertyChanging
				Me._veh_nombre_conductor = value
				Me.SendPropertyChanged("veh_nombre_conductor")
				Me.Onveh_nombre_conductorChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_veh_activo", DbType:="Bit")>  _
	Public Property veh_activo() As System.Nullable(Of Boolean)
		Get
			Return Me._veh_activo
		End Get
		Set
			If (Me._veh_activo.Equals(value) = false) Then
				Me.Onveh_activoChanging(value)
				Me.SendPropertyChanging
				Me._veh_activo = value
				Me.SendPropertyChanged("veh_activo")
				Me.Onveh_activoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_veh_marca", DbType:="VarChar(50)")>  _
	Public Property veh_marca() As String
		Get
			Return Me._veh_marca
		End Get
		Set
			If (String.Equals(Me._veh_marca, value) = false) Then
				Me.Onveh_marcaChanging(value)
				Me.SendPropertyChanging
				Me._veh_marca = value
				Me.SendPropertyChanged("veh_marca")
				Me.Onveh_marcaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_veh_modelo", DbType:="VarChar(50)")>  _
	Public Property veh_modelo() As String
		Get
			Return Me._veh_modelo
		End Get
		Set
			If (String.Equals(Me._veh_modelo, value) = false) Then
				Me.Onveh_modeloChanging(value)
				Me.SendPropertyChanging
				Me._veh_modelo = value
				Me.SendPropertyChanged("veh_modelo")
				Me.Onveh_modeloChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_veh_color", DbType:="VarChar(50)")>  _
	Public Property veh_color() As String
		Get
			Return Me._veh_color
		End Get
		Set
			If (String.Equals(Me._veh_color, value) = false) Then
				Me.Onveh_colorChanging(value)
				Me.SendPropertyChanging
				Me._veh_color = value
				Me.SendPropertyChanged("veh_color")
				Me.Onveh_colorChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_tip_uso_id", DbType:="Int")>  _
	Public Property tip_uso_id() As System.Nullable(Of Integer)
		Get
			Return Me._tip_uso_id
		End Get
		Set
			If (Me._tip_uso_id.Equals(value) = false) Then
				If Me._Tipos_Usos_Moviles.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.Ontip_uso_idChanging(value)
				Me.SendPropertyChanging
				Me._tip_uso_id = value
				Me.SendPropertyChanged("tip_uso_id")
				Me.Ontip_uso_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_veh_kilometros", DbType:="Int")>  _
	Public Property veh_kilometros() As System.Nullable(Of Integer)
		Get
			Return Me._veh_kilometros
		End Get
		Set
			If (Me._veh_kilometros.Equals(value) = false) Then
				Me.Onveh_kilometrosChanging(value)
				Me.SendPropertyChanging
				Me._veh_kilometros = value
				Me.SendPropertyChanged("veh_kilometros")
				Me.Onveh_kilometrosChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_veh_modulo_sensor", DbType:="Bit")>  _
	Public Property veh_modulo_sensor() As System.Nullable(Of Boolean)
		Get
			Return Me._veh_modulo_sensor
		End Get
		Set
			If (Me._veh_modulo_sensor.Equals(value) = false) Then
				Me.Onveh_modulo_sensorChanging(value)
				Me.SendPropertyChanging
				Me._veh_modulo_sensor = value
				Me.SendPropertyChanged("veh_modulo_sensor")
				Me.Onveh_modulo_sensorChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_veh_kilometros_acumulados", DbType:="Decimal(18,2)")>  _
	Public Property veh_kilometros_acumulados() As System.Nullable(Of Decimal)
		Get
			Return Me._veh_kilometros_acumulados
		End Get
		Set
			If (Me._veh_kilometros_acumulados.Equals(value) = false) Then
				Me.Onveh_kilometros_acumuladosChanging(value)
				Me.SendPropertyChanging
				Me._veh_kilometros_acumulados = value
				Me.SendPropertyChanged("veh_kilometros_acumulados")
				Me.Onveh_kilometros_acumuladosChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Vehiculo_Alertas_Zonas", Storage:="_Alertas_Zonas", ThisKey:="veh_id", OtherKey:="veh_id")>  _
	Public Property Alertas_Zonas() As EntitySet(Of Alertas_Zonas)
		Get
			Return Me._Alertas_Zonas
		End Get
		Set
			Me._Alertas_Zonas.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Vehiculo_Alertas_Recordatorios_Por_Fechas", Storage:="_Alertas_Recordatorios_Por_Fechas", ThisKey:="veh_id", OtherKey:="veh_id")>  _
	Public Property Alertas_Recordatorios_Por_Fechas() As EntitySet(Of Alertas_Recordatorios_Por_Fechas)
		Get
			Return Me._Alertas_Recordatorios_Por_Fechas
		End Get
		Set
			Me._Alertas_Recordatorios_Por_Fechas.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Vehiculo_Alertas_Velocidad_Configuradas", Storage:="_Alertas_Velocidad_Configuradas", ThisKey:="veh_id", OtherKey:="veh_id")>  _
	Public Property Alertas_Velocidad_Configuradas() As EntitySet(Of Alertas_Velocidad_Configuradas)
		Get
			Return Me._Alertas_Velocidad_Configuradas
		End Get
		Set
			Me._Alertas_Velocidad_Configuradas.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Vehiculo_Alertas_Direcciones", Storage:="_Alertas_Direcciones", ThisKey:="veh_id", OtherKey:="veh_id")>  _
	Public Property Alertas_Direcciones() As EntitySet(Of Alertas_Direcciones)
		Get
			Return Me._Alertas_Direcciones
		End Get
		Set
			Me._Alertas_Direcciones.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Vehiculo_Sensores_Configurados", Storage:="_Sensores_Configurados", ThisKey:="veh_id", OtherKey:="veh_id")>  _
	Public Property Sensores_Configurados() As EntitySet(Of Sensores_Configurados)
		Get
			Return Me._Sensores_Configurados
		End Get
		Set
			Me._Sensores_Configurados.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Vehiculo_Sensores_Moviles", Storage:="_Sensores_Moviles", ThisKey:="veh_id", OtherKey:="veh_id")>  _
	Public Property Sensores_Moviles() As EntitySet(Of Sensores_Moviles)
		Get
			Return Me._Sensores_Moviles
		End Get
		Set
			Me._Sensores_Moviles.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Vehiculo_Grupos_Vehiculos", Storage:="_Grupos_Vehiculos", ThisKey:="veh_id", OtherKey:="veh_id")>  _
	Public Property Grupos_Vehiculos() As EntitySet(Of Grupos_Vehiculos)
		Get
			Return Me._Grupos_Vehiculos
		End Get
		Set
			Me._Grupos_Vehiculos.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Vehiculo_Alertas_Recorridos", Storage:="_Alertas_Recorridos", ThisKey:="veh_id", OtherKey:="veh_id")>  _
	Public Property Alertas_Recorridos() As EntitySet(Of Alertas_Recorridos)
		Get
			Return Me._Alertas_Recorridos
		End Get
		Set
			Me._Alertas_Recorridos.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Vehiculo_Alarmas_Fuera_Horario", Storage:="_Alarmas_Fuera_Horarios", ThisKey:="veh_id", OtherKey:="veh_id")>  _
	Public Property Alarmas_Fuera_Horarios() As EntitySet(Of Alarmas_Fuera_Horario)
		Get
			Return Me._Alarmas_Fuera_Horarios
		End Get
		Set
			Me._Alarmas_Fuera_Horarios.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Vehiculo_Alarma_Inicio_Actividad", Storage:="_Alarma_Inicio_Actividads", ThisKey:="veh_id", OtherKey:="veh_id")>  _
	Public Property Alarma_Inicio_Actividads() As EntitySet(Of Alarma_Inicio_Actividad)
		Get
			Return Me._Alarma_Inicio_Actividads
		End Get
		Set
			Me._Alarma_Inicio_Actividads.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Vehiculo_Alarmas_Inactividad", Storage:="_Alarmas_Inactividads", ThisKey:="veh_id", OtherKey:="veh_id")>  _
	Public Property Alarmas_Inactividads() As EntitySet(Of Alarmas_Inactividad)
		Get
			Return Me._Alarmas_Inactividads
		End Get
		Set
			Me._Alarmas_Inactividads.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Vehiculo_Alamas_Kms_Excedidos", Storage:="_Alamas_Kms_Excedidos", ThisKey:="veh_id", OtherKey:="veh_id")>  _
	Public Property Alamas_Kms_Excedidos() As EntitySet(Of Alamas_Kms_Excedidos)
		Get
			Return Me._Alamas_Kms_Excedidos
		End Get
		Set
			Me._Alamas_Kms_Excedidos.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Vehiculo_Cortes_Corriente", Storage:="_Cortes_Corrientes", ThisKey:="veh_id", OtherKey:="veh_id")>  _
	Public Property Cortes_Corrientes() As EntitySet(Of Cortes_Corriente)
		Get
			Return Me._Cortes_Corrientes
		End Get
		Set
			Me._Cortes_Corrientes.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Vehiculo_Alertas_Recordatorios_Por_Km", Storage:="_Alertas_Recordatorios_Por_Kms", ThisKey:="veh_id", OtherKey:="veh_id")>  _
	Public Property Alertas_Recordatorios_Por_Kms() As EntitySet(Of Alertas_Recordatorios_Por_Km)
		Get
			Return Me._Alertas_Recordatorios_Por_Kms
		End Get
		Set
			Me._Alertas_Recordatorios_Por_Kms.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Cliente_Vehiculo", Storage:="_Cliente", ThisKey:="cli_id", OtherKey:="cli_id", IsForeignKey:=true)>  _
	Public Property Cliente() As Cliente
		Get
			Return Me._Cliente.Entity
		End Get
		Set
			Dim previousValue As Cliente = Me._Cliente.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Cliente.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Cliente.Entity = Nothing
					previousValue.Vehiculos.Remove(Me)
				End If
				Me._Cliente.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Vehiculos.Add(Me)
					Me._cli_id = value.cli_id
				Else
					Me._cli_id = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Cliente")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Tipos_Usos_Moviles_Vehiculo", Storage:="_Tipos_Usos_Moviles", ThisKey:="tip_uso_id", OtherKey:="tipo_uso_id", IsForeignKey:=true)>  _
	Public Property Tipos_Usos_Moviles() As Tipos_Usos_Moviles
		Get
			Return Me._Tipos_Usos_Moviles.Entity
		End Get
		Set
			Dim previousValue As Tipos_Usos_Moviles = Me._Tipos_Usos_Moviles.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Tipos_Usos_Moviles.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Tipos_Usos_Moviles.Entity = Nothing
					previousValue.Vehiculos.Remove(Me)
				End If
				Me._Tipos_Usos_Moviles.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Vehiculos.Add(Me)
					Me._tip_uso_id = value.tipo_uso_id
				Else
					Me._tip_uso_id = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("Tipos_Usos_Moviles")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Tipos_Vehiculos_Vehiculo", Storage:="_Tipos_Vehiculos", ThisKey:="veh_tipo_id", OtherKey:="veh_tipo_id", IsForeignKey:=true)>  _
	Public Property Tipos_Vehiculos() As Tipos_Vehiculos
		Get
			Return Me._Tipos_Vehiculos.Entity
		End Get
		Set
			Dim previousValue As Tipos_Vehiculos = Me._Tipos_Vehiculos.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Tipos_Vehiculos.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Tipos_Vehiculos.Entity = Nothing
					previousValue.Vehiculos.Remove(Me)
				End If
				Me._Tipos_Vehiculos.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Vehiculos.Add(Me)
					Me._veh_tipo_id = value.veh_tipo_id
				Else
					Me._veh_tipo_id = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Tipos_Vehiculos")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Alertas_Zonas(ByVal entity As Alertas_Zonas)
		Me.SendPropertyChanging
		entity.Vehiculo = Me
	End Sub
	
	Private Sub detach_Alertas_Zonas(ByVal entity As Alertas_Zonas)
		Me.SendPropertyChanging
		entity.Vehiculo = Nothing
	End Sub
	
	Private Sub attach_Alertas_Recordatorios_Por_Fechas(ByVal entity As Alertas_Recordatorios_Por_Fechas)
		Me.SendPropertyChanging
		entity.Vehiculo = Me
	End Sub
	
	Private Sub detach_Alertas_Recordatorios_Por_Fechas(ByVal entity As Alertas_Recordatorios_Por_Fechas)
		Me.SendPropertyChanging
		entity.Vehiculo = Nothing
	End Sub
	
	Private Sub attach_Alertas_Velocidad_Configuradas(ByVal entity As Alertas_Velocidad_Configuradas)
		Me.SendPropertyChanging
		entity.Vehiculo = Me
	End Sub
	
	Private Sub detach_Alertas_Velocidad_Configuradas(ByVal entity As Alertas_Velocidad_Configuradas)
		Me.SendPropertyChanging
		entity.Vehiculo = Nothing
	End Sub
	
	Private Sub attach_Alertas_Direcciones(ByVal entity As Alertas_Direcciones)
		Me.SendPropertyChanging
		entity.Vehiculo = Me
	End Sub
	
	Private Sub detach_Alertas_Direcciones(ByVal entity As Alertas_Direcciones)
		Me.SendPropertyChanging
		entity.Vehiculo = Nothing
	End Sub
	
	Private Sub attach_Sensores_Configurados(ByVal entity As Sensores_Configurados)
		Me.SendPropertyChanging
		entity.Vehiculo = Me
	End Sub
	
	Private Sub detach_Sensores_Configurados(ByVal entity As Sensores_Configurados)
		Me.SendPropertyChanging
		entity.Vehiculo = Nothing
	End Sub
	
	Private Sub attach_Sensores_Moviles(ByVal entity As Sensores_Moviles)
		Me.SendPropertyChanging
		entity.Vehiculo = Me
	End Sub
	
	Private Sub detach_Sensores_Moviles(ByVal entity As Sensores_Moviles)
		Me.SendPropertyChanging
		entity.Vehiculo = Nothing
	End Sub
	
	Private Sub attach_Grupos_Vehiculos(ByVal entity As Grupos_Vehiculos)
		Me.SendPropertyChanging
		entity.Vehiculo = Me
	End Sub
	
	Private Sub detach_Grupos_Vehiculos(ByVal entity As Grupos_Vehiculos)
		Me.SendPropertyChanging
		entity.Vehiculo = Nothing
	End Sub
	
	Private Sub attach_Alertas_Recorridos(ByVal entity As Alertas_Recorridos)
		Me.SendPropertyChanging
		entity.Vehiculo = Me
	End Sub
	
	Private Sub detach_Alertas_Recorridos(ByVal entity As Alertas_Recorridos)
		Me.SendPropertyChanging
		entity.Vehiculo = Nothing
	End Sub
	
	Private Sub attach_Alarmas_Fuera_Horarios(ByVal entity As Alarmas_Fuera_Horario)
		Me.SendPropertyChanging
		entity.Vehiculo = Me
	End Sub
	
	Private Sub detach_Alarmas_Fuera_Horarios(ByVal entity As Alarmas_Fuera_Horario)
		Me.SendPropertyChanging
		entity.Vehiculo = Nothing
	End Sub
	
	Private Sub attach_Alarma_Inicio_Actividads(ByVal entity As Alarma_Inicio_Actividad)
		Me.SendPropertyChanging
		entity.Vehiculo = Me
	End Sub
	
	Private Sub detach_Alarma_Inicio_Actividads(ByVal entity As Alarma_Inicio_Actividad)
		Me.SendPropertyChanging
		entity.Vehiculo = Nothing
	End Sub
	
	Private Sub attach_Alarmas_Inactividads(ByVal entity As Alarmas_Inactividad)
		Me.SendPropertyChanging
		entity.Vehiculo = Me
	End Sub
	
	Private Sub detach_Alarmas_Inactividads(ByVal entity As Alarmas_Inactividad)
		Me.SendPropertyChanging
		entity.Vehiculo = Nothing
	End Sub
	
	Private Sub attach_Alamas_Kms_Excedidos(ByVal entity As Alamas_Kms_Excedidos)
		Me.SendPropertyChanging
		entity.Vehiculo = Me
	End Sub
	
	Private Sub detach_Alamas_Kms_Excedidos(ByVal entity As Alamas_Kms_Excedidos)
		Me.SendPropertyChanging
		entity.Vehiculo = Nothing
	End Sub
	
	Private Sub attach_Cortes_Corrientes(ByVal entity As Cortes_Corriente)
		Me.SendPropertyChanging
		entity.Vehiculo = Me
	End Sub
	
	Private Sub detach_Cortes_Corrientes(ByVal entity As Cortes_Corriente)
		Me.SendPropertyChanging
		entity.Vehiculo = Nothing
	End Sub
	
	Private Sub attach_Alertas_Recordatorios_Por_Kms(ByVal entity As Alertas_Recordatorios_Por_Km)
		Me.SendPropertyChanging
		entity.Vehiculo = Me
	End Sub
	
	Private Sub detach_Alertas_Recordatorios_Por_Kms(ByVal entity As Alertas_Recordatorios_Por_Km)
		Me.SendPropertyChanging
		entity.Vehiculo = Nothing
	End Sub
End Class
